
hello.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044d8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000220  08004668  08004668  00014668  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004888  08004888  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004888  08004888  00014888  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004890  08004890  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004890  08004890  00014890  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004894  08004894  00014894  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004898  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  20000070  08004908  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000128  08004908  00020128  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b103  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019b6  00000000  00000000  0002b1a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000970  00000000  00000000  0002cb60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008c8  00000000  00000000  0002d4d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002697f  00000000  00000000  0002dd98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b14b  00000000  00000000  00054717  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ead31  00000000  00000000  0005f862  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014a593  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e38  00000000  00000000  0014a5e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004650 	.word	0x08004650

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08004650 	.word	0x08004650

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <startLed>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void startLed()
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000588:	2120      	movs	r1, #32
 800058a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800058e:	f000 fe2f 	bl	80011f0 <HAL_GPIO_TogglePin>
}
 8000592:	bf00      	nop
 8000594:	bd80      	pop	{r7, pc}
	...

08000598 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b0a0      	sub	sp, #128	; 0x80
 800059c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800059e:	f000 fb03 	bl	8000ba8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a2:	f000 f877 	bl	8000694 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a6:	f000 f8f7 	bl	8000798 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005aa:	f000 f8c5 	bl	8000738 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  char buffer[100];
  int i = 0;
 80005ae:	2300      	movs	r3, #0
 80005b0:	67fb      	str	r3, [r7, #124]	; 0x7c
  int result;
  char start[] = {'s','t','a','r','t','\0'};
 80005b2:	4a32      	ldr	r2, [pc, #200]	; (800067c <main+0xe4>)
 80005b4:	f107 0308 	add.w	r3, r7, #8
 80005b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005bc:	6018      	str	r0, [r3, #0]
 80005be:	3304      	adds	r3, #4
 80005c0:	8019      	strh	r1, [r3, #0]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  uint8_t ch;

	  if(HAL_UART_Receive(&huart2, &ch, 1, 1) == HAL_OK){
 80005c2:	1df9      	adds	r1, r7, #7
 80005c4:	2301      	movs	r3, #1
 80005c6:	2201      	movs	r2, #1
 80005c8:	482d      	ldr	r0, [pc, #180]	; (8000680 <main+0xe8>)
 80005ca:	f002 fa2d 	bl	8002a28 <HAL_UART_Receive>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d1f6      	bne.n	80005c2 <main+0x2a>

		  if(ch == '\r'){
 80005d4:	79fb      	ldrb	r3, [r7, #7]
 80005d6:	2b0d      	cmp	r3, #13
 80005d8:	d133      	bne.n	8000642 <main+0xaa>
			  printf("\n\r");
 80005da:	482a      	ldr	r0, [pc, #168]	; (8000684 <main+0xec>)
 80005dc:	f002 ff94 	bl	8003508 <iprintf>
			  result = strncmp(buffer, start, strlen(start));
 80005e0:	f107 0308 	add.w	r3, r7, #8
 80005e4:	4618      	mov	r0, r3
 80005e6:	f7ff fdf3 	bl	80001d0 <strlen>
 80005ea:	4602      	mov	r2, r0
 80005ec:	f107 0108 	add.w	r1, r7, #8
 80005f0:	f107 0310 	add.w	r3, r7, #16
 80005f4:	4618      	mov	r0, r3
 80005f6:	f003 f815 	bl	8003624 <strncmp>
 80005fa:	67b8      	str	r0, [r7, #120]	; 0x78

			  if(result == 0) {
 80005fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d119      	bne.n	8000636 <main+0x9e>
				  printf("buffer is equal to start\n\r");
 8000602:	4821      	ldr	r0, [pc, #132]	; (8000688 <main+0xf0>)
 8000604:	f002 ff80 	bl	8003508 <iprintf>
				  i = strlen(start) + 1;
 8000608:	f107 0308 	add.w	r3, r7, #8
 800060c:	4618      	mov	r0, r3
 800060e:	f7ff fddf 	bl	80001d0 <strlen>
 8000612:	4603      	mov	r3, r0
 8000614:	3301      	adds	r3, #1
 8000616:	67fb      	str	r3, [r7, #124]	; 0x7c

				  int num = atoi(&buffer[i]);
 8000618:	f107 0210 	add.w	r2, r7, #16
 800061c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800061e:	4413      	add	r3, r2
 8000620:	4618      	mov	r0, r3
 8000622:	f002 ff3a 	bl	800349a <atoi>
 8000626:	6778      	str	r0, [r7, #116]	; 0x74
				  printf("%d\n",num);
 8000628:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800062a:	4818      	ldr	r0, [pc, #96]	; (800068c <main+0xf4>)
 800062c:	f002 ff6c 	bl	8003508 <iprintf>

				  startLed();
 8000630:	f7ff ffa8 	bl	8000584 <startLed>
 8000634:	e002      	b.n	800063c <main+0xa4>
			  } else {
				  printf("invalid command\n");
 8000636:	4816      	ldr	r0, [pc, #88]	; (8000690 <main+0xf8>)
 8000638:	f002 ffec 	bl	8003614 <puts>
			  }
			  i = -1;
 800063c:	f04f 33ff 	mov.w	r3, #4294967295
 8000640:	67fb      	str	r3, [r7, #124]	; 0x7c
		  }

		  if (i < 99 && i >= 0) {
 8000642:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000644:	2b62      	cmp	r3, #98	; 0x62
 8000646:	dc0c      	bgt.n	8000662 <main+0xca>
 8000648:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800064a:	2b00      	cmp	r3, #0
 800064c:	db09      	blt.n	8000662 <main+0xca>
			  buffer[i] = ch;
 800064e:	79f9      	ldrb	r1, [r7, #7]
 8000650:	f107 0210 	add.w	r2, r7, #16
 8000654:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000656:	4413      	add	r3, r2
 8000658:	460a      	mov	r2, r1
 800065a:	701a      	strb	r2, [r3, #0]
			  i++;
 800065c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800065e:	3301      	adds	r3, #1
 8000660:	67fb      	str	r3, [r7, #124]	; 0x7c
		  }
		  HAL_UART_Transmit(&huart2, &ch, 1, 1);
 8000662:	1df9      	adds	r1, r7, #7
 8000664:	2301      	movs	r3, #1
 8000666:	2201      	movs	r2, #1
 8000668:	4805      	ldr	r0, [pc, #20]	; (8000680 <main+0xe8>)
 800066a:	f002 f949 	bl	8002900 <HAL_UART_Transmit>
		  if(i < 0){
 800066e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000670:	2b00      	cmp	r3, #0
 8000672:	daa6      	bge.n	80005c2 <main+0x2a>
			  i = 0;
 8000674:	2300      	movs	r3, #0
 8000676:	67fb      	str	r3, [r7, #124]	; 0x7c
  {
 8000678:	e7a3      	b.n	80005c2 <main+0x2a>
 800067a:	bf00      	nop
 800067c:	0800469c 	.word	0x0800469c
 8000680:	2000008c 	.word	0x2000008c
 8000684:	08004668 	.word	0x08004668
 8000688:	0800466c 	.word	0x0800466c
 800068c:	08004688 	.word	0x08004688
 8000690:	0800468c 	.word	0x0800468c

08000694 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b096      	sub	sp, #88	; 0x58
 8000698:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069a:	f107 0314 	add.w	r3, r7, #20
 800069e:	2244      	movs	r2, #68	; 0x44
 80006a0:	2100      	movs	r1, #0
 80006a2:	4618      	mov	r0, r3
 80006a4:	f002 ff28 	bl	80034f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a8:	463b      	mov	r3, r7
 80006aa:	2200      	movs	r2, #0
 80006ac:	601a      	str	r2, [r3, #0]
 80006ae:	605a      	str	r2, [r3, #4]
 80006b0:	609a      	str	r2, [r3, #8]
 80006b2:	60da      	str	r2, [r3, #12]
 80006b4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006b6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006ba:	f000 fdc1 	bl	8001240 <HAL_PWREx_ControlVoltageScaling>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80006c4:	f000 f8e0 	bl	8000888 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006c8:	2302      	movs	r3, #2
 80006ca:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006d0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006d2:	2310      	movs	r3, #16
 80006d4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006d6:	2302      	movs	r3, #2
 80006d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006da:	2302      	movs	r3, #2
 80006dc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006de:	2301      	movs	r3, #1
 80006e0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80006e2:	230a      	movs	r3, #10
 80006e4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006e6:	2307      	movs	r3, #7
 80006e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006ea:	2302      	movs	r3, #2
 80006ec:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006ee:	2302      	movs	r3, #2
 80006f0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006f2:	f107 0314 	add.w	r3, r7, #20
 80006f6:	4618      	mov	r0, r3
 80006f8:	f000 fdf8 	bl	80012ec <HAL_RCC_OscConfig>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000702:	f000 f8c1 	bl	8000888 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000706:	230f      	movs	r3, #15
 8000708:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800070a:	2303      	movs	r3, #3
 800070c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800070e:	2300      	movs	r3, #0
 8000710:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000712:	2300      	movs	r3, #0
 8000714:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000716:	2300      	movs	r3, #0
 8000718:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800071a:	463b      	mov	r3, r7
 800071c:	2104      	movs	r1, #4
 800071e:	4618      	mov	r0, r3
 8000720:	f001 f9c0 	bl	8001aa4 <HAL_RCC_ClockConfig>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800072a:	f000 f8ad 	bl	8000888 <Error_Handler>
  }
}
 800072e:	bf00      	nop
 8000730:	3758      	adds	r7, #88	; 0x58
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
	...

08000738 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800073c:	4b14      	ldr	r3, [pc, #80]	; (8000790 <MX_USART2_UART_Init+0x58>)
 800073e:	4a15      	ldr	r2, [pc, #84]	; (8000794 <MX_USART2_UART_Init+0x5c>)
 8000740:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000742:	4b13      	ldr	r3, [pc, #76]	; (8000790 <MX_USART2_UART_Init+0x58>)
 8000744:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000748:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800074a:	4b11      	ldr	r3, [pc, #68]	; (8000790 <MX_USART2_UART_Init+0x58>)
 800074c:	2200      	movs	r2, #0
 800074e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000750:	4b0f      	ldr	r3, [pc, #60]	; (8000790 <MX_USART2_UART_Init+0x58>)
 8000752:	2200      	movs	r2, #0
 8000754:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000756:	4b0e      	ldr	r3, [pc, #56]	; (8000790 <MX_USART2_UART_Init+0x58>)
 8000758:	2200      	movs	r2, #0
 800075a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800075c:	4b0c      	ldr	r3, [pc, #48]	; (8000790 <MX_USART2_UART_Init+0x58>)
 800075e:	220c      	movs	r2, #12
 8000760:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000762:	4b0b      	ldr	r3, [pc, #44]	; (8000790 <MX_USART2_UART_Init+0x58>)
 8000764:	2200      	movs	r2, #0
 8000766:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000768:	4b09      	ldr	r3, [pc, #36]	; (8000790 <MX_USART2_UART_Init+0x58>)
 800076a:	2200      	movs	r2, #0
 800076c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800076e:	4b08      	ldr	r3, [pc, #32]	; (8000790 <MX_USART2_UART_Init+0x58>)
 8000770:	2200      	movs	r2, #0
 8000772:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000774:	4b06      	ldr	r3, [pc, #24]	; (8000790 <MX_USART2_UART_Init+0x58>)
 8000776:	2200      	movs	r2, #0
 8000778:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800077a:	4805      	ldr	r0, [pc, #20]	; (8000790 <MX_USART2_UART_Init+0x58>)
 800077c:	f002 f872 	bl	8002864 <HAL_UART_Init>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000786:	f000 f87f 	bl	8000888 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800078a:	bf00      	nop
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	2000008c 	.word	0x2000008c
 8000794:	40004400 	.word	0x40004400

08000798 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b08a      	sub	sp, #40	; 0x28
 800079c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079e:	f107 0314 	add.w	r3, r7, #20
 80007a2:	2200      	movs	r2, #0
 80007a4:	601a      	str	r2, [r3, #0]
 80007a6:	605a      	str	r2, [r3, #4]
 80007a8:	609a      	str	r2, [r3, #8]
 80007aa:	60da      	str	r2, [r3, #12]
 80007ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ae:	4b2b      	ldr	r3, [pc, #172]	; (800085c <MX_GPIO_Init+0xc4>)
 80007b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007b2:	4a2a      	ldr	r2, [pc, #168]	; (800085c <MX_GPIO_Init+0xc4>)
 80007b4:	f043 0304 	orr.w	r3, r3, #4
 80007b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ba:	4b28      	ldr	r3, [pc, #160]	; (800085c <MX_GPIO_Init+0xc4>)
 80007bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007be:	f003 0304 	and.w	r3, r3, #4
 80007c2:	613b      	str	r3, [r7, #16]
 80007c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007c6:	4b25      	ldr	r3, [pc, #148]	; (800085c <MX_GPIO_Init+0xc4>)
 80007c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ca:	4a24      	ldr	r2, [pc, #144]	; (800085c <MX_GPIO_Init+0xc4>)
 80007cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007d2:	4b22      	ldr	r3, [pc, #136]	; (800085c <MX_GPIO_Init+0xc4>)
 80007d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007da:	60fb      	str	r3, [r7, #12]
 80007dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007de:	4b1f      	ldr	r3, [pc, #124]	; (800085c <MX_GPIO_Init+0xc4>)
 80007e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007e2:	4a1e      	ldr	r2, [pc, #120]	; (800085c <MX_GPIO_Init+0xc4>)
 80007e4:	f043 0301 	orr.w	r3, r3, #1
 80007e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ea:	4b1c      	ldr	r3, [pc, #112]	; (800085c <MX_GPIO_Init+0xc4>)
 80007ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ee:	f003 0301 	and.w	r3, r3, #1
 80007f2:	60bb      	str	r3, [r7, #8]
 80007f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007f6:	4b19      	ldr	r3, [pc, #100]	; (800085c <MX_GPIO_Init+0xc4>)
 80007f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007fa:	4a18      	ldr	r2, [pc, #96]	; (800085c <MX_GPIO_Init+0xc4>)
 80007fc:	f043 0302 	orr.w	r3, r3, #2
 8000800:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000802:	4b16      	ldr	r3, [pc, #88]	; (800085c <MX_GPIO_Init+0xc4>)
 8000804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000806:	f003 0302 	and.w	r3, r3, #2
 800080a:	607b      	str	r3, [r7, #4]
 800080c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800080e:	2200      	movs	r2, #0
 8000810:	2120      	movs	r1, #32
 8000812:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000816:	f000 fcd3 	bl	80011c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800081a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800081e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000820:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000824:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000826:	2300      	movs	r3, #0
 8000828:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800082a:	f107 0314 	add.w	r3, r7, #20
 800082e:	4619      	mov	r1, r3
 8000830:	480b      	ldr	r0, [pc, #44]	; (8000860 <MX_GPIO_Init+0xc8>)
 8000832:	f000 fb1b 	bl	8000e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000836:	2320      	movs	r3, #32
 8000838:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800083a:	2301      	movs	r3, #1
 800083c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083e:	2300      	movs	r3, #0
 8000840:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000842:	2300      	movs	r3, #0
 8000844:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000846:	f107 0314 	add.w	r3, r7, #20
 800084a:	4619      	mov	r1, r3
 800084c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000850:	f000 fb0c 	bl	8000e6c <HAL_GPIO_Init>

}
 8000854:	bf00      	nop
 8000856:	3728      	adds	r7, #40	; 0x28
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	40021000 	.word	0x40021000
 8000860:	48000800 	.word	0x48000800

08000864 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 800086c:	1d39      	adds	r1, r7, #4
 800086e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000872:	2201      	movs	r2, #1
 8000874:	4803      	ldr	r0, [pc, #12]	; (8000884 <__io_putchar+0x20>)
 8000876:	f002 f843 	bl	8002900 <HAL_UART_Transmit>

  return ch;
 800087a:	687b      	ldr	r3, [r7, #4]
}
 800087c:	4618      	mov	r0, r3
 800087e:	3708      	adds	r7, #8
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	2000008c 	.word	0x2000008c

08000888 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800088c:	b672      	cpsid	i
}
 800088e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000890:	e7fe      	b.n	8000890 <Error_Handler+0x8>
	...

08000894 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000894:	b480      	push	{r7}
 8000896:	b083      	sub	sp, #12
 8000898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800089a:	4b0f      	ldr	r3, [pc, #60]	; (80008d8 <HAL_MspInit+0x44>)
 800089c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800089e:	4a0e      	ldr	r2, [pc, #56]	; (80008d8 <HAL_MspInit+0x44>)
 80008a0:	f043 0301 	orr.w	r3, r3, #1
 80008a4:	6613      	str	r3, [r2, #96]	; 0x60
 80008a6:	4b0c      	ldr	r3, [pc, #48]	; (80008d8 <HAL_MspInit+0x44>)
 80008a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008aa:	f003 0301 	and.w	r3, r3, #1
 80008ae:	607b      	str	r3, [r7, #4]
 80008b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008b2:	4b09      	ldr	r3, [pc, #36]	; (80008d8 <HAL_MspInit+0x44>)
 80008b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008b6:	4a08      	ldr	r2, [pc, #32]	; (80008d8 <HAL_MspInit+0x44>)
 80008b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008bc:	6593      	str	r3, [r2, #88]	; 0x58
 80008be:	4b06      	ldr	r3, [pc, #24]	; (80008d8 <HAL_MspInit+0x44>)
 80008c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008c6:	603b      	str	r3, [r7, #0]
 80008c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ca:	bf00      	nop
 80008cc:	370c      	adds	r7, #12
 80008ce:	46bd      	mov	sp, r7
 80008d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop
 80008d8:	40021000 	.word	0x40021000

080008dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b0ac      	sub	sp, #176	; 0xb0
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80008e8:	2200      	movs	r2, #0
 80008ea:	601a      	str	r2, [r3, #0]
 80008ec:	605a      	str	r2, [r3, #4]
 80008ee:	609a      	str	r2, [r3, #8]
 80008f0:	60da      	str	r2, [r3, #12]
 80008f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008f4:	f107 0314 	add.w	r3, r7, #20
 80008f8:	2288      	movs	r2, #136	; 0x88
 80008fa:	2100      	movs	r1, #0
 80008fc:	4618      	mov	r0, r3
 80008fe:	f002 fdfb 	bl	80034f8 <memset>
  if(huart->Instance==USART2)
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	4a21      	ldr	r2, [pc, #132]	; (800098c <HAL_UART_MspInit+0xb0>)
 8000908:	4293      	cmp	r3, r2
 800090a:	d13b      	bne.n	8000984 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800090c:	2302      	movs	r3, #2
 800090e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000910:	2300      	movs	r3, #0
 8000912:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000914:	f107 0314 	add.w	r3, r7, #20
 8000918:	4618      	mov	r0, r3
 800091a:	f001 fae7 	bl	8001eec <HAL_RCCEx_PeriphCLKConfig>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000924:	f7ff ffb0 	bl	8000888 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000928:	4b19      	ldr	r3, [pc, #100]	; (8000990 <HAL_UART_MspInit+0xb4>)
 800092a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800092c:	4a18      	ldr	r2, [pc, #96]	; (8000990 <HAL_UART_MspInit+0xb4>)
 800092e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000932:	6593      	str	r3, [r2, #88]	; 0x58
 8000934:	4b16      	ldr	r3, [pc, #88]	; (8000990 <HAL_UART_MspInit+0xb4>)
 8000936:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000938:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800093c:	613b      	str	r3, [r7, #16]
 800093e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000940:	4b13      	ldr	r3, [pc, #76]	; (8000990 <HAL_UART_MspInit+0xb4>)
 8000942:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000944:	4a12      	ldr	r2, [pc, #72]	; (8000990 <HAL_UART_MspInit+0xb4>)
 8000946:	f043 0301 	orr.w	r3, r3, #1
 800094a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800094c:	4b10      	ldr	r3, [pc, #64]	; (8000990 <HAL_UART_MspInit+0xb4>)
 800094e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000950:	f003 0301 	and.w	r3, r3, #1
 8000954:	60fb      	str	r3, [r7, #12]
 8000956:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000958:	230c      	movs	r3, #12
 800095a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095e:	2302      	movs	r3, #2
 8000960:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000964:	2300      	movs	r3, #0
 8000966:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800096a:	2303      	movs	r3, #3
 800096c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000970:	2307      	movs	r3, #7
 8000972:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000976:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800097a:	4619      	mov	r1, r3
 800097c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000980:	f000 fa74 	bl	8000e6c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000984:	bf00      	nop
 8000986:	37b0      	adds	r7, #176	; 0xb0
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	40004400 	.word	0x40004400
 8000990:	40021000 	.word	0x40021000

08000994 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000998:	e7fe      	b.n	8000998 <NMI_Handler+0x4>

0800099a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800099a:	b480      	push	{r7}
 800099c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800099e:	e7fe      	b.n	800099e <HardFault_Handler+0x4>

080009a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009a4:	e7fe      	b.n	80009a4 <MemManage_Handler+0x4>

080009a6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009a6:	b480      	push	{r7}
 80009a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009aa:	e7fe      	b.n	80009aa <BusFault_Handler+0x4>

080009ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009b0:	e7fe      	b.n	80009b0 <UsageFault_Handler+0x4>

080009b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009b2:	b480      	push	{r7}
 80009b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009b6:	bf00      	nop
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr

080009c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009c4:	bf00      	nop
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr

080009ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009ce:	b480      	push	{r7}
 80009d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009d2:	bf00      	nop
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr

080009dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009e0:	f000 f93e 	bl	8000c60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009e4:	bf00      	nop
 80009e6:	bd80      	pop	{r7, pc}

080009e8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b086      	sub	sp, #24
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	60f8      	str	r0, [r7, #12]
 80009f0:	60b9      	str	r1, [r7, #8]
 80009f2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009f4:	2300      	movs	r3, #0
 80009f6:	617b      	str	r3, [r7, #20]
 80009f8:	e00a      	b.n	8000a10 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80009fa:	f3af 8000 	nop.w
 80009fe:	4601      	mov	r1, r0
 8000a00:	68bb      	ldr	r3, [r7, #8]
 8000a02:	1c5a      	adds	r2, r3, #1
 8000a04:	60ba      	str	r2, [r7, #8]
 8000a06:	b2ca      	uxtb	r2, r1
 8000a08:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a0a:	697b      	ldr	r3, [r7, #20]
 8000a0c:	3301      	adds	r3, #1
 8000a0e:	617b      	str	r3, [r7, #20]
 8000a10:	697a      	ldr	r2, [r7, #20]
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	429a      	cmp	r2, r3
 8000a16:	dbf0      	blt.n	80009fa <_read+0x12>
	}

return len;
 8000a18:	687b      	ldr	r3, [r7, #4]
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	3718      	adds	r7, #24
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}

08000a22 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a22:	b580      	push	{r7, lr}
 8000a24:	b086      	sub	sp, #24
 8000a26:	af00      	add	r7, sp, #0
 8000a28:	60f8      	str	r0, [r7, #12]
 8000a2a:	60b9      	str	r1, [r7, #8]
 8000a2c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a2e:	2300      	movs	r3, #0
 8000a30:	617b      	str	r3, [r7, #20]
 8000a32:	e009      	b.n	8000a48 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000a34:	68bb      	ldr	r3, [r7, #8]
 8000a36:	1c5a      	adds	r2, r3, #1
 8000a38:	60ba      	str	r2, [r7, #8]
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f7ff ff11 	bl	8000864 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a42:	697b      	ldr	r3, [r7, #20]
 8000a44:	3301      	adds	r3, #1
 8000a46:	617b      	str	r3, [r7, #20]
 8000a48:	697a      	ldr	r2, [r7, #20]
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	429a      	cmp	r2, r3
 8000a4e:	dbf1      	blt.n	8000a34 <_write+0x12>
	}
	return len;
 8000a50:	687b      	ldr	r3, [r7, #4]
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	3718      	adds	r7, #24
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}

08000a5a <_close>:

int _close(int file)
{
 8000a5a:	b480      	push	{r7}
 8000a5c:	b083      	sub	sp, #12
 8000a5e:	af00      	add	r7, sp, #0
 8000a60:	6078      	str	r0, [r7, #4]
	return -1;
 8000a62:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	370c      	adds	r7, #12
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr

08000a72 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a72:	b480      	push	{r7}
 8000a74:	b083      	sub	sp, #12
 8000a76:	af00      	add	r7, sp, #0
 8000a78:	6078      	str	r0, [r7, #4]
 8000a7a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a82:	605a      	str	r2, [r3, #4]
	return 0;
 8000a84:	2300      	movs	r3, #0
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	370c      	adds	r7, #12
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr

08000a92 <_isatty>:

int _isatty(int file)
{
 8000a92:	b480      	push	{r7}
 8000a94:	b083      	sub	sp, #12
 8000a96:	af00      	add	r7, sp, #0
 8000a98:	6078      	str	r0, [r7, #4]
	return 1;
 8000a9a:	2301      	movs	r3, #1
}
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	370c      	adds	r7, #12
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr

08000aa8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b085      	sub	sp, #20
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	60f8      	str	r0, [r7, #12]
 8000ab0:	60b9      	str	r1, [r7, #8]
 8000ab2:	607a      	str	r2, [r7, #4]
	return 0;
 8000ab4:	2300      	movs	r3, #0
}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	3714      	adds	r7, #20
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr
	...

08000ac4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b086      	sub	sp, #24
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000acc:	4a14      	ldr	r2, [pc, #80]	; (8000b20 <_sbrk+0x5c>)
 8000ace:	4b15      	ldr	r3, [pc, #84]	; (8000b24 <_sbrk+0x60>)
 8000ad0:	1ad3      	subs	r3, r2, r3
 8000ad2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ad4:	697b      	ldr	r3, [r7, #20]
 8000ad6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ad8:	4b13      	ldr	r3, [pc, #76]	; (8000b28 <_sbrk+0x64>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d102      	bne.n	8000ae6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ae0:	4b11      	ldr	r3, [pc, #68]	; (8000b28 <_sbrk+0x64>)
 8000ae2:	4a12      	ldr	r2, [pc, #72]	; (8000b2c <_sbrk+0x68>)
 8000ae4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ae6:	4b10      	ldr	r3, [pc, #64]	; (8000b28 <_sbrk+0x64>)
 8000ae8:	681a      	ldr	r2, [r3, #0]
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	4413      	add	r3, r2
 8000aee:	693a      	ldr	r2, [r7, #16]
 8000af0:	429a      	cmp	r2, r3
 8000af2:	d207      	bcs.n	8000b04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000af4:	f002 fcd6 	bl	80034a4 <__errno>
 8000af8:	4603      	mov	r3, r0
 8000afa:	220c      	movs	r2, #12
 8000afc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000afe:	f04f 33ff 	mov.w	r3, #4294967295
 8000b02:	e009      	b.n	8000b18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b04:	4b08      	ldr	r3, [pc, #32]	; (8000b28 <_sbrk+0x64>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b0a:	4b07      	ldr	r3, [pc, #28]	; (8000b28 <_sbrk+0x64>)
 8000b0c:	681a      	ldr	r2, [r3, #0]
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	4413      	add	r3, r2
 8000b12:	4a05      	ldr	r2, [pc, #20]	; (8000b28 <_sbrk+0x64>)
 8000b14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b16:	68fb      	ldr	r3, [r7, #12]
}
 8000b18:	4618      	mov	r0, r3
 8000b1a:	3718      	adds	r7, #24
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	20018000 	.word	0x20018000
 8000b24:	00000400 	.word	0x00000400
 8000b28:	20000110 	.word	0x20000110
 8000b2c:	20000128 	.word	0x20000128

08000b30 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b34:	4b06      	ldr	r3, [pc, #24]	; (8000b50 <SystemInit+0x20>)
 8000b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b3a:	4a05      	ldr	r2, [pc, #20]	; (8000b50 <SystemInit+0x20>)
 8000b3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000b44:	bf00      	nop
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop
 8000b50:	e000ed00 	.word	0xe000ed00

08000b54 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b8c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b58:	f7ff ffea 	bl	8000b30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b5c:	480c      	ldr	r0, [pc, #48]	; (8000b90 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b5e:	490d      	ldr	r1, [pc, #52]	; (8000b94 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b60:	4a0d      	ldr	r2, [pc, #52]	; (8000b98 <LoopForever+0xe>)
  movs r3, #0
 8000b62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b64:	e002      	b.n	8000b6c <LoopCopyDataInit>

08000b66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b6a:	3304      	adds	r3, #4

08000b6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b70:	d3f9      	bcc.n	8000b66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b72:	4a0a      	ldr	r2, [pc, #40]	; (8000b9c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b74:	4c0a      	ldr	r4, [pc, #40]	; (8000ba0 <LoopForever+0x16>)
  movs r3, #0
 8000b76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b78:	e001      	b.n	8000b7e <LoopFillZerobss>

08000b7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b7c:	3204      	adds	r2, #4

08000b7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b80:	d3fb      	bcc.n	8000b7a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b82:	f002 fc95 	bl	80034b0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b86:	f7ff fd07 	bl	8000598 <main>

08000b8a <LoopForever>:

LoopForever:
    b LoopForever
 8000b8a:	e7fe      	b.n	8000b8a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b8c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000b90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b94:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000b98:	08004898 	.word	0x08004898
  ldr r2, =_sbss
 8000b9c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000ba0:	20000128 	.word	0x20000128

08000ba4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ba4:	e7fe      	b.n	8000ba4 <ADC1_2_IRQHandler>
	...

08000ba8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bb2:	4b0c      	ldr	r3, [pc, #48]	; (8000be4 <HAL_Init+0x3c>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	4a0b      	ldr	r2, [pc, #44]	; (8000be4 <HAL_Init+0x3c>)
 8000bb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bbc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bbe:	2003      	movs	r0, #3
 8000bc0:	f000 f920 	bl	8000e04 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bc4:	2000      	movs	r0, #0
 8000bc6:	f000 f80f 	bl	8000be8 <HAL_InitTick>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d002      	beq.n	8000bd6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	71fb      	strb	r3, [r7, #7]
 8000bd4:	e001      	b.n	8000bda <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000bd6:	f7ff fe5d 	bl	8000894 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bda:	79fb      	ldrb	r3, [r7, #7]
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	3708      	adds	r7, #8
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	40022000 	.word	0x40022000

08000be8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b084      	sub	sp, #16
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000bf4:	4b17      	ldr	r3, [pc, #92]	; (8000c54 <HAL_InitTick+0x6c>)
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d023      	beq.n	8000c44 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000bfc:	4b16      	ldr	r3, [pc, #88]	; (8000c58 <HAL_InitTick+0x70>)
 8000bfe:	681a      	ldr	r2, [r3, #0]
 8000c00:	4b14      	ldr	r3, [pc, #80]	; (8000c54 <HAL_InitTick+0x6c>)
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	4619      	mov	r1, r3
 8000c06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c12:	4618      	mov	r0, r3
 8000c14:	f000 f91d 	bl	8000e52 <HAL_SYSTICK_Config>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d10f      	bne.n	8000c3e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	2b0f      	cmp	r3, #15
 8000c22:	d809      	bhi.n	8000c38 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c24:	2200      	movs	r2, #0
 8000c26:	6879      	ldr	r1, [r7, #4]
 8000c28:	f04f 30ff 	mov.w	r0, #4294967295
 8000c2c:	f000 f8f5 	bl	8000e1a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c30:	4a0a      	ldr	r2, [pc, #40]	; (8000c5c <HAL_InitTick+0x74>)
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	6013      	str	r3, [r2, #0]
 8000c36:	e007      	b.n	8000c48 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000c38:	2301      	movs	r3, #1
 8000c3a:	73fb      	strb	r3, [r7, #15]
 8000c3c:	e004      	b.n	8000c48 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	73fb      	strb	r3, [r7, #15]
 8000c42:	e001      	b.n	8000c48 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c44:	2301      	movs	r3, #1
 8000c46:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c48:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	3710      	adds	r7, #16
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	20000008 	.word	0x20000008
 8000c58:	20000000 	.word	0x20000000
 8000c5c:	20000004 	.word	0x20000004

08000c60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c64:	4b06      	ldr	r3, [pc, #24]	; (8000c80 <HAL_IncTick+0x20>)
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	461a      	mov	r2, r3
 8000c6a:	4b06      	ldr	r3, [pc, #24]	; (8000c84 <HAL_IncTick+0x24>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	4413      	add	r3, r2
 8000c70:	4a04      	ldr	r2, [pc, #16]	; (8000c84 <HAL_IncTick+0x24>)
 8000c72:	6013      	str	r3, [r2, #0]
}
 8000c74:	bf00      	nop
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	20000008 	.word	0x20000008
 8000c84:	20000114 	.word	0x20000114

08000c88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c8c:	4b03      	ldr	r3, [pc, #12]	; (8000c9c <HAL_GetTick+0x14>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	20000114 	.word	0x20000114

08000ca0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b085      	sub	sp, #20
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	f003 0307 	and.w	r3, r3, #7
 8000cae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cb0:	4b0c      	ldr	r3, [pc, #48]	; (8000ce4 <__NVIC_SetPriorityGrouping+0x44>)
 8000cb2:	68db      	ldr	r3, [r3, #12]
 8000cb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cb6:	68ba      	ldr	r2, [r7, #8]
 8000cb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cc4:	68bb      	ldr	r3, [r7, #8]
 8000cc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ccc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cd2:	4a04      	ldr	r2, [pc, #16]	; (8000ce4 <__NVIC_SetPriorityGrouping+0x44>)
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	60d3      	str	r3, [r2, #12]
}
 8000cd8:	bf00      	nop
 8000cda:	3714      	adds	r7, #20
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr
 8000ce4:	e000ed00 	.word	0xe000ed00

08000ce8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cec:	4b04      	ldr	r3, [pc, #16]	; (8000d00 <__NVIC_GetPriorityGrouping+0x18>)
 8000cee:	68db      	ldr	r3, [r3, #12]
 8000cf0:	0a1b      	lsrs	r3, r3, #8
 8000cf2:	f003 0307 	and.w	r3, r3, #7
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr
 8000d00:	e000ed00 	.word	0xe000ed00

08000d04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	6039      	str	r1, [r7, #0]
 8000d0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	db0a      	blt.n	8000d2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	b2da      	uxtb	r2, r3
 8000d1c:	490c      	ldr	r1, [pc, #48]	; (8000d50 <__NVIC_SetPriority+0x4c>)
 8000d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d22:	0112      	lsls	r2, r2, #4
 8000d24:	b2d2      	uxtb	r2, r2
 8000d26:	440b      	add	r3, r1
 8000d28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d2c:	e00a      	b.n	8000d44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	b2da      	uxtb	r2, r3
 8000d32:	4908      	ldr	r1, [pc, #32]	; (8000d54 <__NVIC_SetPriority+0x50>)
 8000d34:	79fb      	ldrb	r3, [r7, #7]
 8000d36:	f003 030f 	and.w	r3, r3, #15
 8000d3a:	3b04      	subs	r3, #4
 8000d3c:	0112      	lsls	r2, r2, #4
 8000d3e:	b2d2      	uxtb	r2, r2
 8000d40:	440b      	add	r3, r1
 8000d42:	761a      	strb	r2, [r3, #24]
}
 8000d44:	bf00      	nop
 8000d46:	370c      	adds	r7, #12
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr
 8000d50:	e000e100 	.word	0xe000e100
 8000d54:	e000ed00 	.word	0xe000ed00

08000d58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b089      	sub	sp, #36	; 0x24
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	60f8      	str	r0, [r7, #12]
 8000d60:	60b9      	str	r1, [r7, #8]
 8000d62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	f003 0307 	and.w	r3, r3, #7
 8000d6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d6c:	69fb      	ldr	r3, [r7, #28]
 8000d6e:	f1c3 0307 	rsb	r3, r3, #7
 8000d72:	2b04      	cmp	r3, #4
 8000d74:	bf28      	it	cs
 8000d76:	2304      	movcs	r3, #4
 8000d78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d7a:	69fb      	ldr	r3, [r7, #28]
 8000d7c:	3304      	adds	r3, #4
 8000d7e:	2b06      	cmp	r3, #6
 8000d80:	d902      	bls.n	8000d88 <NVIC_EncodePriority+0x30>
 8000d82:	69fb      	ldr	r3, [r7, #28]
 8000d84:	3b03      	subs	r3, #3
 8000d86:	e000      	b.n	8000d8a <NVIC_EncodePriority+0x32>
 8000d88:	2300      	movs	r3, #0
 8000d8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d8c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d90:	69bb      	ldr	r3, [r7, #24]
 8000d92:	fa02 f303 	lsl.w	r3, r2, r3
 8000d96:	43da      	mvns	r2, r3
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	401a      	ands	r2, r3
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000da0:	f04f 31ff 	mov.w	r1, #4294967295
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	fa01 f303 	lsl.w	r3, r1, r3
 8000daa:	43d9      	mvns	r1, r3
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000db0:	4313      	orrs	r3, r2
         );
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	3724      	adds	r7, #36	; 0x24
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
	...

08000dc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	3b01      	subs	r3, #1
 8000dcc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000dd0:	d301      	bcc.n	8000dd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	e00f      	b.n	8000df6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dd6:	4a0a      	ldr	r2, [pc, #40]	; (8000e00 <SysTick_Config+0x40>)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	3b01      	subs	r3, #1
 8000ddc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dde:	210f      	movs	r1, #15
 8000de0:	f04f 30ff 	mov.w	r0, #4294967295
 8000de4:	f7ff ff8e 	bl	8000d04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000de8:	4b05      	ldr	r3, [pc, #20]	; (8000e00 <SysTick_Config+0x40>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dee:	4b04      	ldr	r3, [pc, #16]	; (8000e00 <SysTick_Config+0x40>)
 8000df0:	2207      	movs	r2, #7
 8000df2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000df4:	2300      	movs	r3, #0
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	3708      	adds	r7, #8
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	e000e010 	.word	0xe000e010

08000e04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e0c:	6878      	ldr	r0, [r7, #4]
 8000e0e:	f7ff ff47 	bl	8000ca0 <__NVIC_SetPriorityGrouping>
}
 8000e12:	bf00      	nop
 8000e14:	3708      	adds	r7, #8
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}

08000e1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	b086      	sub	sp, #24
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	4603      	mov	r3, r0
 8000e22:	60b9      	str	r1, [r7, #8]
 8000e24:	607a      	str	r2, [r7, #4]
 8000e26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e2c:	f7ff ff5c 	bl	8000ce8 <__NVIC_GetPriorityGrouping>
 8000e30:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e32:	687a      	ldr	r2, [r7, #4]
 8000e34:	68b9      	ldr	r1, [r7, #8]
 8000e36:	6978      	ldr	r0, [r7, #20]
 8000e38:	f7ff ff8e 	bl	8000d58 <NVIC_EncodePriority>
 8000e3c:	4602      	mov	r2, r0
 8000e3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e42:	4611      	mov	r1, r2
 8000e44:	4618      	mov	r0, r3
 8000e46:	f7ff ff5d 	bl	8000d04 <__NVIC_SetPriority>
}
 8000e4a:	bf00      	nop
 8000e4c:	3718      	adds	r7, #24
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}

08000e52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e52:	b580      	push	{r7, lr}
 8000e54:	b082      	sub	sp, #8
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e5a:	6878      	ldr	r0, [r7, #4]
 8000e5c:	f7ff ffb0 	bl	8000dc0 <SysTick_Config>
 8000e60:	4603      	mov	r3, r0
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	3708      	adds	r7, #8
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
	...

08000e6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b087      	sub	sp, #28
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
 8000e74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e76:	2300      	movs	r3, #0
 8000e78:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e7a:	e17f      	b.n	800117c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	681a      	ldr	r2, [r3, #0]
 8000e80:	2101      	movs	r1, #1
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	fa01 f303 	lsl.w	r3, r1, r3
 8000e88:	4013      	ands	r3, r2
 8000e8a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	f000 8171 	beq.w	8001176 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	f003 0303 	and.w	r3, r3, #3
 8000e9c:	2b01      	cmp	r3, #1
 8000e9e:	d005      	beq.n	8000eac <HAL_GPIO_Init+0x40>
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	f003 0303 	and.w	r3, r3, #3
 8000ea8:	2b02      	cmp	r3, #2
 8000eaa:	d130      	bne.n	8000f0e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	689b      	ldr	r3, [r3, #8]
 8000eb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	005b      	lsls	r3, r3, #1
 8000eb6:	2203      	movs	r2, #3
 8000eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebc:	43db      	mvns	r3, r3
 8000ebe:	693a      	ldr	r2, [r7, #16]
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	68da      	ldr	r2, [r3, #12]
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	005b      	lsls	r3, r3, #1
 8000ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed0:	693a      	ldr	r2, [r7, #16]
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	693a      	ldr	r2, [r7, #16]
 8000eda:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eea:	43db      	mvns	r3, r3
 8000eec:	693a      	ldr	r2, [r7, #16]
 8000eee:	4013      	ands	r3, r2
 8000ef0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	091b      	lsrs	r3, r3, #4
 8000ef8:	f003 0201 	and.w	r2, r3, #1
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	fa02 f303 	lsl.w	r3, r2, r3
 8000f02:	693a      	ldr	r2, [r7, #16]
 8000f04:	4313      	orrs	r3, r2
 8000f06:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	693a      	ldr	r2, [r7, #16]
 8000f0c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	f003 0303 	and.w	r3, r3, #3
 8000f16:	2b03      	cmp	r3, #3
 8000f18:	d118      	bne.n	8000f4c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f1e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000f20:	2201      	movs	r2, #1
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	fa02 f303 	lsl.w	r3, r2, r3
 8000f28:	43db      	mvns	r3, r3
 8000f2a:	693a      	ldr	r2, [r7, #16]
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	08db      	lsrs	r3, r3, #3
 8000f36:	f003 0201 	and.w	r2, r3, #1
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f40:	693a      	ldr	r2, [r7, #16]
 8000f42:	4313      	orrs	r3, r2
 8000f44:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	693a      	ldr	r2, [r7, #16]
 8000f4a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	f003 0303 	and.w	r3, r3, #3
 8000f54:	2b03      	cmp	r3, #3
 8000f56:	d017      	beq.n	8000f88 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	68db      	ldr	r3, [r3, #12]
 8000f5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	005b      	lsls	r3, r3, #1
 8000f62:	2203      	movs	r2, #3
 8000f64:	fa02 f303 	lsl.w	r3, r2, r3
 8000f68:	43db      	mvns	r3, r3
 8000f6a:	693a      	ldr	r2, [r7, #16]
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	689a      	ldr	r2, [r3, #8]
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	005b      	lsls	r3, r3, #1
 8000f78:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7c:	693a      	ldr	r2, [r7, #16]
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	693a      	ldr	r2, [r7, #16]
 8000f86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	f003 0303 	and.w	r3, r3, #3
 8000f90:	2b02      	cmp	r3, #2
 8000f92:	d123      	bne.n	8000fdc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	08da      	lsrs	r2, r3, #3
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	3208      	adds	r2, #8
 8000f9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fa0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000fa2:	697b      	ldr	r3, [r7, #20]
 8000fa4:	f003 0307 	and.w	r3, r3, #7
 8000fa8:	009b      	lsls	r3, r3, #2
 8000faa:	220f      	movs	r2, #15
 8000fac:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb0:	43db      	mvns	r3, r3
 8000fb2:	693a      	ldr	r2, [r7, #16]
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	691a      	ldr	r2, [r3, #16]
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	f003 0307 	and.w	r3, r3, #7
 8000fc2:	009b      	lsls	r3, r3, #2
 8000fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc8:	693a      	ldr	r2, [r7, #16]
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	08da      	lsrs	r2, r3, #3
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	3208      	adds	r2, #8
 8000fd6:	6939      	ldr	r1, [r7, #16]
 8000fd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	005b      	lsls	r3, r3, #1
 8000fe6:	2203      	movs	r2, #3
 8000fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fec:	43db      	mvns	r3, r3
 8000fee:	693a      	ldr	r2, [r7, #16]
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	f003 0203 	and.w	r2, r3, #3
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	005b      	lsls	r3, r3, #1
 8001000:	fa02 f303 	lsl.w	r3, r2, r3
 8001004:	693a      	ldr	r2, [r7, #16]
 8001006:	4313      	orrs	r3, r2
 8001008:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	693a      	ldr	r2, [r7, #16]
 800100e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001018:	2b00      	cmp	r3, #0
 800101a:	f000 80ac 	beq.w	8001176 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800101e:	4b5f      	ldr	r3, [pc, #380]	; (800119c <HAL_GPIO_Init+0x330>)
 8001020:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001022:	4a5e      	ldr	r2, [pc, #376]	; (800119c <HAL_GPIO_Init+0x330>)
 8001024:	f043 0301 	orr.w	r3, r3, #1
 8001028:	6613      	str	r3, [r2, #96]	; 0x60
 800102a:	4b5c      	ldr	r3, [pc, #368]	; (800119c <HAL_GPIO_Init+0x330>)
 800102c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800102e:	f003 0301 	and.w	r3, r3, #1
 8001032:	60bb      	str	r3, [r7, #8]
 8001034:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001036:	4a5a      	ldr	r2, [pc, #360]	; (80011a0 <HAL_GPIO_Init+0x334>)
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	089b      	lsrs	r3, r3, #2
 800103c:	3302      	adds	r3, #2
 800103e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001042:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	f003 0303 	and.w	r3, r3, #3
 800104a:	009b      	lsls	r3, r3, #2
 800104c:	220f      	movs	r2, #15
 800104e:	fa02 f303 	lsl.w	r3, r2, r3
 8001052:	43db      	mvns	r3, r3
 8001054:	693a      	ldr	r2, [r7, #16]
 8001056:	4013      	ands	r3, r2
 8001058:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001060:	d025      	beq.n	80010ae <HAL_GPIO_Init+0x242>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4a4f      	ldr	r2, [pc, #316]	; (80011a4 <HAL_GPIO_Init+0x338>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d01f      	beq.n	80010aa <HAL_GPIO_Init+0x23e>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4a4e      	ldr	r2, [pc, #312]	; (80011a8 <HAL_GPIO_Init+0x33c>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d019      	beq.n	80010a6 <HAL_GPIO_Init+0x23a>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4a4d      	ldr	r2, [pc, #308]	; (80011ac <HAL_GPIO_Init+0x340>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d013      	beq.n	80010a2 <HAL_GPIO_Init+0x236>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4a4c      	ldr	r2, [pc, #304]	; (80011b0 <HAL_GPIO_Init+0x344>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d00d      	beq.n	800109e <HAL_GPIO_Init+0x232>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4a4b      	ldr	r2, [pc, #300]	; (80011b4 <HAL_GPIO_Init+0x348>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d007      	beq.n	800109a <HAL_GPIO_Init+0x22e>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4a4a      	ldr	r2, [pc, #296]	; (80011b8 <HAL_GPIO_Init+0x34c>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d101      	bne.n	8001096 <HAL_GPIO_Init+0x22a>
 8001092:	2306      	movs	r3, #6
 8001094:	e00c      	b.n	80010b0 <HAL_GPIO_Init+0x244>
 8001096:	2307      	movs	r3, #7
 8001098:	e00a      	b.n	80010b0 <HAL_GPIO_Init+0x244>
 800109a:	2305      	movs	r3, #5
 800109c:	e008      	b.n	80010b0 <HAL_GPIO_Init+0x244>
 800109e:	2304      	movs	r3, #4
 80010a0:	e006      	b.n	80010b0 <HAL_GPIO_Init+0x244>
 80010a2:	2303      	movs	r3, #3
 80010a4:	e004      	b.n	80010b0 <HAL_GPIO_Init+0x244>
 80010a6:	2302      	movs	r3, #2
 80010a8:	e002      	b.n	80010b0 <HAL_GPIO_Init+0x244>
 80010aa:	2301      	movs	r3, #1
 80010ac:	e000      	b.n	80010b0 <HAL_GPIO_Init+0x244>
 80010ae:	2300      	movs	r3, #0
 80010b0:	697a      	ldr	r2, [r7, #20]
 80010b2:	f002 0203 	and.w	r2, r2, #3
 80010b6:	0092      	lsls	r2, r2, #2
 80010b8:	4093      	lsls	r3, r2
 80010ba:	693a      	ldr	r2, [r7, #16]
 80010bc:	4313      	orrs	r3, r2
 80010be:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80010c0:	4937      	ldr	r1, [pc, #220]	; (80011a0 <HAL_GPIO_Init+0x334>)
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	089b      	lsrs	r3, r3, #2
 80010c6:	3302      	adds	r3, #2
 80010c8:	693a      	ldr	r2, [r7, #16]
 80010ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80010ce:	4b3b      	ldr	r3, [pc, #236]	; (80011bc <HAL_GPIO_Init+0x350>)
 80010d0:	689b      	ldr	r3, [r3, #8]
 80010d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	43db      	mvns	r3, r3
 80010d8:	693a      	ldr	r2, [r7, #16]
 80010da:	4013      	ands	r3, r2
 80010dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d003      	beq.n	80010f2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80010ea:	693a      	ldr	r2, [r7, #16]
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	4313      	orrs	r3, r2
 80010f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80010f2:	4a32      	ldr	r2, [pc, #200]	; (80011bc <HAL_GPIO_Init+0x350>)
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80010f8:	4b30      	ldr	r3, [pc, #192]	; (80011bc <HAL_GPIO_Init+0x350>)
 80010fa:	68db      	ldr	r3, [r3, #12]
 80010fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	43db      	mvns	r3, r3
 8001102:	693a      	ldr	r2, [r7, #16]
 8001104:	4013      	ands	r3, r2
 8001106:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001110:	2b00      	cmp	r3, #0
 8001112:	d003      	beq.n	800111c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001114:	693a      	ldr	r2, [r7, #16]
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	4313      	orrs	r3, r2
 800111a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800111c:	4a27      	ldr	r2, [pc, #156]	; (80011bc <HAL_GPIO_Init+0x350>)
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001122:	4b26      	ldr	r3, [pc, #152]	; (80011bc <HAL_GPIO_Init+0x350>)
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	43db      	mvns	r3, r3
 800112c:	693a      	ldr	r2, [r7, #16]
 800112e:	4013      	ands	r3, r2
 8001130:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800113a:	2b00      	cmp	r3, #0
 800113c:	d003      	beq.n	8001146 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800113e:	693a      	ldr	r2, [r7, #16]
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	4313      	orrs	r3, r2
 8001144:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001146:	4a1d      	ldr	r2, [pc, #116]	; (80011bc <HAL_GPIO_Init+0x350>)
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800114c:	4b1b      	ldr	r3, [pc, #108]	; (80011bc <HAL_GPIO_Init+0x350>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	43db      	mvns	r3, r3
 8001156:	693a      	ldr	r2, [r7, #16]
 8001158:	4013      	ands	r3, r2
 800115a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001164:	2b00      	cmp	r3, #0
 8001166:	d003      	beq.n	8001170 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001168:	693a      	ldr	r2, [r7, #16]
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	4313      	orrs	r3, r2
 800116e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001170:	4a12      	ldr	r2, [pc, #72]	; (80011bc <HAL_GPIO_Init+0x350>)
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	3301      	adds	r3, #1
 800117a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	fa22 f303 	lsr.w	r3, r2, r3
 8001186:	2b00      	cmp	r3, #0
 8001188:	f47f ae78 	bne.w	8000e7c <HAL_GPIO_Init+0x10>
  }
}
 800118c:	bf00      	nop
 800118e:	bf00      	nop
 8001190:	371c      	adds	r7, #28
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	40021000 	.word	0x40021000
 80011a0:	40010000 	.word	0x40010000
 80011a4:	48000400 	.word	0x48000400
 80011a8:	48000800 	.word	0x48000800
 80011ac:	48000c00 	.word	0x48000c00
 80011b0:	48001000 	.word	0x48001000
 80011b4:	48001400 	.word	0x48001400
 80011b8:	48001800 	.word	0x48001800
 80011bc:	40010400 	.word	0x40010400

080011c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	460b      	mov	r3, r1
 80011ca:	807b      	strh	r3, [r7, #2]
 80011cc:	4613      	mov	r3, r2
 80011ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011d0:	787b      	ldrb	r3, [r7, #1]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d003      	beq.n	80011de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011d6:	887a      	ldrh	r2, [r7, #2]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80011dc:	e002      	b.n	80011e4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011de:	887a      	ldrh	r2, [r7, #2]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80011e4:	bf00      	nop
 80011e6:	370c      	adds	r7, #12
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr

080011f0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b085      	sub	sp, #20
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
 80011f8:	460b      	mov	r3, r1
 80011fa:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	695b      	ldr	r3, [r3, #20]
 8001200:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001202:	887a      	ldrh	r2, [r7, #2]
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	4013      	ands	r3, r2
 8001208:	041a      	lsls	r2, r3, #16
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	43d9      	mvns	r1, r3
 800120e:	887b      	ldrh	r3, [r7, #2]
 8001210:	400b      	ands	r3, r1
 8001212:	431a      	orrs	r2, r3
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	619a      	str	r2, [r3, #24]
}
 8001218:	bf00      	nop
 800121a:	3714      	adds	r7, #20
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr

08001224 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001228:	4b04      	ldr	r3, [pc, #16]	; (800123c <HAL_PWREx_GetVoltageRange+0x18>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001230:	4618      	mov	r0, r3
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	40007000 	.word	0x40007000

08001240 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001240:	b480      	push	{r7}
 8001242:	b085      	sub	sp, #20
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800124e:	d130      	bne.n	80012b2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001250:	4b23      	ldr	r3, [pc, #140]	; (80012e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001258:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800125c:	d038      	beq.n	80012d0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800125e:	4b20      	ldr	r3, [pc, #128]	; (80012e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001266:	4a1e      	ldr	r2, [pc, #120]	; (80012e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001268:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800126c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800126e:	4b1d      	ldr	r3, [pc, #116]	; (80012e4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	2232      	movs	r2, #50	; 0x32
 8001274:	fb02 f303 	mul.w	r3, r2, r3
 8001278:	4a1b      	ldr	r2, [pc, #108]	; (80012e8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800127a:	fba2 2303 	umull	r2, r3, r2, r3
 800127e:	0c9b      	lsrs	r3, r3, #18
 8001280:	3301      	adds	r3, #1
 8001282:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001284:	e002      	b.n	800128c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	3b01      	subs	r3, #1
 800128a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800128c:	4b14      	ldr	r3, [pc, #80]	; (80012e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800128e:	695b      	ldr	r3, [r3, #20]
 8001290:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001294:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001298:	d102      	bne.n	80012a0 <HAL_PWREx_ControlVoltageScaling+0x60>
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d1f2      	bne.n	8001286 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80012a0:	4b0f      	ldr	r3, [pc, #60]	; (80012e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012a2:	695b      	ldr	r3, [r3, #20]
 80012a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012ac:	d110      	bne.n	80012d0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80012ae:	2303      	movs	r3, #3
 80012b0:	e00f      	b.n	80012d2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80012b2:	4b0b      	ldr	r3, [pc, #44]	; (80012e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80012ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012be:	d007      	beq.n	80012d0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80012c0:	4b07      	ldr	r3, [pc, #28]	; (80012e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80012c8:	4a05      	ldr	r2, [pc, #20]	; (80012e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012ce:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80012d0:	2300      	movs	r3, #0
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3714      	adds	r7, #20
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	40007000 	.word	0x40007000
 80012e4:	20000000 	.word	0x20000000
 80012e8:	431bde83 	.word	0x431bde83

080012ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b088      	sub	sp, #32
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d101      	bne.n	80012fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
 80012fc:	e3ca      	b.n	8001a94 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012fe:	4b97      	ldr	r3, [pc, #604]	; (800155c <HAL_RCC_OscConfig+0x270>)
 8001300:	689b      	ldr	r3, [r3, #8]
 8001302:	f003 030c 	and.w	r3, r3, #12
 8001306:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001308:	4b94      	ldr	r3, [pc, #592]	; (800155c <HAL_RCC_OscConfig+0x270>)
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	f003 0303 	and.w	r3, r3, #3
 8001310:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f003 0310 	and.w	r3, r3, #16
 800131a:	2b00      	cmp	r3, #0
 800131c:	f000 80e4 	beq.w	80014e8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001320:	69bb      	ldr	r3, [r7, #24]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d007      	beq.n	8001336 <HAL_RCC_OscConfig+0x4a>
 8001326:	69bb      	ldr	r3, [r7, #24]
 8001328:	2b0c      	cmp	r3, #12
 800132a:	f040 808b 	bne.w	8001444 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	2b01      	cmp	r3, #1
 8001332:	f040 8087 	bne.w	8001444 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001336:	4b89      	ldr	r3, [pc, #548]	; (800155c <HAL_RCC_OscConfig+0x270>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f003 0302 	and.w	r3, r3, #2
 800133e:	2b00      	cmp	r3, #0
 8001340:	d005      	beq.n	800134e <HAL_RCC_OscConfig+0x62>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	699b      	ldr	r3, [r3, #24]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d101      	bne.n	800134e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	e3a2      	b.n	8001a94 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6a1a      	ldr	r2, [r3, #32]
 8001352:	4b82      	ldr	r3, [pc, #520]	; (800155c <HAL_RCC_OscConfig+0x270>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f003 0308 	and.w	r3, r3, #8
 800135a:	2b00      	cmp	r3, #0
 800135c:	d004      	beq.n	8001368 <HAL_RCC_OscConfig+0x7c>
 800135e:	4b7f      	ldr	r3, [pc, #508]	; (800155c <HAL_RCC_OscConfig+0x270>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001366:	e005      	b.n	8001374 <HAL_RCC_OscConfig+0x88>
 8001368:	4b7c      	ldr	r3, [pc, #496]	; (800155c <HAL_RCC_OscConfig+0x270>)
 800136a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800136e:	091b      	lsrs	r3, r3, #4
 8001370:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001374:	4293      	cmp	r3, r2
 8001376:	d223      	bcs.n	80013c0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6a1b      	ldr	r3, [r3, #32]
 800137c:	4618      	mov	r0, r3
 800137e:	f000 fd55 	bl	8001e2c <RCC_SetFlashLatencyFromMSIRange>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001388:	2301      	movs	r3, #1
 800138a:	e383      	b.n	8001a94 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800138c:	4b73      	ldr	r3, [pc, #460]	; (800155c <HAL_RCC_OscConfig+0x270>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a72      	ldr	r2, [pc, #456]	; (800155c <HAL_RCC_OscConfig+0x270>)
 8001392:	f043 0308 	orr.w	r3, r3, #8
 8001396:	6013      	str	r3, [r2, #0]
 8001398:	4b70      	ldr	r3, [pc, #448]	; (800155c <HAL_RCC_OscConfig+0x270>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6a1b      	ldr	r3, [r3, #32]
 80013a4:	496d      	ldr	r1, [pc, #436]	; (800155c <HAL_RCC_OscConfig+0x270>)
 80013a6:	4313      	orrs	r3, r2
 80013a8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013aa:	4b6c      	ldr	r3, [pc, #432]	; (800155c <HAL_RCC_OscConfig+0x270>)
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	69db      	ldr	r3, [r3, #28]
 80013b6:	021b      	lsls	r3, r3, #8
 80013b8:	4968      	ldr	r1, [pc, #416]	; (800155c <HAL_RCC_OscConfig+0x270>)
 80013ba:	4313      	orrs	r3, r2
 80013bc:	604b      	str	r3, [r1, #4]
 80013be:	e025      	b.n	800140c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013c0:	4b66      	ldr	r3, [pc, #408]	; (800155c <HAL_RCC_OscConfig+0x270>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a65      	ldr	r2, [pc, #404]	; (800155c <HAL_RCC_OscConfig+0x270>)
 80013c6:	f043 0308 	orr.w	r3, r3, #8
 80013ca:	6013      	str	r3, [r2, #0]
 80013cc:	4b63      	ldr	r3, [pc, #396]	; (800155c <HAL_RCC_OscConfig+0x270>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6a1b      	ldr	r3, [r3, #32]
 80013d8:	4960      	ldr	r1, [pc, #384]	; (800155c <HAL_RCC_OscConfig+0x270>)
 80013da:	4313      	orrs	r3, r2
 80013dc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013de:	4b5f      	ldr	r3, [pc, #380]	; (800155c <HAL_RCC_OscConfig+0x270>)
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	69db      	ldr	r3, [r3, #28]
 80013ea:	021b      	lsls	r3, r3, #8
 80013ec:	495b      	ldr	r1, [pc, #364]	; (800155c <HAL_RCC_OscConfig+0x270>)
 80013ee:	4313      	orrs	r3, r2
 80013f0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80013f2:	69bb      	ldr	r3, [r7, #24]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d109      	bne.n	800140c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6a1b      	ldr	r3, [r3, #32]
 80013fc:	4618      	mov	r0, r3
 80013fe:	f000 fd15 	bl	8001e2c <RCC_SetFlashLatencyFromMSIRange>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001408:	2301      	movs	r3, #1
 800140a:	e343      	b.n	8001a94 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800140c:	f000 fc4a 	bl	8001ca4 <HAL_RCC_GetSysClockFreq>
 8001410:	4602      	mov	r2, r0
 8001412:	4b52      	ldr	r3, [pc, #328]	; (800155c <HAL_RCC_OscConfig+0x270>)
 8001414:	689b      	ldr	r3, [r3, #8]
 8001416:	091b      	lsrs	r3, r3, #4
 8001418:	f003 030f 	and.w	r3, r3, #15
 800141c:	4950      	ldr	r1, [pc, #320]	; (8001560 <HAL_RCC_OscConfig+0x274>)
 800141e:	5ccb      	ldrb	r3, [r1, r3]
 8001420:	f003 031f 	and.w	r3, r3, #31
 8001424:	fa22 f303 	lsr.w	r3, r2, r3
 8001428:	4a4e      	ldr	r2, [pc, #312]	; (8001564 <HAL_RCC_OscConfig+0x278>)
 800142a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800142c:	4b4e      	ldr	r3, [pc, #312]	; (8001568 <HAL_RCC_OscConfig+0x27c>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4618      	mov	r0, r3
 8001432:	f7ff fbd9 	bl	8000be8 <HAL_InitTick>
 8001436:	4603      	mov	r3, r0
 8001438:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800143a:	7bfb      	ldrb	r3, [r7, #15]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d052      	beq.n	80014e6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001440:	7bfb      	ldrb	r3, [r7, #15]
 8001442:	e327      	b.n	8001a94 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	699b      	ldr	r3, [r3, #24]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d032      	beq.n	80014b2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800144c:	4b43      	ldr	r3, [pc, #268]	; (800155c <HAL_RCC_OscConfig+0x270>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a42      	ldr	r2, [pc, #264]	; (800155c <HAL_RCC_OscConfig+0x270>)
 8001452:	f043 0301 	orr.w	r3, r3, #1
 8001456:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001458:	f7ff fc16 	bl	8000c88 <HAL_GetTick>
 800145c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800145e:	e008      	b.n	8001472 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001460:	f7ff fc12 	bl	8000c88 <HAL_GetTick>
 8001464:	4602      	mov	r2, r0
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	2b02      	cmp	r3, #2
 800146c:	d901      	bls.n	8001472 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800146e:	2303      	movs	r3, #3
 8001470:	e310      	b.n	8001a94 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001472:	4b3a      	ldr	r3, [pc, #232]	; (800155c <HAL_RCC_OscConfig+0x270>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f003 0302 	and.w	r3, r3, #2
 800147a:	2b00      	cmp	r3, #0
 800147c:	d0f0      	beq.n	8001460 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800147e:	4b37      	ldr	r3, [pc, #220]	; (800155c <HAL_RCC_OscConfig+0x270>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a36      	ldr	r2, [pc, #216]	; (800155c <HAL_RCC_OscConfig+0x270>)
 8001484:	f043 0308 	orr.w	r3, r3, #8
 8001488:	6013      	str	r3, [r2, #0]
 800148a:	4b34      	ldr	r3, [pc, #208]	; (800155c <HAL_RCC_OscConfig+0x270>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6a1b      	ldr	r3, [r3, #32]
 8001496:	4931      	ldr	r1, [pc, #196]	; (800155c <HAL_RCC_OscConfig+0x270>)
 8001498:	4313      	orrs	r3, r2
 800149a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800149c:	4b2f      	ldr	r3, [pc, #188]	; (800155c <HAL_RCC_OscConfig+0x270>)
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	69db      	ldr	r3, [r3, #28]
 80014a8:	021b      	lsls	r3, r3, #8
 80014aa:	492c      	ldr	r1, [pc, #176]	; (800155c <HAL_RCC_OscConfig+0x270>)
 80014ac:	4313      	orrs	r3, r2
 80014ae:	604b      	str	r3, [r1, #4]
 80014b0:	e01a      	b.n	80014e8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80014b2:	4b2a      	ldr	r3, [pc, #168]	; (800155c <HAL_RCC_OscConfig+0x270>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a29      	ldr	r2, [pc, #164]	; (800155c <HAL_RCC_OscConfig+0x270>)
 80014b8:	f023 0301 	bic.w	r3, r3, #1
 80014bc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80014be:	f7ff fbe3 	bl	8000c88 <HAL_GetTick>
 80014c2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80014c4:	e008      	b.n	80014d8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80014c6:	f7ff fbdf 	bl	8000c88 <HAL_GetTick>
 80014ca:	4602      	mov	r2, r0
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	1ad3      	subs	r3, r2, r3
 80014d0:	2b02      	cmp	r3, #2
 80014d2:	d901      	bls.n	80014d8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80014d4:	2303      	movs	r3, #3
 80014d6:	e2dd      	b.n	8001a94 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80014d8:	4b20      	ldr	r3, [pc, #128]	; (800155c <HAL_RCC_OscConfig+0x270>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f003 0302 	and.w	r3, r3, #2
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d1f0      	bne.n	80014c6 <HAL_RCC_OscConfig+0x1da>
 80014e4:	e000      	b.n	80014e8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80014e6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f003 0301 	and.w	r3, r3, #1
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d074      	beq.n	80015de <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80014f4:	69bb      	ldr	r3, [r7, #24]
 80014f6:	2b08      	cmp	r3, #8
 80014f8:	d005      	beq.n	8001506 <HAL_RCC_OscConfig+0x21a>
 80014fa:	69bb      	ldr	r3, [r7, #24]
 80014fc:	2b0c      	cmp	r3, #12
 80014fe:	d10e      	bne.n	800151e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	2b03      	cmp	r3, #3
 8001504:	d10b      	bne.n	800151e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001506:	4b15      	ldr	r3, [pc, #84]	; (800155c <HAL_RCC_OscConfig+0x270>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800150e:	2b00      	cmp	r3, #0
 8001510:	d064      	beq.n	80015dc <HAL_RCC_OscConfig+0x2f0>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d160      	bne.n	80015dc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	e2ba      	b.n	8001a94 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001526:	d106      	bne.n	8001536 <HAL_RCC_OscConfig+0x24a>
 8001528:	4b0c      	ldr	r3, [pc, #48]	; (800155c <HAL_RCC_OscConfig+0x270>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a0b      	ldr	r2, [pc, #44]	; (800155c <HAL_RCC_OscConfig+0x270>)
 800152e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001532:	6013      	str	r3, [r2, #0]
 8001534:	e026      	b.n	8001584 <HAL_RCC_OscConfig+0x298>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800153e:	d115      	bne.n	800156c <HAL_RCC_OscConfig+0x280>
 8001540:	4b06      	ldr	r3, [pc, #24]	; (800155c <HAL_RCC_OscConfig+0x270>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a05      	ldr	r2, [pc, #20]	; (800155c <HAL_RCC_OscConfig+0x270>)
 8001546:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800154a:	6013      	str	r3, [r2, #0]
 800154c:	4b03      	ldr	r3, [pc, #12]	; (800155c <HAL_RCC_OscConfig+0x270>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a02      	ldr	r2, [pc, #8]	; (800155c <HAL_RCC_OscConfig+0x270>)
 8001552:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001556:	6013      	str	r3, [r2, #0]
 8001558:	e014      	b.n	8001584 <HAL_RCC_OscConfig+0x298>
 800155a:	bf00      	nop
 800155c:	40021000 	.word	0x40021000
 8001560:	080046a4 	.word	0x080046a4
 8001564:	20000000 	.word	0x20000000
 8001568:	20000004 	.word	0x20000004
 800156c:	4ba0      	ldr	r3, [pc, #640]	; (80017f0 <HAL_RCC_OscConfig+0x504>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a9f      	ldr	r2, [pc, #636]	; (80017f0 <HAL_RCC_OscConfig+0x504>)
 8001572:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001576:	6013      	str	r3, [r2, #0]
 8001578:	4b9d      	ldr	r3, [pc, #628]	; (80017f0 <HAL_RCC_OscConfig+0x504>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a9c      	ldr	r2, [pc, #624]	; (80017f0 <HAL_RCC_OscConfig+0x504>)
 800157e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001582:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d013      	beq.n	80015b4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800158c:	f7ff fb7c 	bl	8000c88 <HAL_GetTick>
 8001590:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001592:	e008      	b.n	80015a6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001594:	f7ff fb78 	bl	8000c88 <HAL_GetTick>
 8001598:	4602      	mov	r2, r0
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	2b64      	cmp	r3, #100	; 0x64
 80015a0:	d901      	bls.n	80015a6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80015a2:	2303      	movs	r3, #3
 80015a4:	e276      	b.n	8001a94 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015a6:	4b92      	ldr	r3, [pc, #584]	; (80017f0 <HAL_RCC_OscConfig+0x504>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d0f0      	beq.n	8001594 <HAL_RCC_OscConfig+0x2a8>
 80015b2:	e014      	b.n	80015de <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015b4:	f7ff fb68 	bl	8000c88 <HAL_GetTick>
 80015b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015ba:	e008      	b.n	80015ce <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015bc:	f7ff fb64 	bl	8000c88 <HAL_GetTick>
 80015c0:	4602      	mov	r2, r0
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	2b64      	cmp	r3, #100	; 0x64
 80015c8:	d901      	bls.n	80015ce <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80015ca:	2303      	movs	r3, #3
 80015cc:	e262      	b.n	8001a94 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015ce:	4b88      	ldr	r3, [pc, #544]	; (80017f0 <HAL_RCC_OscConfig+0x504>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d1f0      	bne.n	80015bc <HAL_RCC_OscConfig+0x2d0>
 80015da:	e000      	b.n	80015de <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f003 0302 	and.w	r3, r3, #2
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d060      	beq.n	80016ac <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80015ea:	69bb      	ldr	r3, [r7, #24]
 80015ec:	2b04      	cmp	r3, #4
 80015ee:	d005      	beq.n	80015fc <HAL_RCC_OscConfig+0x310>
 80015f0:	69bb      	ldr	r3, [r7, #24]
 80015f2:	2b0c      	cmp	r3, #12
 80015f4:	d119      	bne.n	800162a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	2b02      	cmp	r3, #2
 80015fa:	d116      	bne.n	800162a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015fc:	4b7c      	ldr	r3, [pc, #496]	; (80017f0 <HAL_RCC_OscConfig+0x504>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001604:	2b00      	cmp	r3, #0
 8001606:	d005      	beq.n	8001614 <HAL_RCC_OscConfig+0x328>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d101      	bne.n	8001614 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001610:	2301      	movs	r3, #1
 8001612:	e23f      	b.n	8001a94 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001614:	4b76      	ldr	r3, [pc, #472]	; (80017f0 <HAL_RCC_OscConfig+0x504>)
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	691b      	ldr	r3, [r3, #16]
 8001620:	061b      	lsls	r3, r3, #24
 8001622:	4973      	ldr	r1, [pc, #460]	; (80017f0 <HAL_RCC_OscConfig+0x504>)
 8001624:	4313      	orrs	r3, r2
 8001626:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001628:	e040      	b.n	80016ac <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	68db      	ldr	r3, [r3, #12]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d023      	beq.n	800167a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001632:	4b6f      	ldr	r3, [pc, #444]	; (80017f0 <HAL_RCC_OscConfig+0x504>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a6e      	ldr	r2, [pc, #440]	; (80017f0 <HAL_RCC_OscConfig+0x504>)
 8001638:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800163c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800163e:	f7ff fb23 	bl	8000c88 <HAL_GetTick>
 8001642:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001644:	e008      	b.n	8001658 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001646:	f7ff fb1f 	bl	8000c88 <HAL_GetTick>
 800164a:	4602      	mov	r2, r0
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	1ad3      	subs	r3, r2, r3
 8001650:	2b02      	cmp	r3, #2
 8001652:	d901      	bls.n	8001658 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001654:	2303      	movs	r3, #3
 8001656:	e21d      	b.n	8001a94 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001658:	4b65      	ldr	r3, [pc, #404]	; (80017f0 <HAL_RCC_OscConfig+0x504>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001660:	2b00      	cmp	r3, #0
 8001662:	d0f0      	beq.n	8001646 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001664:	4b62      	ldr	r3, [pc, #392]	; (80017f0 <HAL_RCC_OscConfig+0x504>)
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	691b      	ldr	r3, [r3, #16]
 8001670:	061b      	lsls	r3, r3, #24
 8001672:	495f      	ldr	r1, [pc, #380]	; (80017f0 <HAL_RCC_OscConfig+0x504>)
 8001674:	4313      	orrs	r3, r2
 8001676:	604b      	str	r3, [r1, #4]
 8001678:	e018      	b.n	80016ac <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800167a:	4b5d      	ldr	r3, [pc, #372]	; (80017f0 <HAL_RCC_OscConfig+0x504>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a5c      	ldr	r2, [pc, #368]	; (80017f0 <HAL_RCC_OscConfig+0x504>)
 8001680:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001684:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001686:	f7ff faff 	bl	8000c88 <HAL_GetTick>
 800168a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800168c:	e008      	b.n	80016a0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800168e:	f7ff fafb 	bl	8000c88 <HAL_GetTick>
 8001692:	4602      	mov	r2, r0
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	1ad3      	subs	r3, r2, r3
 8001698:	2b02      	cmp	r3, #2
 800169a:	d901      	bls.n	80016a0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800169c:	2303      	movs	r3, #3
 800169e:	e1f9      	b.n	8001a94 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016a0:	4b53      	ldr	r3, [pc, #332]	; (80017f0 <HAL_RCC_OscConfig+0x504>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d1f0      	bne.n	800168e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f003 0308 	and.w	r3, r3, #8
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d03c      	beq.n	8001732 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	695b      	ldr	r3, [r3, #20]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d01c      	beq.n	80016fa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016c0:	4b4b      	ldr	r3, [pc, #300]	; (80017f0 <HAL_RCC_OscConfig+0x504>)
 80016c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016c6:	4a4a      	ldr	r2, [pc, #296]	; (80017f0 <HAL_RCC_OscConfig+0x504>)
 80016c8:	f043 0301 	orr.w	r3, r3, #1
 80016cc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016d0:	f7ff fada 	bl	8000c88 <HAL_GetTick>
 80016d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016d6:	e008      	b.n	80016ea <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016d8:	f7ff fad6 	bl	8000c88 <HAL_GetTick>
 80016dc:	4602      	mov	r2, r0
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	d901      	bls.n	80016ea <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80016e6:	2303      	movs	r3, #3
 80016e8:	e1d4      	b.n	8001a94 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016ea:	4b41      	ldr	r3, [pc, #260]	; (80017f0 <HAL_RCC_OscConfig+0x504>)
 80016ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016f0:	f003 0302 	and.w	r3, r3, #2
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d0ef      	beq.n	80016d8 <HAL_RCC_OscConfig+0x3ec>
 80016f8:	e01b      	b.n	8001732 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016fa:	4b3d      	ldr	r3, [pc, #244]	; (80017f0 <HAL_RCC_OscConfig+0x504>)
 80016fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001700:	4a3b      	ldr	r2, [pc, #236]	; (80017f0 <HAL_RCC_OscConfig+0x504>)
 8001702:	f023 0301 	bic.w	r3, r3, #1
 8001706:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800170a:	f7ff fabd 	bl	8000c88 <HAL_GetTick>
 800170e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001710:	e008      	b.n	8001724 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001712:	f7ff fab9 	bl	8000c88 <HAL_GetTick>
 8001716:	4602      	mov	r2, r0
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	1ad3      	subs	r3, r2, r3
 800171c:	2b02      	cmp	r3, #2
 800171e:	d901      	bls.n	8001724 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001720:	2303      	movs	r3, #3
 8001722:	e1b7      	b.n	8001a94 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001724:	4b32      	ldr	r3, [pc, #200]	; (80017f0 <HAL_RCC_OscConfig+0x504>)
 8001726:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800172a:	f003 0302 	and.w	r3, r3, #2
 800172e:	2b00      	cmp	r3, #0
 8001730:	d1ef      	bne.n	8001712 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 0304 	and.w	r3, r3, #4
 800173a:	2b00      	cmp	r3, #0
 800173c:	f000 80a6 	beq.w	800188c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001740:	2300      	movs	r3, #0
 8001742:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001744:	4b2a      	ldr	r3, [pc, #168]	; (80017f0 <HAL_RCC_OscConfig+0x504>)
 8001746:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001748:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800174c:	2b00      	cmp	r3, #0
 800174e:	d10d      	bne.n	800176c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001750:	4b27      	ldr	r3, [pc, #156]	; (80017f0 <HAL_RCC_OscConfig+0x504>)
 8001752:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001754:	4a26      	ldr	r2, [pc, #152]	; (80017f0 <HAL_RCC_OscConfig+0x504>)
 8001756:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800175a:	6593      	str	r3, [r2, #88]	; 0x58
 800175c:	4b24      	ldr	r3, [pc, #144]	; (80017f0 <HAL_RCC_OscConfig+0x504>)
 800175e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001760:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001764:	60bb      	str	r3, [r7, #8]
 8001766:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001768:	2301      	movs	r3, #1
 800176a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800176c:	4b21      	ldr	r3, [pc, #132]	; (80017f4 <HAL_RCC_OscConfig+0x508>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001774:	2b00      	cmp	r3, #0
 8001776:	d118      	bne.n	80017aa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001778:	4b1e      	ldr	r3, [pc, #120]	; (80017f4 <HAL_RCC_OscConfig+0x508>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a1d      	ldr	r2, [pc, #116]	; (80017f4 <HAL_RCC_OscConfig+0x508>)
 800177e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001782:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001784:	f7ff fa80 	bl	8000c88 <HAL_GetTick>
 8001788:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800178a:	e008      	b.n	800179e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800178c:	f7ff fa7c 	bl	8000c88 <HAL_GetTick>
 8001790:	4602      	mov	r2, r0
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	2b02      	cmp	r3, #2
 8001798:	d901      	bls.n	800179e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800179a:	2303      	movs	r3, #3
 800179c:	e17a      	b.n	8001a94 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800179e:	4b15      	ldr	r3, [pc, #84]	; (80017f4 <HAL_RCC_OscConfig+0x508>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d0f0      	beq.n	800178c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	2b01      	cmp	r3, #1
 80017b0:	d108      	bne.n	80017c4 <HAL_RCC_OscConfig+0x4d8>
 80017b2:	4b0f      	ldr	r3, [pc, #60]	; (80017f0 <HAL_RCC_OscConfig+0x504>)
 80017b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017b8:	4a0d      	ldr	r2, [pc, #52]	; (80017f0 <HAL_RCC_OscConfig+0x504>)
 80017ba:	f043 0301 	orr.w	r3, r3, #1
 80017be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017c2:	e029      	b.n	8001818 <HAL_RCC_OscConfig+0x52c>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	2b05      	cmp	r3, #5
 80017ca:	d115      	bne.n	80017f8 <HAL_RCC_OscConfig+0x50c>
 80017cc:	4b08      	ldr	r3, [pc, #32]	; (80017f0 <HAL_RCC_OscConfig+0x504>)
 80017ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017d2:	4a07      	ldr	r2, [pc, #28]	; (80017f0 <HAL_RCC_OscConfig+0x504>)
 80017d4:	f043 0304 	orr.w	r3, r3, #4
 80017d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017dc:	4b04      	ldr	r3, [pc, #16]	; (80017f0 <HAL_RCC_OscConfig+0x504>)
 80017de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017e2:	4a03      	ldr	r2, [pc, #12]	; (80017f0 <HAL_RCC_OscConfig+0x504>)
 80017e4:	f043 0301 	orr.w	r3, r3, #1
 80017e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017ec:	e014      	b.n	8001818 <HAL_RCC_OscConfig+0x52c>
 80017ee:	bf00      	nop
 80017f0:	40021000 	.word	0x40021000
 80017f4:	40007000 	.word	0x40007000
 80017f8:	4b9c      	ldr	r3, [pc, #624]	; (8001a6c <HAL_RCC_OscConfig+0x780>)
 80017fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017fe:	4a9b      	ldr	r2, [pc, #620]	; (8001a6c <HAL_RCC_OscConfig+0x780>)
 8001800:	f023 0301 	bic.w	r3, r3, #1
 8001804:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001808:	4b98      	ldr	r3, [pc, #608]	; (8001a6c <HAL_RCC_OscConfig+0x780>)
 800180a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800180e:	4a97      	ldr	r2, [pc, #604]	; (8001a6c <HAL_RCC_OscConfig+0x780>)
 8001810:	f023 0304 	bic.w	r3, r3, #4
 8001814:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d016      	beq.n	800184e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001820:	f7ff fa32 	bl	8000c88 <HAL_GetTick>
 8001824:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001826:	e00a      	b.n	800183e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001828:	f7ff fa2e 	bl	8000c88 <HAL_GetTick>
 800182c:	4602      	mov	r2, r0
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	f241 3288 	movw	r2, #5000	; 0x1388
 8001836:	4293      	cmp	r3, r2
 8001838:	d901      	bls.n	800183e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800183a:	2303      	movs	r3, #3
 800183c:	e12a      	b.n	8001a94 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800183e:	4b8b      	ldr	r3, [pc, #556]	; (8001a6c <HAL_RCC_OscConfig+0x780>)
 8001840:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001844:	f003 0302 	and.w	r3, r3, #2
 8001848:	2b00      	cmp	r3, #0
 800184a:	d0ed      	beq.n	8001828 <HAL_RCC_OscConfig+0x53c>
 800184c:	e015      	b.n	800187a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800184e:	f7ff fa1b 	bl	8000c88 <HAL_GetTick>
 8001852:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001854:	e00a      	b.n	800186c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001856:	f7ff fa17 	bl	8000c88 <HAL_GetTick>
 800185a:	4602      	mov	r2, r0
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	1ad3      	subs	r3, r2, r3
 8001860:	f241 3288 	movw	r2, #5000	; 0x1388
 8001864:	4293      	cmp	r3, r2
 8001866:	d901      	bls.n	800186c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001868:	2303      	movs	r3, #3
 800186a:	e113      	b.n	8001a94 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800186c:	4b7f      	ldr	r3, [pc, #508]	; (8001a6c <HAL_RCC_OscConfig+0x780>)
 800186e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001872:	f003 0302 	and.w	r3, r3, #2
 8001876:	2b00      	cmp	r3, #0
 8001878:	d1ed      	bne.n	8001856 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800187a:	7ffb      	ldrb	r3, [r7, #31]
 800187c:	2b01      	cmp	r3, #1
 800187e:	d105      	bne.n	800188c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001880:	4b7a      	ldr	r3, [pc, #488]	; (8001a6c <HAL_RCC_OscConfig+0x780>)
 8001882:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001884:	4a79      	ldr	r2, [pc, #484]	; (8001a6c <HAL_RCC_OscConfig+0x780>)
 8001886:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800188a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001890:	2b00      	cmp	r3, #0
 8001892:	f000 80fe 	beq.w	8001a92 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800189a:	2b02      	cmp	r3, #2
 800189c:	f040 80d0 	bne.w	8001a40 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80018a0:	4b72      	ldr	r3, [pc, #456]	; (8001a6c <HAL_RCC_OscConfig+0x780>)
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	f003 0203 	and.w	r2, r3, #3
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d130      	bne.n	8001916 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018be:	3b01      	subs	r3, #1
 80018c0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018c2:	429a      	cmp	r2, r3
 80018c4:	d127      	bne.n	8001916 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018d0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018d2:	429a      	cmp	r2, r3
 80018d4:	d11f      	bne.n	8001916 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018dc:	687a      	ldr	r2, [r7, #4]
 80018de:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80018e0:	2a07      	cmp	r2, #7
 80018e2:	bf14      	ite	ne
 80018e4:	2201      	movne	r2, #1
 80018e6:	2200      	moveq	r2, #0
 80018e8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d113      	bne.n	8001916 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018f8:	085b      	lsrs	r3, r3, #1
 80018fa:	3b01      	subs	r3, #1
 80018fc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80018fe:	429a      	cmp	r2, r3
 8001900:	d109      	bne.n	8001916 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190c:	085b      	lsrs	r3, r3, #1
 800190e:	3b01      	subs	r3, #1
 8001910:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001912:	429a      	cmp	r2, r3
 8001914:	d06e      	beq.n	80019f4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001916:	69bb      	ldr	r3, [r7, #24]
 8001918:	2b0c      	cmp	r3, #12
 800191a:	d069      	beq.n	80019f0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800191c:	4b53      	ldr	r3, [pc, #332]	; (8001a6c <HAL_RCC_OscConfig+0x780>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001924:	2b00      	cmp	r3, #0
 8001926:	d105      	bne.n	8001934 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001928:	4b50      	ldr	r3, [pc, #320]	; (8001a6c <HAL_RCC_OscConfig+0x780>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	e0ad      	b.n	8001a94 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001938:	4b4c      	ldr	r3, [pc, #304]	; (8001a6c <HAL_RCC_OscConfig+0x780>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a4b      	ldr	r2, [pc, #300]	; (8001a6c <HAL_RCC_OscConfig+0x780>)
 800193e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001942:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001944:	f7ff f9a0 	bl	8000c88 <HAL_GetTick>
 8001948:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800194a:	e008      	b.n	800195e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800194c:	f7ff f99c 	bl	8000c88 <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	2b02      	cmp	r3, #2
 8001958:	d901      	bls.n	800195e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e09a      	b.n	8001a94 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800195e:	4b43      	ldr	r3, [pc, #268]	; (8001a6c <HAL_RCC_OscConfig+0x780>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d1f0      	bne.n	800194c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800196a:	4b40      	ldr	r3, [pc, #256]	; (8001a6c <HAL_RCC_OscConfig+0x780>)
 800196c:	68da      	ldr	r2, [r3, #12]
 800196e:	4b40      	ldr	r3, [pc, #256]	; (8001a70 <HAL_RCC_OscConfig+0x784>)
 8001970:	4013      	ands	r3, r2
 8001972:	687a      	ldr	r2, [r7, #4]
 8001974:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001976:	687a      	ldr	r2, [r7, #4]
 8001978:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800197a:	3a01      	subs	r2, #1
 800197c:	0112      	lsls	r2, r2, #4
 800197e:	4311      	orrs	r1, r2
 8001980:	687a      	ldr	r2, [r7, #4]
 8001982:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001984:	0212      	lsls	r2, r2, #8
 8001986:	4311      	orrs	r1, r2
 8001988:	687a      	ldr	r2, [r7, #4]
 800198a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800198c:	0852      	lsrs	r2, r2, #1
 800198e:	3a01      	subs	r2, #1
 8001990:	0552      	lsls	r2, r2, #21
 8001992:	4311      	orrs	r1, r2
 8001994:	687a      	ldr	r2, [r7, #4]
 8001996:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001998:	0852      	lsrs	r2, r2, #1
 800199a:	3a01      	subs	r2, #1
 800199c:	0652      	lsls	r2, r2, #25
 800199e:	4311      	orrs	r1, r2
 80019a0:	687a      	ldr	r2, [r7, #4]
 80019a2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80019a4:	0912      	lsrs	r2, r2, #4
 80019a6:	0452      	lsls	r2, r2, #17
 80019a8:	430a      	orrs	r2, r1
 80019aa:	4930      	ldr	r1, [pc, #192]	; (8001a6c <HAL_RCC_OscConfig+0x780>)
 80019ac:	4313      	orrs	r3, r2
 80019ae:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80019b0:	4b2e      	ldr	r3, [pc, #184]	; (8001a6c <HAL_RCC_OscConfig+0x780>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a2d      	ldr	r2, [pc, #180]	; (8001a6c <HAL_RCC_OscConfig+0x780>)
 80019b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019ba:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80019bc:	4b2b      	ldr	r3, [pc, #172]	; (8001a6c <HAL_RCC_OscConfig+0x780>)
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	4a2a      	ldr	r2, [pc, #168]	; (8001a6c <HAL_RCC_OscConfig+0x780>)
 80019c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019c6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80019c8:	f7ff f95e 	bl	8000c88 <HAL_GetTick>
 80019cc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019ce:	e008      	b.n	80019e2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019d0:	f7ff f95a 	bl	8000c88 <HAL_GetTick>
 80019d4:	4602      	mov	r2, r0
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	2b02      	cmp	r3, #2
 80019dc:	d901      	bls.n	80019e2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80019de:	2303      	movs	r3, #3
 80019e0:	e058      	b.n	8001a94 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019e2:	4b22      	ldr	r3, [pc, #136]	; (8001a6c <HAL_RCC_OscConfig+0x780>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d0f0      	beq.n	80019d0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019ee:	e050      	b.n	8001a92 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80019f0:	2301      	movs	r3, #1
 80019f2:	e04f      	b.n	8001a94 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019f4:	4b1d      	ldr	r3, [pc, #116]	; (8001a6c <HAL_RCC_OscConfig+0x780>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d148      	bne.n	8001a92 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001a00:	4b1a      	ldr	r3, [pc, #104]	; (8001a6c <HAL_RCC_OscConfig+0x780>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a19      	ldr	r2, [pc, #100]	; (8001a6c <HAL_RCC_OscConfig+0x780>)
 8001a06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a0a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a0c:	4b17      	ldr	r3, [pc, #92]	; (8001a6c <HAL_RCC_OscConfig+0x780>)
 8001a0e:	68db      	ldr	r3, [r3, #12]
 8001a10:	4a16      	ldr	r2, [pc, #88]	; (8001a6c <HAL_RCC_OscConfig+0x780>)
 8001a12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a16:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001a18:	f7ff f936 	bl	8000c88 <HAL_GetTick>
 8001a1c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a1e:	e008      	b.n	8001a32 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a20:	f7ff f932 	bl	8000c88 <HAL_GetTick>
 8001a24:	4602      	mov	r2, r0
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	2b02      	cmp	r3, #2
 8001a2c:	d901      	bls.n	8001a32 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	e030      	b.n	8001a94 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a32:	4b0e      	ldr	r3, [pc, #56]	; (8001a6c <HAL_RCC_OscConfig+0x780>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d0f0      	beq.n	8001a20 <HAL_RCC_OscConfig+0x734>
 8001a3e:	e028      	b.n	8001a92 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a40:	69bb      	ldr	r3, [r7, #24]
 8001a42:	2b0c      	cmp	r3, #12
 8001a44:	d023      	beq.n	8001a8e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a46:	4b09      	ldr	r3, [pc, #36]	; (8001a6c <HAL_RCC_OscConfig+0x780>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a08      	ldr	r2, [pc, #32]	; (8001a6c <HAL_RCC_OscConfig+0x780>)
 8001a4c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a52:	f7ff f919 	bl	8000c88 <HAL_GetTick>
 8001a56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a58:	e00c      	b.n	8001a74 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a5a:	f7ff f915 	bl	8000c88 <HAL_GetTick>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	1ad3      	subs	r3, r2, r3
 8001a64:	2b02      	cmp	r3, #2
 8001a66:	d905      	bls.n	8001a74 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001a68:	2303      	movs	r3, #3
 8001a6a:	e013      	b.n	8001a94 <HAL_RCC_OscConfig+0x7a8>
 8001a6c:	40021000 	.word	0x40021000
 8001a70:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a74:	4b09      	ldr	r3, [pc, #36]	; (8001a9c <HAL_RCC_OscConfig+0x7b0>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d1ec      	bne.n	8001a5a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001a80:	4b06      	ldr	r3, [pc, #24]	; (8001a9c <HAL_RCC_OscConfig+0x7b0>)
 8001a82:	68da      	ldr	r2, [r3, #12]
 8001a84:	4905      	ldr	r1, [pc, #20]	; (8001a9c <HAL_RCC_OscConfig+0x7b0>)
 8001a86:	4b06      	ldr	r3, [pc, #24]	; (8001aa0 <HAL_RCC_OscConfig+0x7b4>)
 8001a88:	4013      	ands	r3, r2
 8001a8a:	60cb      	str	r3, [r1, #12]
 8001a8c:	e001      	b.n	8001a92 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e000      	b.n	8001a94 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001a92:	2300      	movs	r3, #0
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3720      	adds	r7, #32
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	40021000 	.word	0x40021000
 8001aa0:	feeefffc 	.word	0xfeeefffc

08001aa4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b084      	sub	sp, #16
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
 8001aac:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d101      	bne.n	8001ab8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	e0e7      	b.n	8001c88 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ab8:	4b75      	ldr	r3, [pc, #468]	; (8001c90 <HAL_RCC_ClockConfig+0x1ec>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 0307 	and.w	r3, r3, #7
 8001ac0:	683a      	ldr	r2, [r7, #0]
 8001ac2:	429a      	cmp	r2, r3
 8001ac4:	d910      	bls.n	8001ae8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ac6:	4b72      	ldr	r3, [pc, #456]	; (8001c90 <HAL_RCC_ClockConfig+0x1ec>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f023 0207 	bic.w	r2, r3, #7
 8001ace:	4970      	ldr	r1, [pc, #448]	; (8001c90 <HAL_RCC_ClockConfig+0x1ec>)
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ad6:	4b6e      	ldr	r3, [pc, #440]	; (8001c90 <HAL_RCC_ClockConfig+0x1ec>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 0307 	and.w	r3, r3, #7
 8001ade:	683a      	ldr	r2, [r7, #0]
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d001      	beq.n	8001ae8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	e0cf      	b.n	8001c88 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f003 0302 	and.w	r3, r3, #2
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d010      	beq.n	8001b16 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	689a      	ldr	r2, [r3, #8]
 8001af8:	4b66      	ldr	r3, [pc, #408]	; (8001c94 <HAL_RCC_ClockConfig+0x1f0>)
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d908      	bls.n	8001b16 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b04:	4b63      	ldr	r3, [pc, #396]	; (8001c94 <HAL_RCC_ClockConfig+0x1f0>)
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	4960      	ldr	r1, [pc, #384]	; (8001c94 <HAL_RCC_ClockConfig+0x1f0>)
 8001b12:	4313      	orrs	r3, r2
 8001b14:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 0301 	and.w	r3, r3, #1
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d04c      	beq.n	8001bbc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	2b03      	cmp	r3, #3
 8001b28:	d107      	bne.n	8001b3a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b2a:	4b5a      	ldr	r3, [pc, #360]	; (8001c94 <HAL_RCC_ClockConfig+0x1f0>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d121      	bne.n	8001b7a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e0a6      	b.n	8001c88 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	2b02      	cmp	r3, #2
 8001b40:	d107      	bne.n	8001b52 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b42:	4b54      	ldr	r3, [pc, #336]	; (8001c94 <HAL_RCC_ClockConfig+0x1f0>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d115      	bne.n	8001b7a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e09a      	b.n	8001c88 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d107      	bne.n	8001b6a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b5a:	4b4e      	ldr	r3, [pc, #312]	; (8001c94 <HAL_RCC_ClockConfig+0x1f0>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 0302 	and.w	r3, r3, #2
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d109      	bne.n	8001b7a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e08e      	b.n	8001c88 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b6a:	4b4a      	ldr	r3, [pc, #296]	; (8001c94 <HAL_RCC_ClockConfig+0x1f0>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d101      	bne.n	8001b7a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e086      	b.n	8001c88 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b7a:	4b46      	ldr	r3, [pc, #280]	; (8001c94 <HAL_RCC_ClockConfig+0x1f0>)
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	f023 0203 	bic.w	r2, r3, #3
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	4943      	ldr	r1, [pc, #268]	; (8001c94 <HAL_RCC_ClockConfig+0x1f0>)
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b8c:	f7ff f87c 	bl	8000c88 <HAL_GetTick>
 8001b90:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b92:	e00a      	b.n	8001baa <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b94:	f7ff f878 	bl	8000c88 <HAL_GetTick>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d901      	bls.n	8001baa <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	e06e      	b.n	8001c88 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001baa:	4b3a      	ldr	r3, [pc, #232]	; (8001c94 <HAL_RCC_ClockConfig+0x1f0>)
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	f003 020c 	and.w	r2, r3, #12
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d1eb      	bne.n	8001b94 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 0302 	and.w	r3, r3, #2
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d010      	beq.n	8001bea <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	689a      	ldr	r2, [r3, #8]
 8001bcc:	4b31      	ldr	r3, [pc, #196]	; (8001c94 <HAL_RCC_ClockConfig+0x1f0>)
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d208      	bcs.n	8001bea <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bd8:	4b2e      	ldr	r3, [pc, #184]	; (8001c94 <HAL_RCC_ClockConfig+0x1f0>)
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	492b      	ldr	r1, [pc, #172]	; (8001c94 <HAL_RCC_ClockConfig+0x1f0>)
 8001be6:	4313      	orrs	r3, r2
 8001be8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bea:	4b29      	ldr	r3, [pc, #164]	; (8001c90 <HAL_RCC_ClockConfig+0x1ec>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 0307 	and.w	r3, r3, #7
 8001bf2:	683a      	ldr	r2, [r7, #0]
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d210      	bcs.n	8001c1a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bf8:	4b25      	ldr	r3, [pc, #148]	; (8001c90 <HAL_RCC_ClockConfig+0x1ec>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f023 0207 	bic.w	r2, r3, #7
 8001c00:	4923      	ldr	r1, [pc, #140]	; (8001c90 <HAL_RCC_ClockConfig+0x1ec>)
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	4313      	orrs	r3, r2
 8001c06:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c08:	4b21      	ldr	r3, [pc, #132]	; (8001c90 <HAL_RCC_ClockConfig+0x1ec>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 0307 	and.w	r3, r3, #7
 8001c10:	683a      	ldr	r2, [r7, #0]
 8001c12:	429a      	cmp	r2, r3
 8001c14:	d001      	beq.n	8001c1a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e036      	b.n	8001c88 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0304 	and.w	r3, r3, #4
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d008      	beq.n	8001c38 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c26:	4b1b      	ldr	r3, [pc, #108]	; (8001c94 <HAL_RCC_ClockConfig+0x1f0>)
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	68db      	ldr	r3, [r3, #12]
 8001c32:	4918      	ldr	r1, [pc, #96]	; (8001c94 <HAL_RCC_ClockConfig+0x1f0>)
 8001c34:	4313      	orrs	r3, r2
 8001c36:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f003 0308 	and.w	r3, r3, #8
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d009      	beq.n	8001c58 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c44:	4b13      	ldr	r3, [pc, #76]	; (8001c94 <HAL_RCC_ClockConfig+0x1f0>)
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	691b      	ldr	r3, [r3, #16]
 8001c50:	00db      	lsls	r3, r3, #3
 8001c52:	4910      	ldr	r1, [pc, #64]	; (8001c94 <HAL_RCC_ClockConfig+0x1f0>)
 8001c54:	4313      	orrs	r3, r2
 8001c56:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c58:	f000 f824 	bl	8001ca4 <HAL_RCC_GetSysClockFreq>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	4b0d      	ldr	r3, [pc, #52]	; (8001c94 <HAL_RCC_ClockConfig+0x1f0>)
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	091b      	lsrs	r3, r3, #4
 8001c64:	f003 030f 	and.w	r3, r3, #15
 8001c68:	490b      	ldr	r1, [pc, #44]	; (8001c98 <HAL_RCC_ClockConfig+0x1f4>)
 8001c6a:	5ccb      	ldrb	r3, [r1, r3]
 8001c6c:	f003 031f 	and.w	r3, r3, #31
 8001c70:	fa22 f303 	lsr.w	r3, r2, r3
 8001c74:	4a09      	ldr	r2, [pc, #36]	; (8001c9c <HAL_RCC_ClockConfig+0x1f8>)
 8001c76:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001c78:	4b09      	ldr	r3, [pc, #36]	; (8001ca0 <HAL_RCC_ClockConfig+0x1fc>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f7fe ffb3 	bl	8000be8 <HAL_InitTick>
 8001c82:	4603      	mov	r3, r0
 8001c84:	72fb      	strb	r3, [r7, #11]

  return status;
 8001c86:	7afb      	ldrb	r3, [r7, #11]
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3710      	adds	r7, #16
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	40022000 	.word	0x40022000
 8001c94:	40021000 	.word	0x40021000
 8001c98:	080046a4 	.word	0x080046a4
 8001c9c:	20000000 	.word	0x20000000
 8001ca0:	20000004 	.word	0x20000004

08001ca4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b089      	sub	sp, #36	; 0x24
 8001ca8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001caa:	2300      	movs	r3, #0
 8001cac:	61fb      	str	r3, [r7, #28]
 8001cae:	2300      	movs	r3, #0
 8001cb0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cb2:	4b3e      	ldr	r3, [pc, #248]	; (8001dac <HAL_RCC_GetSysClockFreq+0x108>)
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	f003 030c 	and.w	r3, r3, #12
 8001cba:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001cbc:	4b3b      	ldr	r3, [pc, #236]	; (8001dac <HAL_RCC_GetSysClockFreq+0x108>)
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	f003 0303 	and.w	r3, r3, #3
 8001cc4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d005      	beq.n	8001cd8 <HAL_RCC_GetSysClockFreq+0x34>
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	2b0c      	cmp	r3, #12
 8001cd0:	d121      	bne.n	8001d16 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d11e      	bne.n	8001d16 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001cd8:	4b34      	ldr	r3, [pc, #208]	; (8001dac <HAL_RCC_GetSysClockFreq+0x108>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 0308 	and.w	r3, r3, #8
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d107      	bne.n	8001cf4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001ce4:	4b31      	ldr	r3, [pc, #196]	; (8001dac <HAL_RCC_GetSysClockFreq+0x108>)
 8001ce6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cea:	0a1b      	lsrs	r3, r3, #8
 8001cec:	f003 030f 	and.w	r3, r3, #15
 8001cf0:	61fb      	str	r3, [r7, #28]
 8001cf2:	e005      	b.n	8001d00 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001cf4:	4b2d      	ldr	r3, [pc, #180]	; (8001dac <HAL_RCC_GetSysClockFreq+0x108>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	091b      	lsrs	r3, r3, #4
 8001cfa:	f003 030f 	and.w	r3, r3, #15
 8001cfe:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001d00:	4a2b      	ldr	r2, [pc, #172]	; (8001db0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d08:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d10d      	bne.n	8001d2c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d14:	e00a      	b.n	8001d2c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	2b04      	cmp	r3, #4
 8001d1a:	d102      	bne.n	8001d22 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001d1c:	4b25      	ldr	r3, [pc, #148]	; (8001db4 <HAL_RCC_GetSysClockFreq+0x110>)
 8001d1e:	61bb      	str	r3, [r7, #24]
 8001d20:	e004      	b.n	8001d2c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	2b08      	cmp	r3, #8
 8001d26:	d101      	bne.n	8001d2c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001d28:	4b23      	ldr	r3, [pc, #140]	; (8001db8 <HAL_RCC_GetSysClockFreq+0x114>)
 8001d2a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	2b0c      	cmp	r3, #12
 8001d30:	d134      	bne.n	8001d9c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d32:	4b1e      	ldr	r3, [pc, #120]	; (8001dac <HAL_RCC_GetSysClockFreq+0x108>)
 8001d34:	68db      	ldr	r3, [r3, #12]
 8001d36:	f003 0303 	and.w	r3, r3, #3
 8001d3a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	2b02      	cmp	r3, #2
 8001d40:	d003      	beq.n	8001d4a <HAL_RCC_GetSysClockFreq+0xa6>
 8001d42:	68bb      	ldr	r3, [r7, #8]
 8001d44:	2b03      	cmp	r3, #3
 8001d46:	d003      	beq.n	8001d50 <HAL_RCC_GetSysClockFreq+0xac>
 8001d48:	e005      	b.n	8001d56 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001d4a:	4b1a      	ldr	r3, [pc, #104]	; (8001db4 <HAL_RCC_GetSysClockFreq+0x110>)
 8001d4c:	617b      	str	r3, [r7, #20]
      break;
 8001d4e:	e005      	b.n	8001d5c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001d50:	4b19      	ldr	r3, [pc, #100]	; (8001db8 <HAL_RCC_GetSysClockFreq+0x114>)
 8001d52:	617b      	str	r3, [r7, #20]
      break;
 8001d54:	e002      	b.n	8001d5c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	617b      	str	r3, [r7, #20]
      break;
 8001d5a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d5c:	4b13      	ldr	r3, [pc, #76]	; (8001dac <HAL_RCC_GetSysClockFreq+0x108>)
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	091b      	lsrs	r3, r3, #4
 8001d62:	f003 0307 	and.w	r3, r3, #7
 8001d66:	3301      	adds	r3, #1
 8001d68:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001d6a:	4b10      	ldr	r3, [pc, #64]	; (8001dac <HAL_RCC_GetSysClockFreq+0x108>)
 8001d6c:	68db      	ldr	r3, [r3, #12]
 8001d6e:	0a1b      	lsrs	r3, r3, #8
 8001d70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d74:	697a      	ldr	r2, [r7, #20]
 8001d76:	fb03 f202 	mul.w	r2, r3, r2
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d80:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d82:	4b0a      	ldr	r3, [pc, #40]	; (8001dac <HAL_RCC_GetSysClockFreq+0x108>)
 8001d84:	68db      	ldr	r3, [r3, #12]
 8001d86:	0e5b      	lsrs	r3, r3, #25
 8001d88:	f003 0303 	and.w	r3, r3, #3
 8001d8c:	3301      	adds	r3, #1
 8001d8e:	005b      	lsls	r3, r3, #1
 8001d90:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001d92:	697a      	ldr	r2, [r7, #20]
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d9a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001d9c:	69bb      	ldr	r3, [r7, #24]
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3724      	adds	r7, #36	; 0x24
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	40021000 	.word	0x40021000
 8001db0:	080046bc 	.word	0x080046bc
 8001db4:	00f42400 	.word	0x00f42400
 8001db8:	007a1200 	.word	0x007a1200

08001dbc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001dc0:	4b03      	ldr	r3, [pc, #12]	; (8001dd0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	20000000 	.word	0x20000000

08001dd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001dd8:	f7ff fff0 	bl	8001dbc <HAL_RCC_GetHCLKFreq>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	4b06      	ldr	r3, [pc, #24]	; (8001df8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	0a1b      	lsrs	r3, r3, #8
 8001de4:	f003 0307 	and.w	r3, r3, #7
 8001de8:	4904      	ldr	r1, [pc, #16]	; (8001dfc <HAL_RCC_GetPCLK1Freq+0x28>)
 8001dea:	5ccb      	ldrb	r3, [r1, r3]
 8001dec:	f003 031f 	and.w	r3, r3, #31
 8001df0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	40021000 	.word	0x40021000
 8001dfc:	080046b4 	.word	0x080046b4

08001e00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001e04:	f7ff ffda 	bl	8001dbc <HAL_RCC_GetHCLKFreq>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	4b06      	ldr	r3, [pc, #24]	; (8001e24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	0adb      	lsrs	r3, r3, #11
 8001e10:	f003 0307 	and.w	r3, r3, #7
 8001e14:	4904      	ldr	r1, [pc, #16]	; (8001e28 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001e16:	5ccb      	ldrb	r3, [r1, r3]
 8001e18:	f003 031f 	and.w	r3, r3, #31
 8001e1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	40021000 	.word	0x40021000
 8001e28:	080046b4 	.word	0x080046b4

08001e2c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b086      	sub	sp, #24
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001e34:	2300      	movs	r3, #0
 8001e36:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001e38:	4b2a      	ldr	r3, [pc, #168]	; (8001ee4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d003      	beq.n	8001e4c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001e44:	f7ff f9ee 	bl	8001224 <HAL_PWREx_GetVoltageRange>
 8001e48:	6178      	str	r0, [r7, #20]
 8001e4a:	e014      	b.n	8001e76 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e4c:	4b25      	ldr	r3, [pc, #148]	; (8001ee4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e50:	4a24      	ldr	r2, [pc, #144]	; (8001ee4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e56:	6593      	str	r3, [r2, #88]	; 0x58
 8001e58:	4b22      	ldr	r3, [pc, #136]	; (8001ee4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e60:	60fb      	str	r3, [r7, #12]
 8001e62:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001e64:	f7ff f9de 	bl	8001224 <HAL_PWREx_GetVoltageRange>
 8001e68:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001e6a:	4b1e      	ldr	r3, [pc, #120]	; (8001ee4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e6e:	4a1d      	ldr	r2, [pc, #116]	; (8001ee4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e74:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e7c:	d10b      	bne.n	8001e96 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2b80      	cmp	r3, #128	; 0x80
 8001e82:	d919      	bls.n	8001eb8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2ba0      	cmp	r3, #160	; 0xa0
 8001e88:	d902      	bls.n	8001e90 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e8a:	2302      	movs	r3, #2
 8001e8c:	613b      	str	r3, [r7, #16]
 8001e8e:	e013      	b.n	8001eb8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e90:	2301      	movs	r3, #1
 8001e92:	613b      	str	r3, [r7, #16]
 8001e94:	e010      	b.n	8001eb8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2b80      	cmp	r3, #128	; 0x80
 8001e9a:	d902      	bls.n	8001ea2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001e9c:	2303      	movs	r3, #3
 8001e9e:	613b      	str	r3, [r7, #16]
 8001ea0:	e00a      	b.n	8001eb8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2b80      	cmp	r3, #128	; 0x80
 8001ea6:	d102      	bne.n	8001eae <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001ea8:	2302      	movs	r3, #2
 8001eaa:	613b      	str	r3, [r7, #16]
 8001eac:	e004      	b.n	8001eb8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2b70      	cmp	r3, #112	; 0x70
 8001eb2:	d101      	bne.n	8001eb8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001eb8:	4b0b      	ldr	r3, [pc, #44]	; (8001ee8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f023 0207 	bic.w	r2, r3, #7
 8001ec0:	4909      	ldr	r1, [pc, #36]	; (8001ee8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001ec8:	4b07      	ldr	r3, [pc, #28]	; (8001ee8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 0307 	and.w	r3, r3, #7
 8001ed0:	693a      	ldr	r2, [r7, #16]
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	d001      	beq.n	8001eda <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e000      	b.n	8001edc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001eda:	2300      	movs	r3, #0
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3718      	adds	r7, #24
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	40021000 	.word	0x40021000
 8001ee8:	40022000 	.word	0x40022000

08001eec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b086      	sub	sp, #24
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001ef8:	2300      	movs	r3, #0
 8001efa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d041      	beq.n	8001f8c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f0c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001f10:	d02a      	beq.n	8001f68 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001f12:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001f16:	d824      	bhi.n	8001f62 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001f18:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001f1c:	d008      	beq.n	8001f30 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001f1e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001f22:	d81e      	bhi.n	8001f62 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d00a      	beq.n	8001f3e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001f28:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f2c:	d010      	beq.n	8001f50 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001f2e:	e018      	b.n	8001f62 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001f30:	4b86      	ldr	r3, [pc, #536]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	4a85      	ldr	r2, [pc, #532]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f3a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f3c:	e015      	b.n	8001f6a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	3304      	adds	r3, #4
 8001f42:	2100      	movs	r1, #0
 8001f44:	4618      	mov	r0, r3
 8001f46:	f000 fabb 	bl	80024c0 <RCCEx_PLLSAI1_Config>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f4e:	e00c      	b.n	8001f6a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	3320      	adds	r3, #32
 8001f54:	2100      	movs	r1, #0
 8001f56:	4618      	mov	r0, r3
 8001f58:	f000 fba6 	bl	80026a8 <RCCEx_PLLSAI2_Config>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f60:	e003      	b.n	8001f6a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	74fb      	strb	r3, [r7, #19]
      break;
 8001f66:	e000      	b.n	8001f6a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001f68:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001f6a:	7cfb      	ldrb	r3, [r7, #19]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d10b      	bne.n	8001f88 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001f70:	4b76      	ldr	r3, [pc, #472]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f76:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f7e:	4973      	ldr	r1, [pc, #460]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f80:	4313      	orrs	r3, r2
 8001f82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001f86:	e001      	b.n	8001f8c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f88:	7cfb      	ldrb	r3, [r7, #19]
 8001f8a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d041      	beq.n	800201c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001f9c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001fa0:	d02a      	beq.n	8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001fa2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001fa6:	d824      	bhi.n	8001ff2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001fa8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001fac:	d008      	beq.n	8001fc0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001fae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001fb2:	d81e      	bhi.n	8001ff2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d00a      	beq.n	8001fce <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001fb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fbc:	d010      	beq.n	8001fe0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001fbe:	e018      	b.n	8001ff2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001fc0:	4b62      	ldr	r3, [pc, #392]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	4a61      	ldr	r2, [pc, #388]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fca:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001fcc:	e015      	b.n	8001ffa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	3304      	adds	r3, #4
 8001fd2:	2100      	movs	r1, #0
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f000 fa73 	bl	80024c0 <RCCEx_PLLSAI1_Config>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001fde:	e00c      	b.n	8001ffa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	3320      	adds	r3, #32
 8001fe4:	2100      	movs	r1, #0
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f000 fb5e 	bl	80026a8 <RCCEx_PLLSAI2_Config>
 8001fec:	4603      	mov	r3, r0
 8001fee:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001ff0:	e003      	b.n	8001ffa <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	74fb      	strb	r3, [r7, #19]
      break;
 8001ff6:	e000      	b.n	8001ffa <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001ff8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001ffa:	7cfb      	ldrb	r3, [r7, #19]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d10b      	bne.n	8002018 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002000:	4b52      	ldr	r3, [pc, #328]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002002:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002006:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800200e:	494f      	ldr	r1, [pc, #316]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002010:	4313      	orrs	r3, r2
 8002012:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002016:	e001      	b.n	800201c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002018:	7cfb      	ldrb	r3, [r7, #19]
 800201a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002024:	2b00      	cmp	r3, #0
 8002026:	f000 80a0 	beq.w	800216a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800202a:	2300      	movs	r3, #0
 800202c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800202e:	4b47      	ldr	r3, [pc, #284]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002030:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002032:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d101      	bne.n	800203e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800203a:	2301      	movs	r3, #1
 800203c:	e000      	b.n	8002040 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800203e:	2300      	movs	r3, #0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d00d      	beq.n	8002060 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002044:	4b41      	ldr	r3, [pc, #260]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002046:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002048:	4a40      	ldr	r2, [pc, #256]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800204a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800204e:	6593      	str	r3, [r2, #88]	; 0x58
 8002050:	4b3e      	ldr	r3, [pc, #248]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002052:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002054:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002058:	60bb      	str	r3, [r7, #8]
 800205a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800205c:	2301      	movs	r3, #1
 800205e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002060:	4b3b      	ldr	r3, [pc, #236]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a3a      	ldr	r2, [pc, #232]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002066:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800206a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800206c:	f7fe fe0c 	bl	8000c88 <HAL_GetTick>
 8002070:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002072:	e009      	b.n	8002088 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002074:	f7fe fe08 	bl	8000c88 <HAL_GetTick>
 8002078:	4602      	mov	r2, r0
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	2b02      	cmp	r3, #2
 8002080:	d902      	bls.n	8002088 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002082:	2303      	movs	r3, #3
 8002084:	74fb      	strb	r3, [r7, #19]
        break;
 8002086:	e005      	b.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002088:	4b31      	ldr	r3, [pc, #196]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002090:	2b00      	cmp	r3, #0
 8002092:	d0ef      	beq.n	8002074 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002094:	7cfb      	ldrb	r3, [r7, #19]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d15c      	bne.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800209a:	4b2c      	ldr	r3, [pc, #176]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800209c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020a4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d01f      	beq.n	80020ec <HAL_RCCEx_PeriphCLKConfig+0x200>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80020b2:	697a      	ldr	r2, [r7, #20]
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d019      	beq.n	80020ec <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80020b8:	4b24      	ldr	r3, [pc, #144]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020c2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80020c4:	4b21      	ldr	r3, [pc, #132]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020ca:	4a20      	ldr	r2, [pc, #128]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80020d4:	4b1d      	ldr	r3, [pc, #116]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020da:	4a1c      	ldr	r2, [pc, #112]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80020e4:	4a19      	ldr	r2, [pc, #100]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	f003 0301 	and.w	r3, r3, #1
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d016      	beq.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020f6:	f7fe fdc7 	bl	8000c88 <HAL_GetTick>
 80020fa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020fc:	e00b      	b.n	8002116 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020fe:	f7fe fdc3 	bl	8000c88 <HAL_GetTick>
 8002102:	4602      	mov	r2, r0
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	1ad3      	subs	r3, r2, r3
 8002108:	f241 3288 	movw	r2, #5000	; 0x1388
 800210c:	4293      	cmp	r3, r2
 800210e:	d902      	bls.n	8002116 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002110:	2303      	movs	r3, #3
 8002112:	74fb      	strb	r3, [r7, #19]
            break;
 8002114:	e006      	b.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002116:	4b0d      	ldr	r3, [pc, #52]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002118:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800211c:	f003 0302 	and.w	r3, r3, #2
 8002120:	2b00      	cmp	r3, #0
 8002122:	d0ec      	beq.n	80020fe <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002124:	7cfb      	ldrb	r3, [r7, #19]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d10c      	bne.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800212a:	4b08      	ldr	r3, [pc, #32]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800212c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002130:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800213a:	4904      	ldr	r1, [pc, #16]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800213c:	4313      	orrs	r3, r2
 800213e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002142:	e009      	b.n	8002158 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002144:	7cfb      	ldrb	r3, [r7, #19]
 8002146:	74bb      	strb	r3, [r7, #18]
 8002148:	e006      	b.n	8002158 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800214a:	bf00      	nop
 800214c:	40021000 	.word	0x40021000
 8002150:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002154:	7cfb      	ldrb	r3, [r7, #19]
 8002156:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002158:	7c7b      	ldrb	r3, [r7, #17]
 800215a:	2b01      	cmp	r3, #1
 800215c:	d105      	bne.n	800216a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800215e:	4b9e      	ldr	r3, [pc, #632]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002160:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002162:	4a9d      	ldr	r2, [pc, #628]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002164:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002168:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0301 	and.w	r3, r3, #1
 8002172:	2b00      	cmp	r3, #0
 8002174:	d00a      	beq.n	800218c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002176:	4b98      	ldr	r3, [pc, #608]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002178:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800217c:	f023 0203 	bic.w	r2, r3, #3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002184:	4994      	ldr	r1, [pc, #592]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002186:	4313      	orrs	r3, r2
 8002188:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 0302 	and.w	r3, r3, #2
 8002194:	2b00      	cmp	r3, #0
 8002196:	d00a      	beq.n	80021ae <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002198:	4b8f      	ldr	r3, [pc, #572]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800219a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800219e:	f023 020c 	bic.w	r2, r3, #12
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021a6:	498c      	ldr	r1, [pc, #560]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021a8:	4313      	orrs	r3, r2
 80021aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 0304 	and.w	r3, r3, #4
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d00a      	beq.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80021ba:	4b87      	ldr	r3, [pc, #540]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021c0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c8:	4983      	ldr	r1, [pc, #524]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021ca:	4313      	orrs	r3, r2
 80021cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 0308 	and.w	r3, r3, #8
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d00a      	beq.n	80021f2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80021dc:	4b7e      	ldr	r3, [pc, #504]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021e2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ea:	497b      	ldr	r1, [pc, #492]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021ec:	4313      	orrs	r3, r2
 80021ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0310 	and.w	r3, r3, #16
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d00a      	beq.n	8002214 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80021fe:	4b76      	ldr	r3, [pc, #472]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002200:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002204:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800220c:	4972      	ldr	r1, [pc, #456]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800220e:	4313      	orrs	r3, r2
 8002210:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 0320 	and.w	r3, r3, #32
 800221c:	2b00      	cmp	r3, #0
 800221e:	d00a      	beq.n	8002236 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002220:	4b6d      	ldr	r3, [pc, #436]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002222:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002226:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800222e:	496a      	ldr	r1, [pc, #424]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002230:	4313      	orrs	r3, r2
 8002232:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800223e:	2b00      	cmp	r3, #0
 8002240:	d00a      	beq.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002242:	4b65      	ldr	r3, [pc, #404]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002244:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002248:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002250:	4961      	ldr	r1, [pc, #388]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002252:	4313      	orrs	r3, r2
 8002254:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002260:	2b00      	cmp	r3, #0
 8002262:	d00a      	beq.n	800227a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002264:	4b5c      	ldr	r3, [pc, #368]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002266:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800226a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002272:	4959      	ldr	r1, [pc, #356]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002274:	4313      	orrs	r3, r2
 8002276:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002282:	2b00      	cmp	r3, #0
 8002284:	d00a      	beq.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002286:	4b54      	ldr	r3, [pc, #336]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002288:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800228c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002294:	4950      	ldr	r1, [pc, #320]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002296:	4313      	orrs	r3, r2
 8002298:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d00a      	beq.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80022a8:	4b4b      	ldr	r3, [pc, #300]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ae:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022b6:	4948      	ldr	r1, [pc, #288]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022b8:	4313      	orrs	r3, r2
 80022ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d00a      	beq.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80022ca:	4b43      	ldr	r3, [pc, #268]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022d0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022d8:	493f      	ldr	r1, [pc, #252]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022da:	4313      	orrs	r3, r2
 80022dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d028      	beq.n	800233e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80022ec:	4b3a      	ldr	r3, [pc, #232]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022f2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022fa:	4937      	ldr	r1, [pc, #220]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022fc:	4313      	orrs	r3, r2
 80022fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002306:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800230a:	d106      	bne.n	800231a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800230c:	4b32      	ldr	r3, [pc, #200]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	4a31      	ldr	r2, [pc, #196]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002312:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002316:	60d3      	str	r3, [r2, #12]
 8002318:	e011      	b.n	800233e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800231e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002322:	d10c      	bne.n	800233e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	3304      	adds	r3, #4
 8002328:	2101      	movs	r1, #1
 800232a:	4618      	mov	r0, r3
 800232c:	f000 f8c8 	bl	80024c0 <RCCEx_PLLSAI1_Config>
 8002330:	4603      	mov	r3, r0
 8002332:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002334:	7cfb      	ldrb	r3, [r7, #19]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d001      	beq.n	800233e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800233a:	7cfb      	ldrb	r3, [r7, #19]
 800233c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002346:	2b00      	cmp	r3, #0
 8002348:	d028      	beq.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800234a:	4b23      	ldr	r3, [pc, #140]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800234c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002350:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002358:	491f      	ldr	r1, [pc, #124]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800235a:	4313      	orrs	r3, r2
 800235c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002364:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002368:	d106      	bne.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800236a:	4b1b      	ldr	r3, [pc, #108]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800236c:	68db      	ldr	r3, [r3, #12]
 800236e:	4a1a      	ldr	r2, [pc, #104]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002370:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002374:	60d3      	str	r3, [r2, #12]
 8002376:	e011      	b.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800237c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002380:	d10c      	bne.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	3304      	adds	r3, #4
 8002386:	2101      	movs	r1, #1
 8002388:	4618      	mov	r0, r3
 800238a:	f000 f899 	bl	80024c0 <RCCEx_PLLSAI1_Config>
 800238e:	4603      	mov	r3, r0
 8002390:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002392:	7cfb      	ldrb	r3, [r7, #19]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d001      	beq.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002398:	7cfb      	ldrb	r3, [r7, #19]
 800239a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d02b      	beq.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80023a8:	4b0b      	ldr	r3, [pc, #44]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023b6:	4908      	ldr	r1, [pc, #32]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023b8:	4313      	orrs	r3, r2
 80023ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80023c6:	d109      	bne.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023c8:	4b03      	ldr	r3, [pc, #12]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	4a02      	ldr	r2, [pc, #8]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023d2:	60d3      	str	r3, [r2, #12]
 80023d4:	e014      	b.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80023d6:	bf00      	nop
 80023d8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80023e4:	d10c      	bne.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	3304      	adds	r3, #4
 80023ea:	2101      	movs	r1, #1
 80023ec:	4618      	mov	r0, r3
 80023ee:	f000 f867 	bl	80024c0 <RCCEx_PLLSAI1_Config>
 80023f2:	4603      	mov	r3, r0
 80023f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80023f6:	7cfb      	ldrb	r3, [r7, #19]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d001      	beq.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80023fc:	7cfb      	ldrb	r3, [r7, #19]
 80023fe:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002408:	2b00      	cmp	r3, #0
 800240a:	d02f      	beq.n	800246c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800240c:	4b2b      	ldr	r3, [pc, #172]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800240e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002412:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800241a:	4928      	ldr	r1, [pc, #160]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800241c:	4313      	orrs	r3, r2
 800241e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002426:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800242a:	d10d      	bne.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	3304      	adds	r3, #4
 8002430:	2102      	movs	r1, #2
 8002432:	4618      	mov	r0, r3
 8002434:	f000 f844 	bl	80024c0 <RCCEx_PLLSAI1_Config>
 8002438:	4603      	mov	r3, r0
 800243a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800243c:	7cfb      	ldrb	r3, [r7, #19]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d014      	beq.n	800246c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002442:	7cfb      	ldrb	r3, [r7, #19]
 8002444:	74bb      	strb	r3, [r7, #18]
 8002446:	e011      	b.n	800246c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800244c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002450:	d10c      	bne.n	800246c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	3320      	adds	r3, #32
 8002456:	2102      	movs	r1, #2
 8002458:	4618      	mov	r0, r3
 800245a:	f000 f925 	bl	80026a8 <RCCEx_PLLSAI2_Config>
 800245e:	4603      	mov	r3, r0
 8002460:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002462:	7cfb      	ldrb	r3, [r7, #19]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d001      	beq.n	800246c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002468:	7cfb      	ldrb	r3, [r7, #19]
 800246a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002474:	2b00      	cmp	r3, #0
 8002476:	d00a      	beq.n	800248e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002478:	4b10      	ldr	r3, [pc, #64]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800247a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800247e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002486:	490d      	ldr	r1, [pc, #52]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002488:	4313      	orrs	r3, r2
 800248a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d00b      	beq.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800249a:	4b08      	ldr	r3, [pc, #32]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800249c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024a0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80024aa:	4904      	ldr	r1, [pc, #16]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80024ac:	4313      	orrs	r3, r2
 80024ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80024b2:	7cbb      	ldrb	r3, [r7, #18]
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3718      	adds	r7, #24
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	40021000 	.word	0x40021000

080024c0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b084      	sub	sp, #16
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
 80024c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80024ca:	2300      	movs	r3, #0
 80024cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80024ce:	4b75      	ldr	r3, [pc, #468]	; (80026a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024d0:	68db      	ldr	r3, [r3, #12]
 80024d2:	f003 0303 	and.w	r3, r3, #3
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d018      	beq.n	800250c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80024da:	4b72      	ldr	r3, [pc, #456]	; (80026a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024dc:	68db      	ldr	r3, [r3, #12]
 80024de:	f003 0203 	and.w	r2, r3, #3
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	429a      	cmp	r2, r3
 80024e8:	d10d      	bne.n	8002506 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
       ||
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d009      	beq.n	8002506 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80024f2:	4b6c      	ldr	r3, [pc, #432]	; (80026a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024f4:	68db      	ldr	r3, [r3, #12]
 80024f6:	091b      	lsrs	r3, r3, #4
 80024f8:	f003 0307 	and.w	r3, r3, #7
 80024fc:	1c5a      	adds	r2, r3, #1
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	685b      	ldr	r3, [r3, #4]
       ||
 8002502:	429a      	cmp	r2, r3
 8002504:	d047      	beq.n	8002596 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	73fb      	strb	r3, [r7, #15]
 800250a:	e044      	b.n	8002596 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	2b03      	cmp	r3, #3
 8002512:	d018      	beq.n	8002546 <RCCEx_PLLSAI1_Config+0x86>
 8002514:	2b03      	cmp	r3, #3
 8002516:	d825      	bhi.n	8002564 <RCCEx_PLLSAI1_Config+0xa4>
 8002518:	2b01      	cmp	r3, #1
 800251a:	d002      	beq.n	8002522 <RCCEx_PLLSAI1_Config+0x62>
 800251c:	2b02      	cmp	r3, #2
 800251e:	d009      	beq.n	8002534 <RCCEx_PLLSAI1_Config+0x74>
 8002520:	e020      	b.n	8002564 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002522:	4b60      	ldr	r3, [pc, #384]	; (80026a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 0302 	and.w	r3, r3, #2
 800252a:	2b00      	cmp	r3, #0
 800252c:	d11d      	bne.n	800256a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002532:	e01a      	b.n	800256a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002534:	4b5b      	ldr	r3, [pc, #364]	; (80026a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800253c:	2b00      	cmp	r3, #0
 800253e:	d116      	bne.n	800256e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002544:	e013      	b.n	800256e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002546:	4b57      	ldr	r3, [pc, #348]	; (80026a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d10f      	bne.n	8002572 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002552:	4b54      	ldr	r3, [pc, #336]	; (80026a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d109      	bne.n	8002572 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002562:	e006      	b.n	8002572 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	73fb      	strb	r3, [r7, #15]
      break;
 8002568:	e004      	b.n	8002574 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800256a:	bf00      	nop
 800256c:	e002      	b.n	8002574 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800256e:	bf00      	nop
 8002570:	e000      	b.n	8002574 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002572:	bf00      	nop
    }

    if(status == HAL_OK)
 8002574:	7bfb      	ldrb	r3, [r7, #15]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d10d      	bne.n	8002596 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800257a:	4b4a      	ldr	r3, [pc, #296]	; (80026a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800257c:	68db      	ldr	r3, [r3, #12]
 800257e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6819      	ldr	r1, [r3, #0]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	3b01      	subs	r3, #1
 800258c:	011b      	lsls	r3, r3, #4
 800258e:	430b      	orrs	r3, r1
 8002590:	4944      	ldr	r1, [pc, #272]	; (80026a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002592:	4313      	orrs	r3, r2
 8002594:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002596:	7bfb      	ldrb	r3, [r7, #15]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d17d      	bne.n	8002698 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800259c:	4b41      	ldr	r3, [pc, #260]	; (80026a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a40      	ldr	r2, [pc, #256]	; (80026a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025a2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80025a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025a8:	f7fe fb6e 	bl	8000c88 <HAL_GetTick>
 80025ac:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80025ae:	e009      	b.n	80025c4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80025b0:	f7fe fb6a 	bl	8000c88 <HAL_GetTick>
 80025b4:	4602      	mov	r2, r0
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	2b02      	cmp	r3, #2
 80025bc:	d902      	bls.n	80025c4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80025be:	2303      	movs	r3, #3
 80025c0:	73fb      	strb	r3, [r7, #15]
        break;
 80025c2:	e005      	b.n	80025d0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80025c4:	4b37      	ldr	r3, [pc, #220]	; (80026a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d1ef      	bne.n	80025b0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80025d0:	7bfb      	ldrb	r3, [r7, #15]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d160      	bne.n	8002698 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d111      	bne.n	8002600 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80025dc:	4b31      	ldr	r3, [pc, #196]	; (80026a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025de:	691b      	ldr	r3, [r3, #16]
 80025e0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80025e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025e8:	687a      	ldr	r2, [r7, #4]
 80025ea:	6892      	ldr	r2, [r2, #8]
 80025ec:	0211      	lsls	r1, r2, #8
 80025ee:	687a      	ldr	r2, [r7, #4]
 80025f0:	68d2      	ldr	r2, [r2, #12]
 80025f2:	0912      	lsrs	r2, r2, #4
 80025f4:	0452      	lsls	r2, r2, #17
 80025f6:	430a      	orrs	r2, r1
 80025f8:	492a      	ldr	r1, [pc, #168]	; (80026a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025fa:	4313      	orrs	r3, r2
 80025fc:	610b      	str	r3, [r1, #16]
 80025fe:	e027      	b.n	8002650 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	2b01      	cmp	r3, #1
 8002604:	d112      	bne.n	800262c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002606:	4b27      	ldr	r3, [pc, #156]	; (80026a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002608:	691b      	ldr	r3, [r3, #16]
 800260a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800260e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002612:	687a      	ldr	r2, [r7, #4]
 8002614:	6892      	ldr	r2, [r2, #8]
 8002616:	0211      	lsls	r1, r2, #8
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	6912      	ldr	r2, [r2, #16]
 800261c:	0852      	lsrs	r2, r2, #1
 800261e:	3a01      	subs	r2, #1
 8002620:	0552      	lsls	r2, r2, #21
 8002622:	430a      	orrs	r2, r1
 8002624:	491f      	ldr	r1, [pc, #124]	; (80026a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002626:	4313      	orrs	r3, r2
 8002628:	610b      	str	r3, [r1, #16]
 800262a:	e011      	b.n	8002650 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800262c:	4b1d      	ldr	r3, [pc, #116]	; (80026a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800262e:	691b      	ldr	r3, [r3, #16]
 8002630:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002634:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002638:	687a      	ldr	r2, [r7, #4]
 800263a:	6892      	ldr	r2, [r2, #8]
 800263c:	0211      	lsls	r1, r2, #8
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	6952      	ldr	r2, [r2, #20]
 8002642:	0852      	lsrs	r2, r2, #1
 8002644:	3a01      	subs	r2, #1
 8002646:	0652      	lsls	r2, r2, #25
 8002648:	430a      	orrs	r2, r1
 800264a:	4916      	ldr	r1, [pc, #88]	; (80026a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800264c:	4313      	orrs	r3, r2
 800264e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002650:	4b14      	ldr	r3, [pc, #80]	; (80026a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a13      	ldr	r2, [pc, #76]	; (80026a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002656:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800265a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800265c:	f7fe fb14 	bl	8000c88 <HAL_GetTick>
 8002660:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002662:	e009      	b.n	8002678 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002664:	f7fe fb10 	bl	8000c88 <HAL_GetTick>
 8002668:	4602      	mov	r2, r0
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	2b02      	cmp	r3, #2
 8002670:	d902      	bls.n	8002678 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	73fb      	strb	r3, [r7, #15]
          break;
 8002676:	e005      	b.n	8002684 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002678:	4b0a      	ldr	r3, [pc, #40]	; (80026a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002680:	2b00      	cmp	r3, #0
 8002682:	d0ef      	beq.n	8002664 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002684:	7bfb      	ldrb	r3, [r7, #15]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d106      	bne.n	8002698 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800268a:	4b06      	ldr	r3, [pc, #24]	; (80026a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800268c:	691a      	ldr	r2, [r3, #16]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	699b      	ldr	r3, [r3, #24]
 8002692:	4904      	ldr	r1, [pc, #16]	; (80026a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002694:	4313      	orrs	r3, r2
 8002696:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002698:	7bfb      	ldrb	r3, [r7, #15]
}
 800269a:	4618      	mov	r0, r3
 800269c:	3710      	adds	r7, #16
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	40021000 	.word	0x40021000

080026a8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80026b2:	2300      	movs	r3, #0
 80026b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80026b6:	4b6a      	ldr	r3, [pc, #424]	; (8002860 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026b8:	68db      	ldr	r3, [r3, #12]
 80026ba:	f003 0303 	and.w	r3, r3, #3
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d018      	beq.n	80026f4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80026c2:	4b67      	ldr	r3, [pc, #412]	; (8002860 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026c4:	68db      	ldr	r3, [r3, #12]
 80026c6:	f003 0203 	and.w	r2, r3, #3
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d10d      	bne.n	80026ee <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
       ||
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d009      	beq.n	80026ee <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80026da:	4b61      	ldr	r3, [pc, #388]	; (8002860 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026dc:	68db      	ldr	r3, [r3, #12]
 80026de:	091b      	lsrs	r3, r3, #4
 80026e0:	f003 0307 	and.w	r3, r3, #7
 80026e4:	1c5a      	adds	r2, r3, #1
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	685b      	ldr	r3, [r3, #4]
       ||
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d047      	beq.n	800277e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	73fb      	strb	r3, [r7, #15]
 80026f2:	e044      	b.n	800277e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	2b03      	cmp	r3, #3
 80026fa:	d018      	beq.n	800272e <RCCEx_PLLSAI2_Config+0x86>
 80026fc:	2b03      	cmp	r3, #3
 80026fe:	d825      	bhi.n	800274c <RCCEx_PLLSAI2_Config+0xa4>
 8002700:	2b01      	cmp	r3, #1
 8002702:	d002      	beq.n	800270a <RCCEx_PLLSAI2_Config+0x62>
 8002704:	2b02      	cmp	r3, #2
 8002706:	d009      	beq.n	800271c <RCCEx_PLLSAI2_Config+0x74>
 8002708:	e020      	b.n	800274c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800270a:	4b55      	ldr	r3, [pc, #340]	; (8002860 <RCCEx_PLLSAI2_Config+0x1b8>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 0302 	and.w	r3, r3, #2
 8002712:	2b00      	cmp	r3, #0
 8002714:	d11d      	bne.n	8002752 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800271a:	e01a      	b.n	8002752 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800271c:	4b50      	ldr	r3, [pc, #320]	; (8002860 <RCCEx_PLLSAI2_Config+0x1b8>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002724:	2b00      	cmp	r3, #0
 8002726:	d116      	bne.n	8002756 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800272c:	e013      	b.n	8002756 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800272e:	4b4c      	ldr	r3, [pc, #304]	; (8002860 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d10f      	bne.n	800275a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800273a:	4b49      	ldr	r3, [pc, #292]	; (8002860 <RCCEx_PLLSAI2_Config+0x1b8>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d109      	bne.n	800275a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800274a:	e006      	b.n	800275a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	73fb      	strb	r3, [r7, #15]
      break;
 8002750:	e004      	b.n	800275c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002752:	bf00      	nop
 8002754:	e002      	b.n	800275c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002756:	bf00      	nop
 8002758:	e000      	b.n	800275c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800275a:	bf00      	nop
    }

    if(status == HAL_OK)
 800275c:	7bfb      	ldrb	r3, [r7, #15]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d10d      	bne.n	800277e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002762:	4b3f      	ldr	r3, [pc, #252]	; (8002860 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002764:	68db      	ldr	r3, [r3, #12]
 8002766:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6819      	ldr	r1, [r3, #0]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	3b01      	subs	r3, #1
 8002774:	011b      	lsls	r3, r3, #4
 8002776:	430b      	orrs	r3, r1
 8002778:	4939      	ldr	r1, [pc, #228]	; (8002860 <RCCEx_PLLSAI2_Config+0x1b8>)
 800277a:	4313      	orrs	r3, r2
 800277c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800277e:	7bfb      	ldrb	r3, [r7, #15]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d167      	bne.n	8002854 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002784:	4b36      	ldr	r3, [pc, #216]	; (8002860 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a35      	ldr	r2, [pc, #212]	; (8002860 <RCCEx_PLLSAI2_Config+0x1b8>)
 800278a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800278e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002790:	f7fe fa7a 	bl	8000c88 <HAL_GetTick>
 8002794:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002796:	e009      	b.n	80027ac <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002798:	f7fe fa76 	bl	8000c88 <HAL_GetTick>
 800279c:	4602      	mov	r2, r0
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	2b02      	cmp	r3, #2
 80027a4:	d902      	bls.n	80027ac <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	73fb      	strb	r3, [r7, #15]
        break;
 80027aa:	e005      	b.n	80027b8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80027ac:	4b2c      	ldr	r3, [pc, #176]	; (8002860 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d1ef      	bne.n	8002798 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80027b8:	7bfb      	ldrb	r3, [r7, #15]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d14a      	bne.n	8002854 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d111      	bne.n	80027e8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80027c4:	4b26      	ldr	r3, [pc, #152]	; (8002860 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027c6:	695b      	ldr	r3, [r3, #20]
 80027c8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80027cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027d0:	687a      	ldr	r2, [r7, #4]
 80027d2:	6892      	ldr	r2, [r2, #8]
 80027d4:	0211      	lsls	r1, r2, #8
 80027d6:	687a      	ldr	r2, [r7, #4]
 80027d8:	68d2      	ldr	r2, [r2, #12]
 80027da:	0912      	lsrs	r2, r2, #4
 80027dc:	0452      	lsls	r2, r2, #17
 80027de:	430a      	orrs	r2, r1
 80027e0:	491f      	ldr	r1, [pc, #124]	; (8002860 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027e2:	4313      	orrs	r3, r2
 80027e4:	614b      	str	r3, [r1, #20]
 80027e6:	e011      	b.n	800280c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80027e8:	4b1d      	ldr	r3, [pc, #116]	; (8002860 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027ea:	695b      	ldr	r3, [r3, #20]
 80027ec:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80027f0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80027f4:	687a      	ldr	r2, [r7, #4]
 80027f6:	6892      	ldr	r2, [r2, #8]
 80027f8:	0211      	lsls	r1, r2, #8
 80027fa:	687a      	ldr	r2, [r7, #4]
 80027fc:	6912      	ldr	r2, [r2, #16]
 80027fe:	0852      	lsrs	r2, r2, #1
 8002800:	3a01      	subs	r2, #1
 8002802:	0652      	lsls	r2, r2, #25
 8002804:	430a      	orrs	r2, r1
 8002806:	4916      	ldr	r1, [pc, #88]	; (8002860 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002808:	4313      	orrs	r3, r2
 800280a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800280c:	4b14      	ldr	r3, [pc, #80]	; (8002860 <RCCEx_PLLSAI2_Config+0x1b8>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a13      	ldr	r2, [pc, #76]	; (8002860 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002812:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002816:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002818:	f7fe fa36 	bl	8000c88 <HAL_GetTick>
 800281c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800281e:	e009      	b.n	8002834 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002820:	f7fe fa32 	bl	8000c88 <HAL_GetTick>
 8002824:	4602      	mov	r2, r0
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	2b02      	cmp	r3, #2
 800282c:	d902      	bls.n	8002834 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800282e:	2303      	movs	r3, #3
 8002830:	73fb      	strb	r3, [r7, #15]
          break;
 8002832:	e005      	b.n	8002840 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002834:	4b0a      	ldr	r3, [pc, #40]	; (8002860 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800283c:	2b00      	cmp	r3, #0
 800283e:	d0ef      	beq.n	8002820 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002840:	7bfb      	ldrb	r3, [r7, #15]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d106      	bne.n	8002854 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002846:	4b06      	ldr	r3, [pc, #24]	; (8002860 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002848:	695a      	ldr	r2, [r3, #20]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	695b      	ldr	r3, [r3, #20]
 800284e:	4904      	ldr	r1, [pc, #16]	; (8002860 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002850:	4313      	orrs	r3, r2
 8002852:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002854:	7bfb      	ldrb	r3, [r7, #15]
}
 8002856:	4618      	mov	r0, r3
 8002858:	3710      	adds	r7, #16
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	40021000 	.word	0x40021000

08002864 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b082      	sub	sp, #8
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d101      	bne.n	8002876 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e040      	b.n	80028f8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800287a:	2b00      	cmp	r3, #0
 800287c:	d106      	bne.n	800288c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2200      	movs	r2, #0
 8002882:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f7fe f828 	bl	80008dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2224      	movs	r2, #36	; 0x24
 8002890:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f022 0201 	bic.w	r2, r2, #1
 80028a0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f000 f992 	bl	8002bcc <UART_SetConfig>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d101      	bne.n	80028b2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e022      	b.n	80028f8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d002      	beq.n	80028c0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	f000 fc3e 	bl	800313c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	685a      	ldr	r2, [r3, #4]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80028ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	689a      	ldr	r2, [r3, #8]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80028de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f042 0201 	orr.w	r2, r2, #1
 80028ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80028f0:	6878      	ldr	r0, [r7, #4]
 80028f2:	f000 fcc5 	bl	8003280 <UART_CheckIdleState>
 80028f6:	4603      	mov	r3, r0
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3708      	adds	r7, #8
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}

08002900 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b08a      	sub	sp, #40	; 0x28
 8002904:	af02      	add	r7, sp, #8
 8002906:	60f8      	str	r0, [r7, #12]
 8002908:	60b9      	str	r1, [r7, #8]
 800290a:	603b      	str	r3, [r7, #0]
 800290c:	4613      	mov	r3, r2
 800290e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002914:	2b20      	cmp	r3, #32
 8002916:	f040 8082 	bne.w	8002a1e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d002      	beq.n	8002926 <HAL_UART_Transmit+0x26>
 8002920:	88fb      	ldrh	r3, [r7, #6]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d101      	bne.n	800292a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e07a      	b.n	8002a20 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002930:	2b01      	cmp	r3, #1
 8002932:	d101      	bne.n	8002938 <HAL_UART_Transmit+0x38>
 8002934:	2302      	movs	r3, #2
 8002936:	e073      	b.n	8002a20 <HAL_UART_Transmit+0x120>
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	2201      	movs	r2, #1
 800293c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2200      	movs	r2, #0
 8002944:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2221      	movs	r2, #33	; 0x21
 800294c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800294e:	f7fe f99b 	bl	8000c88 <HAL_GetTick>
 8002952:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	88fa      	ldrh	r2, [r7, #6]
 8002958:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	88fa      	ldrh	r2, [r7, #6]
 8002960:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800296c:	d108      	bne.n	8002980 <HAL_UART_Transmit+0x80>
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	691b      	ldr	r3, [r3, #16]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d104      	bne.n	8002980 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002976:	2300      	movs	r3, #0
 8002978:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	61bb      	str	r3, [r7, #24]
 800297e:	e003      	b.n	8002988 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002984:	2300      	movs	r3, #0
 8002986:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2200      	movs	r2, #0
 800298c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002990:	e02d      	b.n	80029ee <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	9300      	str	r3, [sp, #0]
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	2200      	movs	r2, #0
 800299a:	2180      	movs	r1, #128	; 0x80
 800299c:	68f8      	ldr	r0, [r7, #12]
 800299e:	f000 fcb8 	bl	8003312 <UART_WaitOnFlagUntilTimeout>
 80029a2:	4603      	mov	r3, r0
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d001      	beq.n	80029ac <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80029a8:	2303      	movs	r3, #3
 80029aa:	e039      	b.n	8002a20 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80029ac:	69fb      	ldr	r3, [r7, #28]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d10b      	bne.n	80029ca <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80029b2:	69bb      	ldr	r3, [r7, #24]
 80029b4:	881a      	ldrh	r2, [r3, #0]
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80029be:	b292      	uxth	r2, r2
 80029c0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80029c2:	69bb      	ldr	r3, [r7, #24]
 80029c4:	3302      	adds	r3, #2
 80029c6:	61bb      	str	r3, [r7, #24]
 80029c8:	e008      	b.n	80029dc <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	781a      	ldrb	r2, [r3, #0]
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	b292      	uxth	r2, r2
 80029d4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	3301      	adds	r3, #1
 80029da:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80029e2:	b29b      	uxth	r3, r3
 80029e4:	3b01      	subs	r3, #1
 80029e6:	b29a      	uxth	r2, r3
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80029f4:	b29b      	uxth	r3, r3
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d1cb      	bne.n	8002992 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	9300      	str	r3, [sp, #0]
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	2200      	movs	r2, #0
 8002a02:	2140      	movs	r1, #64	; 0x40
 8002a04:	68f8      	ldr	r0, [r7, #12]
 8002a06:	f000 fc84 	bl	8003312 <UART_WaitOnFlagUntilTimeout>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d001      	beq.n	8002a14 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002a10:	2303      	movs	r3, #3
 8002a12:	e005      	b.n	8002a20 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2220      	movs	r2, #32
 8002a18:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	e000      	b.n	8002a20 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8002a1e:	2302      	movs	r3, #2
  }
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	3720      	adds	r7, #32
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}

08002a28 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b08a      	sub	sp, #40	; 0x28
 8002a2c:	af02      	add	r7, sp, #8
 8002a2e:	60f8      	str	r0, [r7, #12]
 8002a30:	60b9      	str	r1, [r7, #8]
 8002a32:	603b      	str	r3, [r7, #0]
 8002a34:	4613      	mov	r3, r2
 8002a36:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a3c:	2b20      	cmp	r3, #32
 8002a3e:	f040 80bf 	bne.w	8002bc0 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d002      	beq.n	8002a4e <HAL_UART_Receive+0x26>
 8002a48:	88fb      	ldrh	r3, [r7, #6]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d101      	bne.n	8002a52 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e0b7      	b.n	8002bc2 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d101      	bne.n	8002a60 <HAL_UART_Receive+0x38>
 8002a5c:	2302      	movs	r3, #2
 8002a5e:	e0b0      	b.n	8002bc2 <HAL_UART_Receive+0x19a>
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2201      	movs	r2, #1
 8002a64:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2222      	movs	r2, #34	; 0x22
 8002a74:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002a7c:	f7fe f904 	bl	8000c88 <HAL_GetTick>
 8002a80:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	88fa      	ldrh	r2, [r7, #6]
 8002a86:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	88fa      	ldrh	r2, [r7, #6]
 8002a8e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a9a:	d10e      	bne.n	8002aba <HAL_UART_Receive+0x92>
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	691b      	ldr	r3, [r3, #16]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d105      	bne.n	8002ab0 <HAL_UART_Receive+0x88>
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002aaa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002aae:	e02d      	b.n	8002b0c <HAL_UART_Receive+0xe4>
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	22ff      	movs	r2, #255	; 0xff
 8002ab4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002ab8:	e028      	b.n	8002b0c <HAL_UART_Receive+0xe4>
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d10d      	bne.n	8002ade <HAL_UART_Receive+0xb6>
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	691b      	ldr	r3, [r3, #16]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d104      	bne.n	8002ad4 <HAL_UART_Receive+0xac>
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	22ff      	movs	r2, #255	; 0xff
 8002ace:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002ad2:	e01b      	b.n	8002b0c <HAL_UART_Receive+0xe4>
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	227f      	movs	r2, #127	; 0x7f
 8002ad8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002adc:	e016      	b.n	8002b0c <HAL_UART_Receive+0xe4>
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ae6:	d10d      	bne.n	8002b04 <HAL_UART_Receive+0xdc>
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	691b      	ldr	r3, [r3, #16]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d104      	bne.n	8002afa <HAL_UART_Receive+0xd2>
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	227f      	movs	r2, #127	; 0x7f
 8002af4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002af8:	e008      	b.n	8002b0c <HAL_UART_Receive+0xe4>
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	223f      	movs	r2, #63	; 0x3f
 8002afe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002b02:	e003      	b.n	8002b0c <HAL_UART_Receive+0xe4>
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2200      	movs	r2, #0
 8002b08:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002b12:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b1c:	d108      	bne.n	8002b30 <HAL_UART_Receive+0x108>
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	691b      	ldr	r3, [r3, #16]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d104      	bne.n	8002b30 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8002b26:	2300      	movs	r3, #0
 8002b28:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	61bb      	str	r3, [r7, #24]
 8002b2e:	e003      	b.n	8002b38 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b34:	2300      	movs	r3, #0
 8002b36:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002b40:	e033      	b.n	8002baa <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	9300      	str	r3, [sp, #0]
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	2120      	movs	r1, #32
 8002b4c:	68f8      	ldr	r0, [r7, #12]
 8002b4e:	f000 fbe0 	bl	8003312 <UART_WaitOnFlagUntilTimeout>
 8002b52:	4603      	mov	r3, r0
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d001      	beq.n	8002b5c <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8002b58:	2303      	movs	r3, #3
 8002b5a:	e032      	b.n	8002bc2 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8002b5c:	69fb      	ldr	r3, [r7, #28]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d10c      	bne.n	8002b7c <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002b68:	b29a      	uxth	r2, r3
 8002b6a:	8a7b      	ldrh	r3, [r7, #18]
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	b29a      	uxth	r2, r3
 8002b70:	69bb      	ldr	r3, [r7, #24]
 8002b72:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002b74:	69bb      	ldr	r3, [r7, #24]
 8002b76:	3302      	adds	r3, #2
 8002b78:	61bb      	str	r3, [r7, #24]
 8002b7a:	e00d      	b.n	8002b98 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002b82:	b29b      	uxth	r3, r3
 8002b84:	b2da      	uxtb	r2, r3
 8002b86:	8a7b      	ldrh	r3, [r7, #18]
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	b2da      	uxtb	r2, r3
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	3301      	adds	r3, #1
 8002b96:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002b9e:	b29b      	uxth	r3, r3
 8002ba0:	3b01      	subs	r3, #1
 8002ba2:	b29a      	uxth	r2, r3
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002bb0:	b29b      	uxth	r3, r3
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d1c5      	bne.n	8002b42 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2220      	movs	r2, #32
 8002bba:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	e000      	b.n	8002bc2 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8002bc0:	2302      	movs	r3, #2
  }
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3720      	adds	r7, #32
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
	...

08002bcc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002bcc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002bd0:	b08a      	sub	sp, #40	; 0x28
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	689a      	ldr	r2, [r3, #8]
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	691b      	ldr	r3, [r3, #16]
 8002be4:	431a      	orrs	r2, r3
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	695b      	ldr	r3, [r3, #20]
 8002bea:	431a      	orrs	r2, r3
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	69db      	ldr	r3, [r3, #28]
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	4ba4      	ldr	r3, [pc, #656]	; (8002e8c <UART_SetConfig+0x2c0>)
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	68fa      	ldr	r2, [r7, #12]
 8002c00:	6812      	ldr	r2, [r2, #0]
 8002c02:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c04:	430b      	orrs	r3, r1
 8002c06:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	68da      	ldr	r2, [r3, #12]
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	430a      	orrs	r2, r1
 8002c1c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	699b      	ldr	r3, [r3, #24]
 8002c22:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a99      	ldr	r2, [pc, #612]	; (8002e90 <UART_SetConfig+0x2c4>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d004      	beq.n	8002c38 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	6a1b      	ldr	r3, [r3, #32]
 8002c32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c34:	4313      	orrs	r3, r2
 8002c36:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c48:	430a      	orrs	r2, r1
 8002c4a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a90      	ldr	r2, [pc, #576]	; (8002e94 <UART_SetConfig+0x2c8>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d126      	bne.n	8002ca4 <UART_SetConfig+0xd8>
 8002c56:	4b90      	ldr	r3, [pc, #576]	; (8002e98 <UART_SetConfig+0x2cc>)
 8002c58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c5c:	f003 0303 	and.w	r3, r3, #3
 8002c60:	2b03      	cmp	r3, #3
 8002c62:	d81b      	bhi.n	8002c9c <UART_SetConfig+0xd0>
 8002c64:	a201      	add	r2, pc, #4	; (adr r2, 8002c6c <UART_SetConfig+0xa0>)
 8002c66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c6a:	bf00      	nop
 8002c6c:	08002c7d 	.word	0x08002c7d
 8002c70:	08002c8d 	.word	0x08002c8d
 8002c74:	08002c85 	.word	0x08002c85
 8002c78:	08002c95 	.word	0x08002c95
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c82:	e116      	b.n	8002eb2 <UART_SetConfig+0x2e6>
 8002c84:	2302      	movs	r3, #2
 8002c86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c8a:	e112      	b.n	8002eb2 <UART_SetConfig+0x2e6>
 8002c8c:	2304      	movs	r3, #4
 8002c8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c92:	e10e      	b.n	8002eb2 <UART_SetConfig+0x2e6>
 8002c94:	2308      	movs	r3, #8
 8002c96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c9a:	e10a      	b.n	8002eb2 <UART_SetConfig+0x2e6>
 8002c9c:	2310      	movs	r3, #16
 8002c9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ca2:	e106      	b.n	8002eb2 <UART_SetConfig+0x2e6>
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a7c      	ldr	r2, [pc, #496]	; (8002e9c <UART_SetConfig+0x2d0>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d138      	bne.n	8002d20 <UART_SetConfig+0x154>
 8002cae:	4b7a      	ldr	r3, [pc, #488]	; (8002e98 <UART_SetConfig+0x2cc>)
 8002cb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cb4:	f003 030c 	and.w	r3, r3, #12
 8002cb8:	2b0c      	cmp	r3, #12
 8002cba:	d82d      	bhi.n	8002d18 <UART_SetConfig+0x14c>
 8002cbc:	a201      	add	r2, pc, #4	; (adr r2, 8002cc4 <UART_SetConfig+0xf8>)
 8002cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cc2:	bf00      	nop
 8002cc4:	08002cf9 	.word	0x08002cf9
 8002cc8:	08002d19 	.word	0x08002d19
 8002ccc:	08002d19 	.word	0x08002d19
 8002cd0:	08002d19 	.word	0x08002d19
 8002cd4:	08002d09 	.word	0x08002d09
 8002cd8:	08002d19 	.word	0x08002d19
 8002cdc:	08002d19 	.word	0x08002d19
 8002ce0:	08002d19 	.word	0x08002d19
 8002ce4:	08002d01 	.word	0x08002d01
 8002ce8:	08002d19 	.word	0x08002d19
 8002cec:	08002d19 	.word	0x08002d19
 8002cf0:	08002d19 	.word	0x08002d19
 8002cf4:	08002d11 	.word	0x08002d11
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002cfe:	e0d8      	b.n	8002eb2 <UART_SetConfig+0x2e6>
 8002d00:	2302      	movs	r3, #2
 8002d02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d06:	e0d4      	b.n	8002eb2 <UART_SetConfig+0x2e6>
 8002d08:	2304      	movs	r3, #4
 8002d0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d0e:	e0d0      	b.n	8002eb2 <UART_SetConfig+0x2e6>
 8002d10:	2308      	movs	r3, #8
 8002d12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d16:	e0cc      	b.n	8002eb2 <UART_SetConfig+0x2e6>
 8002d18:	2310      	movs	r3, #16
 8002d1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d1e:	e0c8      	b.n	8002eb2 <UART_SetConfig+0x2e6>
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a5e      	ldr	r2, [pc, #376]	; (8002ea0 <UART_SetConfig+0x2d4>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d125      	bne.n	8002d76 <UART_SetConfig+0x1aa>
 8002d2a:	4b5b      	ldr	r3, [pc, #364]	; (8002e98 <UART_SetConfig+0x2cc>)
 8002d2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d30:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002d34:	2b30      	cmp	r3, #48	; 0x30
 8002d36:	d016      	beq.n	8002d66 <UART_SetConfig+0x19a>
 8002d38:	2b30      	cmp	r3, #48	; 0x30
 8002d3a:	d818      	bhi.n	8002d6e <UART_SetConfig+0x1a2>
 8002d3c:	2b20      	cmp	r3, #32
 8002d3e:	d00a      	beq.n	8002d56 <UART_SetConfig+0x18a>
 8002d40:	2b20      	cmp	r3, #32
 8002d42:	d814      	bhi.n	8002d6e <UART_SetConfig+0x1a2>
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d002      	beq.n	8002d4e <UART_SetConfig+0x182>
 8002d48:	2b10      	cmp	r3, #16
 8002d4a:	d008      	beq.n	8002d5e <UART_SetConfig+0x192>
 8002d4c:	e00f      	b.n	8002d6e <UART_SetConfig+0x1a2>
 8002d4e:	2300      	movs	r3, #0
 8002d50:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d54:	e0ad      	b.n	8002eb2 <UART_SetConfig+0x2e6>
 8002d56:	2302      	movs	r3, #2
 8002d58:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d5c:	e0a9      	b.n	8002eb2 <UART_SetConfig+0x2e6>
 8002d5e:	2304      	movs	r3, #4
 8002d60:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d64:	e0a5      	b.n	8002eb2 <UART_SetConfig+0x2e6>
 8002d66:	2308      	movs	r3, #8
 8002d68:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d6c:	e0a1      	b.n	8002eb2 <UART_SetConfig+0x2e6>
 8002d6e:	2310      	movs	r3, #16
 8002d70:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d74:	e09d      	b.n	8002eb2 <UART_SetConfig+0x2e6>
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a4a      	ldr	r2, [pc, #296]	; (8002ea4 <UART_SetConfig+0x2d8>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d125      	bne.n	8002dcc <UART_SetConfig+0x200>
 8002d80:	4b45      	ldr	r3, [pc, #276]	; (8002e98 <UART_SetConfig+0x2cc>)
 8002d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d86:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002d8a:	2bc0      	cmp	r3, #192	; 0xc0
 8002d8c:	d016      	beq.n	8002dbc <UART_SetConfig+0x1f0>
 8002d8e:	2bc0      	cmp	r3, #192	; 0xc0
 8002d90:	d818      	bhi.n	8002dc4 <UART_SetConfig+0x1f8>
 8002d92:	2b80      	cmp	r3, #128	; 0x80
 8002d94:	d00a      	beq.n	8002dac <UART_SetConfig+0x1e0>
 8002d96:	2b80      	cmp	r3, #128	; 0x80
 8002d98:	d814      	bhi.n	8002dc4 <UART_SetConfig+0x1f8>
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d002      	beq.n	8002da4 <UART_SetConfig+0x1d8>
 8002d9e:	2b40      	cmp	r3, #64	; 0x40
 8002da0:	d008      	beq.n	8002db4 <UART_SetConfig+0x1e8>
 8002da2:	e00f      	b.n	8002dc4 <UART_SetConfig+0x1f8>
 8002da4:	2300      	movs	r3, #0
 8002da6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002daa:	e082      	b.n	8002eb2 <UART_SetConfig+0x2e6>
 8002dac:	2302      	movs	r3, #2
 8002dae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002db2:	e07e      	b.n	8002eb2 <UART_SetConfig+0x2e6>
 8002db4:	2304      	movs	r3, #4
 8002db6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002dba:	e07a      	b.n	8002eb2 <UART_SetConfig+0x2e6>
 8002dbc:	2308      	movs	r3, #8
 8002dbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002dc2:	e076      	b.n	8002eb2 <UART_SetConfig+0x2e6>
 8002dc4:	2310      	movs	r3, #16
 8002dc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002dca:	e072      	b.n	8002eb2 <UART_SetConfig+0x2e6>
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a35      	ldr	r2, [pc, #212]	; (8002ea8 <UART_SetConfig+0x2dc>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d12a      	bne.n	8002e2c <UART_SetConfig+0x260>
 8002dd6:	4b30      	ldr	r3, [pc, #192]	; (8002e98 <UART_SetConfig+0x2cc>)
 8002dd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ddc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002de0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002de4:	d01a      	beq.n	8002e1c <UART_SetConfig+0x250>
 8002de6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002dea:	d81b      	bhi.n	8002e24 <UART_SetConfig+0x258>
 8002dec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002df0:	d00c      	beq.n	8002e0c <UART_SetConfig+0x240>
 8002df2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002df6:	d815      	bhi.n	8002e24 <UART_SetConfig+0x258>
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d003      	beq.n	8002e04 <UART_SetConfig+0x238>
 8002dfc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e00:	d008      	beq.n	8002e14 <UART_SetConfig+0x248>
 8002e02:	e00f      	b.n	8002e24 <UART_SetConfig+0x258>
 8002e04:	2300      	movs	r3, #0
 8002e06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e0a:	e052      	b.n	8002eb2 <UART_SetConfig+0x2e6>
 8002e0c:	2302      	movs	r3, #2
 8002e0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e12:	e04e      	b.n	8002eb2 <UART_SetConfig+0x2e6>
 8002e14:	2304      	movs	r3, #4
 8002e16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e1a:	e04a      	b.n	8002eb2 <UART_SetConfig+0x2e6>
 8002e1c:	2308      	movs	r3, #8
 8002e1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e22:	e046      	b.n	8002eb2 <UART_SetConfig+0x2e6>
 8002e24:	2310      	movs	r3, #16
 8002e26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e2a:	e042      	b.n	8002eb2 <UART_SetConfig+0x2e6>
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a17      	ldr	r2, [pc, #92]	; (8002e90 <UART_SetConfig+0x2c4>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d13a      	bne.n	8002eac <UART_SetConfig+0x2e0>
 8002e36:	4b18      	ldr	r3, [pc, #96]	; (8002e98 <UART_SetConfig+0x2cc>)
 8002e38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e3c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002e40:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002e44:	d01a      	beq.n	8002e7c <UART_SetConfig+0x2b0>
 8002e46:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002e4a:	d81b      	bhi.n	8002e84 <UART_SetConfig+0x2b8>
 8002e4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e50:	d00c      	beq.n	8002e6c <UART_SetConfig+0x2a0>
 8002e52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e56:	d815      	bhi.n	8002e84 <UART_SetConfig+0x2b8>
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d003      	beq.n	8002e64 <UART_SetConfig+0x298>
 8002e5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e60:	d008      	beq.n	8002e74 <UART_SetConfig+0x2a8>
 8002e62:	e00f      	b.n	8002e84 <UART_SetConfig+0x2b8>
 8002e64:	2300      	movs	r3, #0
 8002e66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e6a:	e022      	b.n	8002eb2 <UART_SetConfig+0x2e6>
 8002e6c:	2302      	movs	r3, #2
 8002e6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e72:	e01e      	b.n	8002eb2 <UART_SetConfig+0x2e6>
 8002e74:	2304      	movs	r3, #4
 8002e76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e7a:	e01a      	b.n	8002eb2 <UART_SetConfig+0x2e6>
 8002e7c:	2308      	movs	r3, #8
 8002e7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e82:	e016      	b.n	8002eb2 <UART_SetConfig+0x2e6>
 8002e84:	2310      	movs	r3, #16
 8002e86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e8a:	e012      	b.n	8002eb2 <UART_SetConfig+0x2e6>
 8002e8c:	efff69f3 	.word	0xefff69f3
 8002e90:	40008000 	.word	0x40008000
 8002e94:	40013800 	.word	0x40013800
 8002e98:	40021000 	.word	0x40021000
 8002e9c:	40004400 	.word	0x40004400
 8002ea0:	40004800 	.word	0x40004800
 8002ea4:	40004c00 	.word	0x40004c00
 8002ea8:	40005000 	.word	0x40005000
 8002eac:	2310      	movs	r3, #16
 8002eae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a9f      	ldr	r2, [pc, #636]	; (8003134 <UART_SetConfig+0x568>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d17a      	bne.n	8002fb2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002ebc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002ec0:	2b08      	cmp	r3, #8
 8002ec2:	d824      	bhi.n	8002f0e <UART_SetConfig+0x342>
 8002ec4:	a201      	add	r2, pc, #4	; (adr r2, 8002ecc <UART_SetConfig+0x300>)
 8002ec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eca:	bf00      	nop
 8002ecc:	08002ef1 	.word	0x08002ef1
 8002ed0:	08002f0f 	.word	0x08002f0f
 8002ed4:	08002ef9 	.word	0x08002ef9
 8002ed8:	08002f0f 	.word	0x08002f0f
 8002edc:	08002eff 	.word	0x08002eff
 8002ee0:	08002f0f 	.word	0x08002f0f
 8002ee4:	08002f0f 	.word	0x08002f0f
 8002ee8:	08002f0f 	.word	0x08002f0f
 8002eec:	08002f07 	.word	0x08002f07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ef0:	f7fe ff70 	bl	8001dd4 <HAL_RCC_GetPCLK1Freq>
 8002ef4:	61f8      	str	r0, [r7, #28]
        break;
 8002ef6:	e010      	b.n	8002f1a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002ef8:	4b8f      	ldr	r3, [pc, #572]	; (8003138 <UART_SetConfig+0x56c>)
 8002efa:	61fb      	str	r3, [r7, #28]
        break;
 8002efc:	e00d      	b.n	8002f1a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002efe:	f7fe fed1 	bl	8001ca4 <HAL_RCC_GetSysClockFreq>
 8002f02:	61f8      	str	r0, [r7, #28]
        break;
 8002f04:	e009      	b.n	8002f1a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f0a:	61fb      	str	r3, [r7, #28]
        break;
 8002f0c:	e005      	b.n	8002f1a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002f18:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	f000 80fb 	beq.w	8003118 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	685a      	ldr	r2, [r3, #4]
 8002f26:	4613      	mov	r3, r2
 8002f28:	005b      	lsls	r3, r3, #1
 8002f2a:	4413      	add	r3, r2
 8002f2c:	69fa      	ldr	r2, [r7, #28]
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	d305      	bcc.n	8002f3e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002f38:	69fa      	ldr	r2, [r7, #28]
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d903      	bls.n	8002f46 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002f44:	e0e8      	b.n	8003118 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	461c      	mov	r4, r3
 8002f4c:	4615      	mov	r5, r2
 8002f4e:	f04f 0200 	mov.w	r2, #0
 8002f52:	f04f 0300 	mov.w	r3, #0
 8002f56:	022b      	lsls	r3, r5, #8
 8002f58:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002f5c:	0222      	lsls	r2, r4, #8
 8002f5e:	68f9      	ldr	r1, [r7, #12]
 8002f60:	6849      	ldr	r1, [r1, #4]
 8002f62:	0849      	lsrs	r1, r1, #1
 8002f64:	2000      	movs	r0, #0
 8002f66:	4688      	mov	r8, r1
 8002f68:	4681      	mov	r9, r0
 8002f6a:	eb12 0a08 	adds.w	sl, r2, r8
 8002f6e:	eb43 0b09 	adc.w	fp, r3, r9
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	2200      	movs	r2, #0
 8002f78:	603b      	str	r3, [r7, #0]
 8002f7a:	607a      	str	r2, [r7, #4]
 8002f7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002f80:	4650      	mov	r0, sl
 8002f82:	4659      	mov	r1, fp
 8002f84:	f7fd f97c 	bl	8000280 <__aeabi_uldivmod>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	460b      	mov	r3, r1
 8002f8c:	4613      	mov	r3, r2
 8002f8e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002f90:	69bb      	ldr	r3, [r7, #24]
 8002f92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f96:	d308      	bcc.n	8002faa <UART_SetConfig+0x3de>
 8002f98:	69bb      	ldr	r3, [r7, #24]
 8002f9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f9e:	d204      	bcs.n	8002faa <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	69ba      	ldr	r2, [r7, #24]
 8002fa6:	60da      	str	r2, [r3, #12]
 8002fa8:	e0b6      	b.n	8003118 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002fb0:	e0b2      	b.n	8003118 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	69db      	ldr	r3, [r3, #28]
 8002fb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fba:	d15e      	bne.n	800307a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8002fbc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002fc0:	2b08      	cmp	r3, #8
 8002fc2:	d828      	bhi.n	8003016 <UART_SetConfig+0x44a>
 8002fc4:	a201      	add	r2, pc, #4	; (adr r2, 8002fcc <UART_SetConfig+0x400>)
 8002fc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fca:	bf00      	nop
 8002fcc:	08002ff1 	.word	0x08002ff1
 8002fd0:	08002ff9 	.word	0x08002ff9
 8002fd4:	08003001 	.word	0x08003001
 8002fd8:	08003017 	.word	0x08003017
 8002fdc:	08003007 	.word	0x08003007
 8002fe0:	08003017 	.word	0x08003017
 8002fe4:	08003017 	.word	0x08003017
 8002fe8:	08003017 	.word	0x08003017
 8002fec:	0800300f 	.word	0x0800300f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ff0:	f7fe fef0 	bl	8001dd4 <HAL_RCC_GetPCLK1Freq>
 8002ff4:	61f8      	str	r0, [r7, #28]
        break;
 8002ff6:	e014      	b.n	8003022 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002ff8:	f7fe ff02 	bl	8001e00 <HAL_RCC_GetPCLK2Freq>
 8002ffc:	61f8      	str	r0, [r7, #28]
        break;
 8002ffe:	e010      	b.n	8003022 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003000:	4b4d      	ldr	r3, [pc, #308]	; (8003138 <UART_SetConfig+0x56c>)
 8003002:	61fb      	str	r3, [r7, #28]
        break;
 8003004:	e00d      	b.n	8003022 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003006:	f7fe fe4d 	bl	8001ca4 <HAL_RCC_GetSysClockFreq>
 800300a:	61f8      	str	r0, [r7, #28]
        break;
 800300c:	e009      	b.n	8003022 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800300e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003012:	61fb      	str	r3, [r7, #28]
        break;
 8003014:	e005      	b.n	8003022 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003016:	2300      	movs	r3, #0
 8003018:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003020:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003022:	69fb      	ldr	r3, [r7, #28]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d077      	beq.n	8003118 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	005a      	lsls	r2, r3, #1
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	085b      	lsrs	r3, r3, #1
 8003032:	441a      	add	r2, r3
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	fbb2 f3f3 	udiv	r3, r2, r3
 800303c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800303e:	69bb      	ldr	r3, [r7, #24]
 8003040:	2b0f      	cmp	r3, #15
 8003042:	d916      	bls.n	8003072 <UART_SetConfig+0x4a6>
 8003044:	69bb      	ldr	r3, [r7, #24]
 8003046:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800304a:	d212      	bcs.n	8003072 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800304c:	69bb      	ldr	r3, [r7, #24]
 800304e:	b29b      	uxth	r3, r3
 8003050:	f023 030f 	bic.w	r3, r3, #15
 8003054:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003056:	69bb      	ldr	r3, [r7, #24]
 8003058:	085b      	lsrs	r3, r3, #1
 800305a:	b29b      	uxth	r3, r3
 800305c:	f003 0307 	and.w	r3, r3, #7
 8003060:	b29a      	uxth	r2, r3
 8003062:	8afb      	ldrh	r3, [r7, #22]
 8003064:	4313      	orrs	r3, r2
 8003066:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	8afa      	ldrh	r2, [r7, #22]
 800306e:	60da      	str	r2, [r3, #12]
 8003070:	e052      	b.n	8003118 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003078:	e04e      	b.n	8003118 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800307a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800307e:	2b08      	cmp	r3, #8
 8003080:	d827      	bhi.n	80030d2 <UART_SetConfig+0x506>
 8003082:	a201      	add	r2, pc, #4	; (adr r2, 8003088 <UART_SetConfig+0x4bc>)
 8003084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003088:	080030ad 	.word	0x080030ad
 800308c:	080030b5 	.word	0x080030b5
 8003090:	080030bd 	.word	0x080030bd
 8003094:	080030d3 	.word	0x080030d3
 8003098:	080030c3 	.word	0x080030c3
 800309c:	080030d3 	.word	0x080030d3
 80030a0:	080030d3 	.word	0x080030d3
 80030a4:	080030d3 	.word	0x080030d3
 80030a8:	080030cb 	.word	0x080030cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80030ac:	f7fe fe92 	bl	8001dd4 <HAL_RCC_GetPCLK1Freq>
 80030b0:	61f8      	str	r0, [r7, #28]
        break;
 80030b2:	e014      	b.n	80030de <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80030b4:	f7fe fea4 	bl	8001e00 <HAL_RCC_GetPCLK2Freq>
 80030b8:	61f8      	str	r0, [r7, #28]
        break;
 80030ba:	e010      	b.n	80030de <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80030bc:	4b1e      	ldr	r3, [pc, #120]	; (8003138 <UART_SetConfig+0x56c>)
 80030be:	61fb      	str	r3, [r7, #28]
        break;
 80030c0:	e00d      	b.n	80030de <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80030c2:	f7fe fdef 	bl	8001ca4 <HAL_RCC_GetSysClockFreq>
 80030c6:	61f8      	str	r0, [r7, #28]
        break;
 80030c8:	e009      	b.n	80030de <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030ce:	61fb      	str	r3, [r7, #28]
        break;
 80030d0:	e005      	b.n	80030de <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80030d2:	2300      	movs	r3, #0
 80030d4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80030dc:	bf00      	nop
    }

    if (pclk != 0U)
 80030de:	69fb      	ldr	r3, [r7, #28]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d019      	beq.n	8003118 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	085a      	lsrs	r2, r3, #1
 80030ea:	69fb      	ldr	r3, [r7, #28]
 80030ec:	441a      	add	r2, r3
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80030f6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80030f8:	69bb      	ldr	r3, [r7, #24]
 80030fa:	2b0f      	cmp	r3, #15
 80030fc:	d909      	bls.n	8003112 <UART_SetConfig+0x546>
 80030fe:	69bb      	ldr	r3, [r7, #24]
 8003100:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003104:	d205      	bcs.n	8003112 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003106:	69bb      	ldr	r3, [r7, #24]
 8003108:	b29a      	uxth	r2, r3
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	60da      	str	r2, [r3, #12]
 8003110:	e002      	b.n	8003118 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2200      	movs	r2, #0
 800311c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2200      	movs	r2, #0
 8003122:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003124:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003128:	4618      	mov	r0, r3
 800312a:	3728      	adds	r7, #40	; 0x28
 800312c:	46bd      	mov	sp, r7
 800312e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003132:	bf00      	nop
 8003134:	40008000 	.word	0x40008000
 8003138:	00f42400 	.word	0x00f42400

0800313c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800313c:	b480      	push	{r7}
 800313e:	b083      	sub	sp, #12
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003148:	f003 0301 	and.w	r3, r3, #1
 800314c:	2b00      	cmp	r3, #0
 800314e:	d00a      	beq.n	8003166 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	430a      	orrs	r2, r1
 8003164:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316a:	f003 0302 	and.w	r3, r3, #2
 800316e:	2b00      	cmp	r3, #0
 8003170:	d00a      	beq.n	8003188 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	430a      	orrs	r2, r1
 8003186:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318c:	f003 0304 	and.w	r3, r3, #4
 8003190:	2b00      	cmp	r3, #0
 8003192:	d00a      	beq.n	80031aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	430a      	orrs	r2, r1
 80031a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ae:	f003 0308 	and.w	r3, r3, #8
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d00a      	beq.n	80031cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	430a      	orrs	r2, r1
 80031ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d0:	f003 0310 	and.w	r3, r3, #16
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d00a      	beq.n	80031ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	430a      	orrs	r2, r1
 80031ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f2:	f003 0320 	and.w	r3, r3, #32
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d00a      	beq.n	8003210 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	430a      	orrs	r2, r1
 800320e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003214:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003218:	2b00      	cmp	r3, #0
 800321a:	d01a      	beq.n	8003252 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	430a      	orrs	r2, r1
 8003230:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003236:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800323a:	d10a      	bne.n	8003252 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	430a      	orrs	r2, r1
 8003250:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003256:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800325a:	2b00      	cmp	r3, #0
 800325c:	d00a      	beq.n	8003274 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	430a      	orrs	r2, r1
 8003272:	605a      	str	r2, [r3, #4]
  }
}
 8003274:	bf00      	nop
 8003276:	370c      	adds	r7, #12
 8003278:	46bd      	mov	sp, r7
 800327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327e:	4770      	bx	lr

08003280 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b086      	sub	sp, #24
 8003284:	af02      	add	r7, sp, #8
 8003286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2200      	movs	r2, #0
 800328c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003290:	f7fd fcfa 	bl	8000c88 <HAL_GetTick>
 8003294:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 0308 	and.w	r3, r3, #8
 80032a0:	2b08      	cmp	r3, #8
 80032a2:	d10e      	bne.n	80032c2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80032a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80032a8:	9300      	str	r3, [sp, #0]
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2200      	movs	r2, #0
 80032ae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f000 f82d 	bl	8003312 <UART_WaitOnFlagUntilTimeout>
 80032b8:	4603      	mov	r3, r0
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d001      	beq.n	80032c2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80032be:	2303      	movs	r3, #3
 80032c0:	e023      	b.n	800330a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 0304 	and.w	r3, r3, #4
 80032cc:	2b04      	cmp	r3, #4
 80032ce:	d10e      	bne.n	80032ee <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80032d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80032d4:	9300      	str	r3, [sp, #0]
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2200      	movs	r2, #0
 80032da:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f000 f817 	bl	8003312 <UART_WaitOnFlagUntilTimeout>
 80032e4:	4603      	mov	r3, r0
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d001      	beq.n	80032ee <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80032ea:	2303      	movs	r3, #3
 80032ec:	e00d      	b.n	800330a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2220      	movs	r2, #32
 80032f2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2220      	movs	r2, #32
 80032f8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2200      	movs	r2, #0
 80032fe:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2200      	movs	r2, #0
 8003304:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003308:	2300      	movs	r3, #0
}
 800330a:	4618      	mov	r0, r3
 800330c:	3710      	adds	r7, #16
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}

08003312 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003312:	b580      	push	{r7, lr}
 8003314:	b09c      	sub	sp, #112	; 0x70
 8003316:	af00      	add	r7, sp, #0
 8003318:	60f8      	str	r0, [r7, #12]
 800331a:	60b9      	str	r1, [r7, #8]
 800331c:	603b      	str	r3, [r7, #0]
 800331e:	4613      	mov	r3, r2
 8003320:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003322:	e0a5      	b.n	8003470 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003324:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003326:	f1b3 3fff 	cmp.w	r3, #4294967295
 800332a:	f000 80a1 	beq.w	8003470 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800332e:	f7fd fcab 	bl	8000c88 <HAL_GetTick>
 8003332:	4602      	mov	r2, r0
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	1ad3      	subs	r3, r2, r3
 8003338:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800333a:	429a      	cmp	r2, r3
 800333c:	d302      	bcc.n	8003344 <UART_WaitOnFlagUntilTimeout+0x32>
 800333e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003340:	2b00      	cmp	r3, #0
 8003342:	d13e      	bne.n	80033c2 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800334a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800334c:	e853 3f00 	ldrex	r3, [r3]
 8003350:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003352:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003354:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003358:	667b      	str	r3, [r7, #100]	; 0x64
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	461a      	mov	r2, r3
 8003360:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003362:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003364:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003366:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003368:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800336a:	e841 2300 	strex	r3, r2, [r1]
 800336e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003370:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003372:	2b00      	cmp	r3, #0
 8003374:	d1e6      	bne.n	8003344 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	3308      	adds	r3, #8
 800337c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800337e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003380:	e853 3f00 	ldrex	r3, [r3]
 8003384:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003388:	f023 0301 	bic.w	r3, r3, #1
 800338c:	663b      	str	r3, [r7, #96]	; 0x60
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	3308      	adds	r3, #8
 8003394:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003396:	64ba      	str	r2, [r7, #72]	; 0x48
 8003398:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800339a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800339c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800339e:	e841 2300 	strex	r3, r2, [r1]
 80033a2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80033a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d1e5      	bne.n	8003376 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2220      	movs	r2, #32
 80033ae:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2220      	movs	r2, #32
 80033b4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2200      	movs	r2, #0
 80033ba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80033be:	2303      	movs	r3, #3
 80033c0:	e067      	b.n	8003492 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 0304 	and.w	r3, r3, #4
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d04f      	beq.n	8003470 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	69db      	ldr	r3, [r3, #28]
 80033d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033de:	d147      	bne.n	8003470 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80033e8:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033f2:	e853 3f00 	ldrex	r3, [r3]
 80033f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80033f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033fa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80033fe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	461a      	mov	r2, r3
 8003406:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003408:	637b      	str	r3, [r7, #52]	; 0x34
 800340a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800340c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800340e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003410:	e841 2300 	strex	r3, r2, [r1]
 8003414:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003418:	2b00      	cmp	r3, #0
 800341a:	d1e6      	bne.n	80033ea <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	3308      	adds	r3, #8
 8003422:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	e853 3f00 	ldrex	r3, [r3]
 800342a:	613b      	str	r3, [r7, #16]
   return(result);
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	f023 0301 	bic.w	r3, r3, #1
 8003432:	66bb      	str	r3, [r7, #104]	; 0x68
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	3308      	adds	r3, #8
 800343a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800343c:	623a      	str	r2, [r7, #32]
 800343e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003440:	69f9      	ldr	r1, [r7, #28]
 8003442:	6a3a      	ldr	r2, [r7, #32]
 8003444:	e841 2300 	strex	r3, r2, [r1]
 8003448:	61bb      	str	r3, [r7, #24]
   return(result);
 800344a:	69bb      	ldr	r3, [r7, #24]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d1e5      	bne.n	800341c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2220      	movs	r2, #32
 8003454:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2220      	movs	r2, #32
 800345a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2220      	movs	r2, #32
 8003460:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2200      	movs	r2, #0
 8003468:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800346c:	2303      	movs	r3, #3
 800346e:	e010      	b.n	8003492 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	69da      	ldr	r2, [r3, #28]
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	4013      	ands	r3, r2
 800347a:	68ba      	ldr	r2, [r7, #8]
 800347c:	429a      	cmp	r2, r3
 800347e:	bf0c      	ite	eq
 8003480:	2301      	moveq	r3, #1
 8003482:	2300      	movne	r3, #0
 8003484:	b2db      	uxtb	r3, r3
 8003486:	461a      	mov	r2, r3
 8003488:	79fb      	ldrb	r3, [r7, #7]
 800348a:	429a      	cmp	r2, r3
 800348c:	f43f af4a 	beq.w	8003324 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003490:	2300      	movs	r3, #0
}
 8003492:	4618      	mov	r0, r3
 8003494:	3770      	adds	r7, #112	; 0x70
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}

0800349a <atoi>:
 800349a:	220a      	movs	r2, #10
 800349c:	2100      	movs	r1, #0
 800349e:	f000 b957 	b.w	8003750 <strtol>
	...

080034a4 <__errno>:
 80034a4:	4b01      	ldr	r3, [pc, #4]	; (80034ac <__errno+0x8>)
 80034a6:	6818      	ldr	r0, [r3, #0]
 80034a8:	4770      	bx	lr
 80034aa:	bf00      	nop
 80034ac:	2000000c 	.word	0x2000000c

080034b0 <__libc_init_array>:
 80034b0:	b570      	push	{r4, r5, r6, lr}
 80034b2:	4d0d      	ldr	r5, [pc, #52]	; (80034e8 <__libc_init_array+0x38>)
 80034b4:	4c0d      	ldr	r4, [pc, #52]	; (80034ec <__libc_init_array+0x3c>)
 80034b6:	1b64      	subs	r4, r4, r5
 80034b8:	10a4      	asrs	r4, r4, #2
 80034ba:	2600      	movs	r6, #0
 80034bc:	42a6      	cmp	r6, r4
 80034be:	d109      	bne.n	80034d4 <__libc_init_array+0x24>
 80034c0:	4d0b      	ldr	r5, [pc, #44]	; (80034f0 <__libc_init_array+0x40>)
 80034c2:	4c0c      	ldr	r4, [pc, #48]	; (80034f4 <__libc_init_array+0x44>)
 80034c4:	f001 f8c4 	bl	8004650 <_init>
 80034c8:	1b64      	subs	r4, r4, r5
 80034ca:	10a4      	asrs	r4, r4, #2
 80034cc:	2600      	movs	r6, #0
 80034ce:	42a6      	cmp	r6, r4
 80034d0:	d105      	bne.n	80034de <__libc_init_array+0x2e>
 80034d2:	bd70      	pop	{r4, r5, r6, pc}
 80034d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80034d8:	4798      	blx	r3
 80034da:	3601      	adds	r6, #1
 80034dc:	e7ee      	b.n	80034bc <__libc_init_array+0xc>
 80034de:	f855 3b04 	ldr.w	r3, [r5], #4
 80034e2:	4798      	blx	r3
 80034e4:	3601      	adds	r6, #1
 80034e6:	e7f2      	b.n	80034ce <__libc_init_array+0x1e>
 80034e8:	08004890 	.word	0x08004890
 80034ec:	08004890 	.word	0x08004890
 80034f0:	08004890 	.word	0x08004890
 80034f4:	08004894 	.word	0x08004894

080034f8 <memset>:
 80034f8:	4402      	add	r2, r0
 80034fa:	4603      	mov	r3, r0
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d100      	bne.n	8003502 <memset+0xa>
 8003500:	4770      	bx	lr
 8003502:	f803 1b01 	strb.w	r1, [r3], #1
 8003506:	e7f9      	b.n	80034fc <memset+0x4>

08003508 <iprintf>:
 8003508:	b40f      	push	{r0, r1, r2, r3}
 800350a:	4b0a      	ldr	r3, [pc, #40]	; (8003534 <iprintf+0x2c>)
 800350c:	b513      	push	{r0, r1, r4, lr}
 800350e:	681c      	ldr	r4, [r3, #0]
 8003510:	b124      	cbz	r4, 800351c <iprintf+0x14>
 8003512:	69a3      	ldr	r3, [r4, #24]
 8003514:	b913      	cbnz	r3, 800351c <iprintf+0x14>
 8003516:	4620      	mov	r0, r4
 8003518:	f000 fafe 	bl	8003b18 <__sinit>
 800351c:	ab05      	add	r3, sp, #20
 800351e:	9a04      	ldr	r2, [sp, #16]
 8003520:	68a1      	ldr	r1, [r4, #8]
 8003522:	9301      	str	r3, [sp, #4]
 8003524:	4620      	mov	r0, r4
 8003526:	f000 fd07 	bl	8003f38 <_vfiprintf_r>
 800352a:	b002      	add	sp, #8
 800352c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003530:	b004      	add	sp, #16
 8003532:	4770      	bx	lr
 8003534:	2000000c 	.word	0x2000000c

08003538 <_puts_r>:
 8003538:	b570      	push	{r4, r5, r6, lr}
 800353a:	460e      	mov	r6, r1
 800353c:	4605      	mov	r5, r0
 800353e:	b118      	cbz	r0, 8003548 <_puts_r+0x10>
 8003540:	6983      	ldr	r3, [r0, #24]
 8003542:	b90b      	cbnz	r3, 8003548 <_puts_r+0x10>
 8003544:	f000 fae8 	bl	8003b18 <__sinit>
 8003548:	69ab      	ldr	r3, [r5, #24]
 800354a:	68ac      	ldr	r4, [r5, #8]
 800354c:	b913      	cbnz	r3, 8003554 <_puts_r+0x1c>
 800354e:	4628      	mov	r0, r5
 8003550:	f000 fae2 	bl	8003b18 <__sinit>
 8003554:	4b2c      	ldr	r3, [pc, #176]	; (8003608 <_puts_r+0xd0>)
 8003556:	429c      	cmp	r4, r3
 8003558:	d120      	bne.n	800359c <_puts_r+0x64>
 800355a:	686c      	ldr	r4, [r5, #4]
 800355c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800355e:	07db      	lsls	r3, r3, #31
 8003560:	d405      	bmi.n	800356e <_puts_r+0x36>
 8003562:	89a3      	ldrh	r3, [r4, #12]
 8003564:	0598      	lsls	r0, r3, #22
 8003566:	d402      	bmi.n	800356e <_puts_r+0x36>
 8003568:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800356a:	f000 fb73 	bl	8003c54 <__retarget_lock_acquire_recursive>
 800356e:	89a3      	ldrh	r3, [r4, #12]
 8003570:	0719      	lsls	r1, r3, #28
 8003572:	d51d      	bpl.n	80035b0 <_puts_r+0x78>
 8003574:	6923      	ldr	r3, [r4, #16]
 8003576:	b1db      	cbz	r3, 80035b0 <_puts_r+0x78>
 8003578:	3e01      	subs	r6, #1
 800357a:	68a3      	ldr	r3, [r4, #8]
 800357c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003580:	3b01      	subs	r3, #1
 8003582:	60a3      	str	r3, [r4, #8]
 8003584:	bb39      	cbnz	r1, 80035d6 <_puts_r+0x9e>
 8003586:	2b00      	cmp	r3, #0
 8003588:	da38      	bge.n	80035fc <_puts_r+0xc4>
 800358a:	4622      	mov	r2, r4
 800358c:	210a      	movs	r1, #10
 800358e:	4628      	mov	r0, r5
 8003590:	f000 f8e8 	bl	8003764 <__swbuf_r>
 8003594:	3001      	adds	r0, #1
 8003596:	d011      	beq.n	80035bc <_puts_r+0x84>
 8003598:	250a      	movs	r5, #10
 800359a:	e011      	b.n	80035c0 <_puts_r+0x88>
 800359c:	4b1b      	ldr	r3, [pc, #108]	; (800360c <_puts_r+0xd4>)
 800359e:	429c      	cmp	r4, r3
 80035a0:	d101      	bne.n	80035a6 <_puts_r+0x6e>
 80035a2:	68ac      	ldr	r4, [r5, #8]
 80035a4:	e7da      	b.n	800355c <_puts_r+0x24>
 80035a6:	4b1a      	ldr	r3, [pc, #104]	; (8003610 <_puts_r+0xd8>)
 80035a8:	429c      	cmp	r4, r3
 80035aa:	bf08      	it	eq
 80035ac:	68ec      	ldreq	r4, [r5, #12]
 80035ae:	e7d5      	b.n	800355c <_puts_r+0x24>
 80035b0:	4621      	mov	r1, r4
 80035b2:	4628      	mov	r0, r5
 80035b4:	f000 f928 	bl	8003808 <__swsetup_r>
 80035b8:	2800      	cmp	r0, #0
 80035ba:	d0dd      	beq.n	8003578 <_puts_r+0x40>
 80035bc:	f04f 35ff 	mov.w	r5, #4294967295
 80035c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80035c2:	07da      	lsls	r2, r3, #31
 80035c4:	d405      	bmi.n	80035d2 <_puts_r+0x9a>
 80035c6:	89a3      	ldrh	r3, [r4, #12]
 80035c8:	059b      	lsls	r3, r3, #22
 80035ca:	d402      	bmi.n	80035d2 <_puts_r+0x9a>
 80035cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80035ce:	f000 fb42 	bl	8003c56 <__retarget_lock_release_recursive>
 80035d2:	4628      	mov	r0, r5
 80035d4:	bd70      	pop	{r4, r5, r6, pc}
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	da04      	bge.n	80035e4 <_puts_r+0xac>
 80035da:	69a2      	ldr	r2, [r4, #24]
 80035dc:	429a      	cmp	r2, r3
 80035de:	dc06      	bgt.n	80035ee <_puts_r+0xb6>
 80035e0:	290a      	cmp	r1, #10
 80035e2:	d004      	beq.n	80035ee <_puts_r+0xb6>
 80035e4:	6823      	ldr	r3, [r4, #0]
 80035e6:	1c5a      	adds	r2, r3, #1
 80035e8:	6022      	str	r2, [r4, #0]
 80035ea:	7019      	strb	r1, [r3, #0]
 80035ec:	e7c5      	b.n	800357a <_puts_r+0x42>
 80035ee:	4622      	mov	r2, r4
 80035f0:	4628      	mov	r0, r5
 80035f2:	f000 f8b7 	bl	8003764 <__swbuf_r>
 80035f6:	3001      	adds	r0, #1
 80035f8:	d1bf      	bne.n	800357a <_puts_r+0x42>
 80035fa:	e7df      	b.n	80035bc <_puts_r+0x84>
 80035fc:	6823      	ldr	r3, [r4, #0]
 80035fe:	250a      	movs	r5, #10
 8003600:	1c5a      	adds	r2, r3, #1
 8003602:	6022      	str	r2, [r4, #0]
 8003604:	701d      	strb	r5, [r3, #0]
 8003606:	e7db      	b.n	80035c0 <_puts_r+0x88>
 8003608:	08004814 	.word	0x08004814
 800360c:	08004834 	.word	0x08004834
 8003610:	080047f4 	.word	0x080047f4

08003614 <puts>:
 8003614:	4b02      	ldr	r3, [pc, #8]	; (8003620 <puts+0xc>)
 8003616:	4601      	mov	r1, r0
 8003618:	6818      	ldr	r0, [r3, #0]
 800361a:	f7ff bf8d 	b.w	8003538 <_puts_r>
 800361e:	bf00      	nop
 8003620:	2000000c 	.word	0x2000000c

08003624 <strncmp>:
 8003624:	b510      	push	{r4, lr}
 8003626:	b17a      	cbz	r2, 8003648 <strncmp+0x24>
 8003628:	4603      	mov	r3, r0
 800362a:	3901      	subs	r1, #1
 800362c:	1884      	adds	r4, r0, r2
 800362e:	f813 0b01 	ldrb.w	r0, [r3], #1
 8003632:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8003636:	4290      	cmp	r0, r2
 8003638:	d101      	bne.n	800363e <strncmp+0x1a>
 800363a:	42a3      	cmp	r3, r4
 800363c:	d101      	bne.n	8003642 <strncmp+0x1e>
 800363e:	1a80      	subs	r0, r0, r2
 8003640:	bd10      	pop	{r4, pc}
 8003642:	2800      	cmp	r0, #0
 8003644:	d1f3      	bne.n	800362e <strncmp+0xa>
 8003646:	e7fa      	b.n	800363e <strncmp+0x1a>
 8003648:	4610      	mov	r0, r2
 800364a:	e7f9      	b.n	8003640 <strncmp+0x1c>

0800364c <_strtol_l.constprop.0>:
 800364c:	2b01      	cmp	r3, #1
 800364e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003652:	d001      	beq.n	8003658 <_strtol_l.constprop.0+0xc>
 8003654:	2b24      	cmp	r3, #36	; 0x24
 8003656:	d906      	bls.n	8003666 <_strtol_l.constprop.0+0x1a>
 8003658:	f7ff ff24 	bl	80034a4 <__errno>
 800365c:	2316      	movs	r3, #22
 800365e:	6003      	str	r3, [r0, #0]
 8003660:	2000      	movs	r0, #0
 8003662:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003666:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800374c <_strtol_l.constprop.0+0x100>
 800366a:	460d      	mov	r5, r1
 800366c:	462e      	mov	r6, r5
 800366e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003672:	f814 700c 	ldrb.w	r7, [r4, ip]
 8003676:	f017 0708 	ands.w	r7, r7, #8
 800367a:	d1f7      	bne.n	800366c <_strtol_l.constprop.0+0x20>
 800367c:	2c2d      	cmp	r4, #45	; 0x2d
 800367e:	d132      	bne.n	80036e6 <_strtol_l.constprop.0+0x9a>
 8003680:	782c      	ldrb	r4, [r5, #0]
 8003682:	2701      	movs	r7, #1
 8003684:	1cb5      	adds	r5, r6, #2
 8003686:	2b00      	cmp	r3, #0
 8003688:	d05b      	beq.n	8003742 <_strtol_l.constprop.0+0xf6>
 800368a:	2b10      	cmp	r3, #16
 800368c:	d109      	bne.n	80036a2 <_strtol_l.constprop.0+0x56>
 800368e:	2c30      	cmp	r4, #48	; 0x30
 8003690:	d107      	bne.n	80036a2 <_strtol_l.constprop.0+0x56>
 8003692:	782c      	ldrb	r4, [r5, #0]
 8003694:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8003698:	2c58      	cmp	r4, #88	; 0x58
 800369a:	d14d      	bne.n	8003738 <_strtol_l.constprop.0+0xec>
 800369c:	786c      	ldrb	r4, [r5, #1]
 800369e:	2310      	movs	r3, #16
 80036a0:	3502      	adds	r5, #2
 80036a2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80036a6:	f108 38ff 	add.w	r8, r8, #4294967295
 80036aa:	f04f 0c00 	mov.w	ip, #0
 80036ae:	fbb8 f9f3 	udiv	r9, r8, r3
 80036b2:	4666      	mov	r6, ip
 80036b4:	fb03 8a19 	mls	sl, r3, r9, r8
 80036b8:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80036bc:	f1be 0f09 	cmp.w	lr, #9
 80036c0:	d816      	bhi.n	80036f0 <_strtol_l.constprop.0+0xa4>
 80036c2:	4674      	mov	r4, lr
 80036c4:	42a3      	cmp	r3, r4
 80036c6:	dd24      	ble.n	8003712 <_strtol_l.constprop.0+0xc6>
 80036c8:	f1bc 0f00 	cmp.w	ip, #0
 80036cc:	db1e      	blt.n	800370c <_strtol_l.constprop.0+0xc0>
 80036ce:	45b1      	cmp	r9, r6
 80036d0:	d31c      	bcc.n	800370c <_strtol_l.constprop.0+0xc0>
 80036d2:	d101      	bne.n	80036d8 <_strtol_l.constprop.0+0x8c>
 80036d4:	45a2      	cmp	sl, r4
 80036d6:	db19      	blt.n	800370c <_strtol_l.constprop.0+0xc0>
 80036d8:	fb06 4603 	mla	r6, r6, r3, r4
 80036dc:	f04f 0c01 	mov.w	ip, #1
 80036e0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80036e4:	e7e8      	b.n	80036b8 <_strtol_l.constprop.0+0x6c>
 80036e6:	2c2b      	cmp	r4, #43	; 0x2b
 80036e8:	bf04      	itt	eq
 80036ea:	782c      	ldrbeq	r4, [r5, #0]
 80036ec:	1cb5      	addeq	r5, r6, #2
 80036ee:	e7ca      	b.n	8003686 <_strtol_l.constprop.0+0x3a>
 80036f0:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80036f4:	f1be 0f19 	cmp.w	lr, #25
 80036f8:	d801      	bhi.n	80036fe <_strtol_l.constprop.0+0xb2>
 80036fa:	3c37      	subs	r4, #55	; 0x37
 80036fc:	e7e2      	b.n	80036c4 <_strtol_l.constprop.0+0x78>
 80036fe:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8003702:	f1be 0f19 	cmp.w	lr, #25
 8003706:	d804      	bhi.n	8003712 <_strtol_l.constprop.0+0xc6>
 8003708:	3c57      	subs	r4, #87	; 0x57
 800370a:	e7db      	b.n	80036c4 <_strtol_l.constprop.0+0x78>
 800370c:	f04f 3cff 	mov.w	ip, #4294967295
 8003710:	e7e6      	b.n	80036e0 <_strtol_l.constprop.0+0x94>
 8003712:	f1bc 0f00 	cmp.w	ip, #0
 8003716:	da05      	bge.n	8003724 <_strtol_l.constprop.0+0xd8>
 8003718:	2322      	movs	r3, #34	; 0x22
 800371a:	6003      	str	r3, [r0, #0]
 800371c:	4646      	mov	r6, r8
 800371e:	b942      	cbnz	r2, 8003732 <_strtol_l.constprop.0+0xe6>
 8003720:	4630      	mov	r0, r6
 8003722:	e79e      	b.n	8003662 <_strtol_l.constprop.0+0x16>
 8003724:	b107      	cbz	r7, 8003728 <_strtol_l.constprop.0+0xdc>
 8003726:	4276      	negs	r6, r6
 8003728:	2a00      	cmp	r2, #0
 800372a:	d0f9      	beq.n	8003720 <_strtol_l.constprop.0+0xd4>
 800372c:	f1bc 0f00 	cmp.w	ip, #0
 8003730:	d000      	beq.n	8003734 <_strtol_l.constprop.0+0xe8>
 8003732:	1e69      	subs	r1, r5, #1
 8003734:	6011      	str	r1, [r2, #0]
 8003736:	e7f3      	b.n	8003720 <_strtol_l.constprop.0+0xd4>
 8003738:	2430      	movs	r4, #48	; 0x30
 800373a:	2b00      	cmp	r3, #0
 800373c:	d1b1      	bne.n	80036a2 <_strtol_l.constprop.0+0x56>
 800373e:	2308      	movs	r3, #8
 8003740:	e7af      	b.n	80036a2 <_strtol_l.constprop.0+0x56>
 8003742:	2c30      	cmp	r4, #48	; 0x30
 8003744:	d0a5      	beq.n	8003692 <_strtol_l.constprop.0+0x46>
 8003746:	230a      	movs	r3, #10
 8003748:	e7ab      	b.n	80036a2 <_strtol_l.constprop.0+0x56>
 800374a:	bf00      	nop
 800374c:	080046f1 	.word	0x080046f1

08003750 <strtol>:
 8003750:	4613      	mov	r3, r2
 8003752:	460a      	mov	r2, r1
 8003754:	4601      	mov	r1, r0
 8003756:	4802      	ldr	r0, [pc, #8]	; (8003760 <strtol+0x10>)
 8003758:	6800      	ldr	r0, [r0, #0]
 800375a:	f7ff bf77 	b.w	800364c <_strtol_l.constprop.0>
 800375e:	bf00      	nop
 8003760:	2000000c 	.word	0x2000000c

08003764 <__swbuf_r>:
 8003764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003766:	460e      	mov	r6, r1
 8003768:	4614      	mov	r4, r2
 800376a:	4605      	mov	r5, r0
 800376c:	b118      	cbz	r0, 8003776 <__swbuf_r+0x12>
 800376e:	6983      	ldr	r3, [r0, #24]
 8003770:	b90b      	cbnz	r3, 8003776 <__swbuf_r+0x12>
 8003772:	f000 f9d1 	bl	8003b18 <__sinit>
 8003776:	4b21      	ldr	r3, [pc, #132]	; (80037fc <__swbuf_r+0x98>)
 8003778:	429c      	cmp	r4, r3
 800377a:	d12b      	bne.n	80037d4 <__swbuf_r+0x70>
 800377c:	686c      	ldr	r4, [r5, #4]
 800377e:	69a3      	ldr	r3, [r4, #24]
 8003780:	60a3      	str	r3, [r4, #8]
 8003782:	89a3      	ldrh	r3, [r4, #12]
 8003784:	071a      	lsls	r2, r3, #28
 8003786:	d52f      	bpl.n	80037e8 <__swbuf_r+0x84>
 8003788:	6923      	ldr	r3, [r4, #16]
 800378a:	b36b      	cbz	r3, 80037e8 <__swbuf_r+0x84>
 800378c:	6923      	ldr	r3, [r4, #16]
 800378e:	6820      	ldr	r0, [r4, #0]
 8003790:	1ac0      	subs	r0, r0, r3
 8003792:	6963      	ldr	r3, [r4, #20]
 8003794:	b2f6      	uxtb	r6, r6
 8003796:	4283      	cmp	r3, r0
 8003798:	4637      	mov	r7, r6
 800379a:	dc04      	bgt.n	80037a6 <__swbuf_r+0x42>
 800379c:	4621      	mov	r1, r4
 800379e:	4628      	mov	r0, r5
 80037a0:	f000 f926 	bl	80039f0 <_fflush_r>
 80037a4:	bb30      	cbnz	r0, 80037f4 <__swbuf_r+0x90>
 80037a6:	68a3      	ldr	r3, [r4, #8]
 80037a8:	3b01      	subs	r3, #1
 80037aa:	60a3      	str	r3, [r4, #8]
 80037ac:	6823      	ldr	r3, [r4, #0]
 80037ae:	1c5a      	adds	r2, r3, #1
 80037b0:	6022      	str	r2, [r4, #0]
 80037b2:	701e      	strb	r6, [r3, #0]
 80037b4:	6963      	ldr	r3, [r4, #20]
 80037b6:	3001      	adds	r0, #1
 80037b8:	4283      	cmp	r3, r0
 80037ba:	d004      	beq.n	80037c6 <__swbuf_r+0x62>
 80037bc:	89a3      	ldrh	r3, [r4, #12]
 80037be:	07db      	lsls	r3, r3, #31
 80037c0:	d506      	bpl.n	80037d0 <__swbuf_r+0x6c>
 80037c2:	2e0a      	cmp	r6, #10
 80037c4:	d104      	bne.n	80037d0 <__swbuf_r+0x6c>
 80037c6:	4621      	mov	r1, r4
 80037c8:	4628      	mov	r0, r5
 80037ca:	f000 f911 	bl	80039f0 <_fflush_r>
 80037ce:	b988      	cbnz	r0, 80037f4 <__swbuf_r+0x90>
 80037d0:	4638      	mov	r0, r7
 80037d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80037d4:	4b0a      	ldr	r3, [pc, #40]	; (8003800 <__swbuf_r+0x9c>)
 80037d6:	429c      	cmp	r4, r3
 80037d8:	d101      	bne.n	80037de <__swbuf_r+0x7a>
 80037da:	68ac      	ldr	r4, [r5, #8]
 80037dc:	e7cf      	b.n	800377e <__swbuf_r+0x1a>
 80037de:	4b09      	ldr	r3, [pc, #36]	; (8003804 <__swbuf_r+0xa0>)
 80037e0:	429c      	cmp	r4, r3
 80037e2:	bf08      	it	eq
 80037e4:	68ec      	ldreq	r4, [r5, #12]
 80037e6:	e7ca      	b.n	800377e <__swbuf_r+0x1a>
 80037e8:	4621      	mov	r1, r4
 80037ea:	4628      	mov	r0, r5
 80037ec:	f000 f80c 	bl	8003808 <__swsetup_r>
 80037f0:	2800      	cmp	r0, #0
 80037f2:	d0cb      	beq.n	800378c <__swbuf_r+0x28>
 80037f4:	f04f 37ff 	mov.w	r7, #4294967295
 80037f8:	e7ea      	b.n	80037d0 <__swbuf_r+0x6c>
 80037fa:	bf00      	nop
 80037fc:	08004814 	.word	0x08004814
 8003800:	08004834 	.word	0x08004834
 8003804:	080047f4 	.word	0x080047f4

08003808 <__swsetup_r>:
 8003808:	4b32      	ldr	r3, [pc, #200]	; (80038d4 <__swsetup_r+0xcc>)
 800380a:	b570      	push	{r4, r5, r6, lr}
 800380c:	681d      	ldr	r5, [r3, #0]
 800380e:	4606      	mov	r6, r0
 8003810:	460c      	mov	r4, r1
 8003812:	b125      	cbz	r5, 800381e <__swsetup_r+0x16>
 8003814:	69ab      	ldr	r3, [r5, #24]
 8003816:	b913      	cbnz	r3, 800381e <__swsetup_r+0x16>
 8003818:	4628      	mov	r0, r5
 800381a:	f000 f97d 	bl	8003b18 <__sinit>
 800381e:	4b2e      	ldr	r3, [pc, #184]	; (80038d8 <__swsetup_r+0xd0>)
 8003820:	429c      	cmp	r4, r3
 8003822:	d10f      	bne.n	8003844 <__swsetup_r+0x3c>
 8003824:	686c      	ldr	r4, [r5, #4]
 8003826:	89a3      	ldrh	r3, [r4, #12]
 8003828:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800382c:	0719      	lsls	r1, r3, #28
 800382e:	d42c      	bmi.n	800388a <__swsetup_r+0x82>
 8003830:	06dd      	lsls	r5, r3, #27
 8003832:	d411      	bmi.n	8003858 <__swsetup_r+0x50>
 8003834:	2309      	movs	r3, #9
 8003836:	6033      	str	r3, [r6, #0]
 8003838:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800383c:	81a3      	strh	r3, [r4, #12]
 800383e:	f04f 30ff 	mov.w	r0, #4294967295
 8003842:	e03e      	b.n	80038c2 <__swsetup_r+0xba>
 8003844:	4b25      	ldr	r3, [pc, #148]	; (80038dc <__swsetup_r+0xd4>)
 8003846:	429c      	cmp	r4, r3
 8003848:	d101      	bne.n	800384e <__swsetup_r+0x46>
 800384a:	68ac      	ldr	r4, [r5, #8]
 800384c:	e7eb      	b.n	8003826 <__swsetup_r+0x1e>
 800384e:	4b24      	ldr	r3, [pc, #144]	; (80038e0 <__swsetup_r+0xd8>)
 8003850:	429c      	cmp	r4, r3
 8003852:	bf08      	it	eq
 8003854:	68ec      	ldreq	r4, [r5, #12]
 8003856:	e7e6      	b.n	8003826 <__swsetup_r+0x1e>
 8003858:	0758      	lsls	r0, r3, #29
 800385a:	d512      	bpl.n	8003882 <__swsetup_r+0x7a>
 800385c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800385e:	b141      	cbz	r1, 8003872 <__swsetup_r+0x6a>
 8003860:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003864:	4299      	cmp	r1, r3
 8003866:	d002      	beq.n	800386e <__swsetup_r+0x66>
 8003868:	4630      	mov	r0, r6
 800386a:	f000 fa5b 	bl	8003d24 <_free_r>
 800386e:	2300      	movs	r3, #0
 8003870:	6363      	str	r3, [r4, #52]	; 0x34
 8003872:	89a3      	ldrh	r3, [r4, #12]
 8003874:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003878:	81a3      	strh	r3, [r4, #12]
 800387a:	2300      	movs	r3, #0
 800387c:	6063      	str	r3, [r4, #4]
 800387e:	6923      	ldr	r3, [r4, #16]
 8003880:	6023      	str	r3, [r4, #0]
 8003882:	89a3      	ldrh	r3, [r4, #12]
 8003884:	f043 0308 	orr.w	r3, r3, #8
 8003888:	81a3      	strh	r3, [r4, #12]
 800388a:	6923      	ldr	r3, [r4, #16]
 800388c:	b94b      	cbnz	r3, 80038a2 <__swsetup_r+0x9a>
 800388e:	89a3      	ldrh	r3, [r4, #12]
 8003890:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003894:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003898:	d003      	beq.n	80038a2 <__swsetup_r+0x9a>
 800389a:	4621      	mov	r1, r4
 800389c:	4630      	mov	r0, r6
 800389e:	f000 fa01 	bl	8003ca4 <__smakebuf_r>
 80038a2:	89a0      	ldrh	r0, [r4, #12]
 80038a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80038a8:	f010 0301 	ands.w	r3, r0, #1
 80038ac:	d00a      	beq.n	80038c4 <__swsetup_r+0xbc>
 80038ae:	2300      	movs	r3, #0
 80038b0:	60a3      	str	r3, [r4, #8]
 80038b2:	6963      	ldr	r3, [r4, #20]
 80038b4:	425b      	negs	r3, r3
 80038b6:	61a3      	str	r3, [r4, #24]
 80038b8:	6923      	ldr	r3, [r4, #16]
 80038ba:	b943      	cbnz	r3, 80038ce <__swsetup_r+0xc6>
 80038bc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80038c0:	d1ba      	bne.n	8003838 <__swsetup_r+0x30>
 80038c2:	bd70      	pop	{r4, r5, r6, pc}
 80038c4:	0781      	lsls	r1, r0, #30
 80038c6:	bf58      	it	pl
 80038c8:	6963      	ldrpl	r3, [r4, #20]
 80038ca:	60a3      	str	r3, [r4, #8]
 80038cc:	e7f4      	b.n	80038b8 <__swsetup_r+0xb0>
 80038ce:	2000      	movs	r0, #0
 80038d0:	e7f7      	b.n	80038c2 <__swsetup_r+0xba>
 80038d2:	bf00      	nop
 80038d4:	2000000c 	.word	0x2000000c
 80038d8:	08004814 	.word	0x08004814
 80038dc:	08004834 	.word	0x08004834
 80038e0:	080047f4 	.word	0x080047f4

080038e4 <__sflush_r>:
 80038e4:	898a      	ldrh	r2, [r1, #12]
 80038e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80038ea:	4605      	mov	r5, r0
 80038ec:	0710      	lsls	r0, r2, #28
 80038ee:	460c      	mov	r4, r1
 80038f0:	d458      	bmi.n	80039a4 <__sflush_r+0xc0>
 80038f2:	684b      	ldr	r3, [r1, #4]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	dc05      	bgt.n	8003904 <__sflush_r+0x20>
 80038f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	dc02      	bgt.n	8003904 <__sflush_r+0x20>
 80038fe:	2000      	movs	r0, #0
 8003900:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003904:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003906:	2e00      	cmp	r6, #0
 8003908:	d0f9      	beq.n	80038fe <__sflush_r+0x1a>
 800390a:	2300      	movs	r3, #0
 800390c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003910:	682f      	ldr	r7, [r5, #0]
 8003912:	602b      	str	r3, [r5, #0]
 8003914:	d032      	beq.n	800397c <__sflush_r+0x98>
 8003916:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003918:	89a3      	ldrh	r3, [r4, #12]
 800391a:	075a      	lsls	r2, r3, #29
 800391c:	d505      	bpl.n	800392a <__sflush_r+0x46>
 800391e:	6863      	ldr	r3, [r4, #4]
 8003920:	1ac0      	subs	r0, r0, r3
 8003922:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003924:	b10b      	cbz	r3, 800392a <__sflush_r+0x46>
 8003926:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003928:	1ac0      	subs	r0, r0, r3
 800392a:	2300      	movs	r3, #0
 800392c:	4602      	mov	r2, r0
 800392e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003930:	6a21      	ldr	r1, [r4, #32]
 8003932:	4628      	mov	r0, r5
 8003934:	47b0      	blx	r6
 8003936:	1c43      	adds	r3, r0, #1
 8003938:	89a3      	ldrh	r3, [r4, #12]
 800393a:	d106      	bne.n	800394a <__sflush_r+0x66>
 800393c:	6829      	ldr	r1, [r5, #0]
 800393e:	291d      	cmp	r1, #29
 8003940:	d82c      	bhi.n	800399c <__sflush_r+0xb8>
 8003942:	4a2a      	ldr	r2, [pc, #168]	; (80039ec <__sflush_r+0x108>)
 8003944:	40ca      	lsrs	r2, r1
 8003946:	07d6      	lsls	r6, r2, #31
 8003948:	d528      	bpl.n	800399c <__sflush_r+0xb8>
 800394a:	2200      	movs	r2, #0
 800394c:	6062      	str	r2, [r4, #4]
 800394e:	04d9      	lsls	r1, r3, #19
 8003950:	6922      	ldr	r2, [r4, #16]
 8003952:	6022      	str	r2, [r4, #0]
 8003954:	d504      	bpl.n	8003960 <__sflush_r+0x7c>
 8003956:	1c42      	adds	r2, r0, #1
 8003958:	d101      	bne.n	800395e <__sflush_r+0x7a>
 800395a:	682b      	ldr	r3, [r5, #0]
 800395c:	b903      	cbnz	r3, 8003960 <__sflush_r+0x7c>
 800395e:	6560      	str	r0, [r4, #84]	; 0x54
 8003960:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003962:	602f      	str	r7, [r5, #0]
 8003964:	2900      	cmp	r1, #0
 8003966:	d0ca      	beq.n	80038fe <__sflush_r+0x1a>
 8003968:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800396c:	4299      	cmp	r1, r3
 800396e:	d002      	beq.n	8003976 <__sflush_r+0x92>
 8003970:	4628      	mov	r0, r5
 8003972:	f000 f9d7 	bl	8003d24 <_free_r>
 8003976:	2000      	movs	r0, #0
 8003978:	6360      	str	r0, [r4, #52]	; 0x34
 800397a:	e7c1      	b.n	8003900 <__sflush_r+0x1c>
 800397c:	6a21      	ldr	r1, [r4, #32]
 800397e:	2301      	movs	r3, #1
 8003980:	4628      	mov	r0, r5
 8003982:	47b0      	blx	r6
 8003984:	1c41      	adds	r1, r0, #1
 8003986:	d1c7      	bne.n	8003918 <__sflush_r+0x34>
 8003988:	682b      	ldr	r3, [r5, #0]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d0c4      	beq.n	8003918 <__sflush_r+0x34>
 800398e:	2b1d      	cmp	r3, #29
 8003990:	d001      	beq.n	8003996 <__sflush_r+0xb2>
 8003992:	2b16      	cmp	r3, #22
 8003994:	d101      	bne.n	800399a <__sflush_r+0xb6>
 8003996:	602f      	str	r7, [r5, #0]
 8003998:	e7b1      	b.n	80038fe <__sflush_r+0x1a>
 800399a:	89a3      	ldrh	r3, [r4, #12]
 800399c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039a0:	81a3      	strh	r3, [r4, #12]
 80039a2:	e7ad      	b.n	8003900 <__sflush_r+0x1c>
 80039a4:	690f      	ldr	r7, [r1, #16]
 80039a6:	2f00      	cmp	r7, #0
 80039a8:	d0a9      	beq.n	80038fe <__sflush_r+0x1a>
 80039aa:	0793      	lsls	r3, r2, #30
 80039ac:	680e      	ldr	r6, [r1, #0]
 80039ae:	bf08      	it	eq
 80039b0:	694b      	ldreq	r3, [r1, #20]
 80039b2:	600f      	str	r7, [r1, #0]
 80039b4:	bf18      	it	ne
 80039b6:	2300      	movne	r3, #0
 80039b8:	eba6 0807 	sub.w	r8, r6, r7
 80039bc:	608b      	str	r3, [r1, #8]
 80039be:	f1b8 0f00 	cmp.w	r8, #0
 80039c2:	dd9c      	ble.n	80038fe <__sflush_r+0x1a>
 80039c4:	6a21      	ldr	r1, [r4, #32]
 80039c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80039c8:	4643      	mov	r3, r8
 80039ca:	463a      	mov	r2, r7
 80039cc:	4628      	mov	r0, r5
 80039ce:	47b0      	blx	r6
 80039d0:	2800      	cmp	r0, #0
 80039d2:	dc06      	bgt.n	80039e2 <__sflush_r+0xfe>
 80039d4:	89a3      	ldrh	r3, [r4, #12]
 80039d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039da:	81a3      	strh	r3, [r4, #12]
 80039dc:	f04f 30ff 	mov.w	r0, #4294967295
 80039e0:	e78e      	b.n	8003900 <__sflush_r+0x1c>
 80039e2:	4407      	add	r7, r0
 80039e4:	eba8 0800 	sub.w	r8, r8, r0
 80039e8:	e7e9      	b.n	80039be <__sflush_r+0xda>
 80039ea:	bf00      	nop
 80039ec:	20400001 	.word	0x20400001

080039f0 <_fflush_r>:
 80039f0:	b538      	push	{r3, r4, r5, lr}
 80039f2:	690b      	ldr	r3, [r1, #16]
 80039f4:	4605      	mov	r5, r0
 80039f6:	460c      	mov	r4, r1
 80039f8:	b913      	cbnz	r3, 8003a00 <_fflush_r+0x10>
 80039fa:	2500      	movs	r5, #0
 80039fc:	4628      	mov	r0, r5
 80039fe:	bd38      	pop	{r3, r4, r5, pc}
 8003a00:	b118      	cbz	r0, 8003a0a <_fflush_r+0x1a>
 8003a02:	6983      	ldr	r3, [r0, #24]
 8003a04:	b90b      	cbnz	r3, 8003a0a <_fflush_r+0x1a>
 8003a06:	f000 f887 	bl	8003b18 <__sinit>
 8003a0a:	4b14      	ldr	r3, [pc, #80]	; (8003a5c <_fflush_r+0x6c>)
 8003a0c:	429c      	cmp	r4, r3
 8003a0e:	d11b      	bne.n	8003a48 <_fflush_r+0x58>
 8003a10:	686c      	ldr	r4, [r5, #4]
 8003a12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d0ef      	beq.n	80039fa <_fflush_r+0xa>
 8003a1a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003a1c:	07d0      	lsls	r0, r2, #31
 8003a1e:	d404      	bmi.n	8003a2a <_fflush_r+0x3a>
 8003a20:	0599      	lsls	r1, r3, #22
 8003a22:	d402      	bmi.n	8003a2a <_fflush_r+0x3a>
 8003a24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003a26:	f000 f915 	bl	8003c54 <__retarget_lock_acquire_recursive>
 8003a2a:	4628      	mov	r0, r5
 8003a2c:	4621      	mov	r1, r4
 8003a2e:	f7ff ff59 	bl	80038e4 <__sflush_r>
 8003a32:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003a34:	07da      	lsls	r2, r3, #31
 8003a36:	4605      	mov	r5, r0
 8003a38:	d4e0      	bmi.n	80039fc <_fflush_r+0xc>
 8003a3a:	89a3      	ldrh	r3, [r4, #12]
 8003a3c:	059b      	lsls	r3, r3, #22
 8003a3e:	d4dd      	bmi.n	80039fc <_fflush_r+0xc>
 8003a40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003a42:	f000 f908 	bl	8003c56 <__retarget_lock_release_recursive>
 8003a46:	e7d9      	b.n	80039fc <_fflush_r+0xc>
 8003a48:	4b05      	ldr	r3, [pc, #20]	; (8003a60 <_fflush_r+0x70>)
 8003a4a:	429c      	cmp	r4, r3
 8003a4c:	d101      	bne.n	8003a52 <_fflush_r+0x62>
 8003a4e:	68ac      	ldr	r4, [r5, #8]
 8003a50:	e7df      	b.n	8003a12 <_fflush_r+0x22>
 8003a52:	4b04      	ldr	r3, [pc, #16]	; (8003a64 <_fflush_r+0x74>)
 8003a54:	429c      	cmp	r4, r3
 8003a56:	bf08      	it	eq
 8003a58:	68ec      	ldreq	r4, [r5, #12]
 8003a5a:	e7da      	b.n	8003a12 <_fflush_r+0x22>
 8003a5c:	08004814 	.word	0x08004814
 8003a60:	08004834 	.word	0x08004834
 8003a64:	080047f4 	.word	0x080047f4

08003a68 <std>:
 8003a68:	2300      	movs	r3, #0
 8003a6a:	b510      	push	{r4, lr}
 8003a6c:	4604      	mov	r4, r0
 8003a6e:	e9c0 3300 	strd	r3, r3, [r0]
 8003a72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003a76:	6083      	str	r3, [r0, #8]
 8003a78:	8181      	strh	r1, [r0, #12]
 8003a7a:	6643      	str	r3, [r0, #100]	; 0x64
 8003a7c:	81c2      	strh	r2, [r0, #14]
 8003a7e:	6183      	str	r3, [r0, #24]
 8003a80:	4619      	mov	r1, r3
 8003a82:	2208      	movs	r2, #8
 8003a84:	305c      	adds	r0, #92	; 0x5c
 8003a86:	f7ff fd37 	bl	80034f8 <memset>
 8003a8a:	4b05      	ldr	r3, [pc, #20]	; (8003aa0 <std+0x38>)
 8003a8c:	6263      	str	r3, [r4, #36]	; 0x24
 8003a8e:	4b05      	ldr	r3, [pc, #20]	; (8003aa4 <std+0x3c>)
 8003a90:	62a3      	str	r3, [r4, #40]	; 0x28
 8003a92:	4b05      	ldr	r3, [pc, #20]	; (8003aa8 <std+0x40>)
 8003a94:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003a96:	4b05      	ldr	r3, [pc, #20]	; (8003aac <std+0x44>)
 8003a98:	6224      	str	r4, [r4, #32]
 8003a9a:	6323      	str	r3, [r4, #48]	; 0x30
 8003a9c:	bd10      	pop	{r4, pc}
 8003a9e:	bf00      	nop
 8003aa0:	080044e1 	.word	0x080044e1
 8003aa4:	08004503 	.word	0x08004503
 8003aa8:	0800453b 	.word	0x0800453b
 8003aac:	0800455f 	.word	0x0800455f

08003ab0 <_cleanup_r>:
 8003ab0:	4901      	ldr	r1, [pc, #4]	; (8003ab8 <_cleanup_r+0x8>)
 8003ab2:	f000 b8af 	b.w	8003c14 <_fwalk_reent>
 8003ab6:	bf00      	nop
 8003ab8:	080039f1 	.word	0x080039f1

08003abc <__sfmoreglue>:
 8003abc:	b570      	push	{r4, r5, r6, lr}
 8003abe:	2268      	movs	r2, #104	; 0x68
 8003ac0:	1e4d      	subs	r5, r1, #1
 8003ac2:	4355      	muls	r5, r2
 8003ac4:	460e      	mov	r6, r1
 8003ac6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003aca:	f000 f997 	bl	8003dfc <_malloc_r>
 8003ace:	4604      	mov	r4, r0
 8003ad0:	b140      	cbz	r0, 8003ae4 <__sfmoreglue+0x28>
 8003ad2:	2100      	movs	r1, #0
 8003ad4:	e9c0 1600 	strd	r1, r6, [r0]
 8003ad8:	300c      	adds	r0, #12
 8003ada:	60a0      	str	r0, [r4, #8]
 8003adc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003ae0:	f7ff fd0a 	bl	80034f8 <memset>
 8003ae4:	4620      	mov	r0, r4
 8003ae6:	bd70      	pop	{r4, r5, r6, pc}

08003ae8 <__sfp_lock_acquire>:
 8003ae8:	4801      	ldr	r0, [pc, #4]	; (8003af0 <__sfp_lock_acquire+0x8>)
 8003aea:	f000 b8b3 	b.w	8003c54 <__retarget_lock_acquire_recursive>
 8003aee:	bf00      	nop
 8003af0:	20000119 	.word	0x20000119

08003af4 <__sfp_lock_release>:
 8003af4:	4801      	ldr	r0, [pc, #4]	; (8003afc <__sfp_lock_release+0x8>)
 8003af6:	f000 b8ae 	b.w	8003c56 <__retarget_lock_release_recursive>
 8003afa:	bf00      	nop
 8003afc:	20000119 	.word	0x20000119

08003b00 <__sinit_lock_acquire>:
 8003b00:	4801      	ldr	r0, [pc, #4]	; (8003b08 <__sinit_lock_acquire+0x8>)
 8003b02:	f000 b8a7 	b.w	8003c54 <__retarget_lock_acquire_recursive>
 8003b06:	bf00      	nop
 8003b08:	2000011a 	.word	0x2000011a

08003b0c <__sinit_lock_release>:
 8003b0c:	4801      	ldr	r0, [pc, #4]	; (8003b14 <__sinit_lock_release+0x8>)
 8003b0e:	f000 b8a2 	b.w	8003c56 <__retarget_lock_release_recursive>
 8003b12:	bf00      	nop
 8003b14:	2000011a 	.word	0x2000011a

08003b18 <__sinit>:
 8003b18:	b510      	push	{r4, lr}
 8003b1a:	4604      	mov	r4, r0
 8003b1c:	f7ff fff0 	bl	8003b00 <__sinit_lock_acquire>
 8003b20:	69a3      	ldr	r3, [r4, #24]
 8003b22:	b11b      	cbz	r3, 8003b2c <__sinit+0x14>
 8003b24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b28:	f7ff bff0 	b.w	8003b0c <__sinit_lock_release>
 8003b2c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003b30:	6523      	str	r3, [r4, #80]	; 0x50
 8003b32:	4b13      	ldr	r3, [pc, #76]	; (8003b80 <__sinit+0x68>)
 8003b34:	4a13      	ldr	r2, [pc, #76]	; (8003b84 <__sinit+0x6c>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	62a2      	str	r2, [r4, #40]	; 0x28
 8003b3a:	42a3      	cmp	r3, r4
 8003b3c:	bf04      	itt	eq
 8003b3e:	2301      	moveq	r3, #1
 8003b40:	61a3      	streq	r3, [r4, #24]
 8003b42:	4620      	mov	r0, r4
 8003b44:	f000 f820 	bl	8003b88 <__sfp>
 8003b48:	6060      	str	r0, [r4, #4]
 8003b4a:	4620      	mov	r0, r4
 8003b4c:	f000 f81c 	bl	8003b88 <__sfp>
 8003b50:	60a0      	str	r0, [r4, #8]
 8003b52:	4620      	mov	r0, r4
 8003b54:	f000 f818 	bl	8003b88 <__sfp>
 8003b58:	2200      	movs	r2, #0
 8003b5a:	60e0      	str	r0, [r4, #12]
 8003b5c:	2104      	movs	r1, #4
 8003b5e:	6860      	ldr	r0, [r4, #4]
 8003b60:	f7ff ff82 	bl	8003a68 <std>
 8003b64:	68a0      	ldr	r0, [r4, #8]
 8003b66:	2201      	movs	r2, #1
 8003b68:	2109      	movs	r1, #9
 8003b6a:	f7ff ff7d 	bl	8003a68 <std>
 8003b6e:	68e0      	ldr	r0, [r4, #12]
 8003b70:	2202      	movs	r2, #2
 8003b72:	2112      	movs	r1, #18
 8003b74:	f7ff ff78 	bl	8003a68 <std>
 8003b78:	2301      	movs	r3, #1
 8003b7a:	61a3      	str	r3, [r4, #24]
 8003b7c:	e7d2      	b.n	8003b24 <__sinit+0xc>
 8003b7e:	bf00      	nop
 8003b80:	080046ec 	.word	0x080046ec
 8003b84:	08003ab1 	.word	0x08003ab1

08003b88 <__sfp>:
 8003b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b8a:	4607      	mov	r7, r0
 8003b8c:	f7ff ffac 	bl	8003ae8 <__sfp_lock_acquire>
 8003b90:	4b1e      	ldr	r3, [pc, #120]	; (8003c0c <__sfp+0x84>)
 8003b92:	681e      	ldr	r6, [r3, #0]
 8003b94:	69b3      	ldr	r3, [r6, #24]
 8003b96:	b913      	cbnz	r3, 8003b9e <__sfp+0x16>
 8003b98:	4630      	mov	r0, r6
 8003b9a:	f7ff ffbd 	bl	8003b18 <__sinit>
 8003b9e:	3648      	adds	r6, #72	; 0x48
 8003ba0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003ba4:	3b01      	subs	r3, #1
 8003ba6:	d503      	bpl.n	8003bb0 <__sfp+0x28>
 8003ba8:	6833      	ldr	r3, [r6, #0]
 8003baa:	b30b      	cbz	r3, 8003bf0 <__sfp+0x68>
 8003bac:	6836      	ldr	r6, [r6, #0]
 8003bae:	e7f7      	b.n	8003ba0 <__sfp+0x18>
 8003bb0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003bb4:	b9d5      	cbnz	r5, 8003bec <__sfp+0x64>
 8003bb6:	4b16      	ldr	r3, [pc, #88]	; (8003c10 <__sfp+0x88>)
 8003bb8:	60e3      	str	r3, [r4, #12]
 8003bba:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003bbe:	6665      	str	r5, [r4, #100]	; 0x64
 8003bc0:	f000 f847 	bl	8003c52 <__retarget_lock_init_recursive>
 8003bc4:	f7ff ff96 	bl	8003af4 <__sfp_lock_release>
 8003bc8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003bcc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003bd0:	6025      	str	r5, [r4, #0]
 8003bd2:	61a5      	str	r5, [r4, #24]
 8003bd4:	2208      	movs	r2, #8
 8003bd6:	4629      	mov	r1, r5
 8003bd8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003bdc:	f7ff fc8c 	bl	80034f8 <memset>
 8003be0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003be4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003be8:	4620      	mov	r0, r4
 8003bea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003bec:	3468      	adds	r4, #104	; 0x68
 8003bee:	e7d9      	b.n	8003ba4 <__sfp+0x1c>
 8003bf0:	2104      	movs	r1, #4
 8003bf2:	4638      	mov	r0, r7
 8003bf4:	f7ff ff62 	bl	8003abc <__sfmoreglue>
 8003bf8:	4604      	mov	r4, r0
 8003bfa:	6030      	str	r0, [r6, #0]
 8003bfc:	2800      	cmp	r0, #0
 8003bfe:	d1d5      	bne.n	8003bac <__sfp+0x24>
 8003c00:	f7ff ff78 	bl	8003af4 <__sfp_lock_release>
 8003c04:	230c      	movs	r3, #12
 8003c06:	603b      	str	r3, [r7, #0]
 8003c08:	e7ee      	b.n	8003be8 <__sfp+0x60>
 8003c0a:	bf00      	nop
 8003c0c:	080046ec 	.word	0x080046ec
 8003c10:	ffff0001 	.word	0xffff0001

08003c14 <_fwalk_reent>:
 8003c14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003c18:	4606      	mov	r6, r0
 8003c1a:	4688      	mov	r8, r1
 8003c1c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003c20:	2700      	movs	r7, #0
 8003c22:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003c26:	f1b9 0901 	subs.w	r9, r9, #1
 8003c2a:	d505      	bpl.n	8003c38 <_fwalk_reent+0x24>
 8003c2c:	6824      	ldr	r4, [r4, #0]
 8003c2e:	2c00      	cmp	r4, #0
 8003c30:	d1f7      	bne.n	8003c22 <_fwalk_reent+0xe>
 8003c32:	4638      	mov	r0, r7
 8003c34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003c38:	89ab      	ldrh	r3, [r5, #12]
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d907      	bls.n	8003c4e <_fwalk_reent+0x3a>
 8003c3e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003c42:	3301      	adds	r3, #1
 8003c44:	d003      	beq.n	8003c4e <_fwalk_reent+0x3a>
 8003c46:	4629      	mov	r1, r5
 8003c48:	4630      	mov	r0, r6
 8003c4a:	47c0      	blx	r8
 8003c4c:	4307      	orrs	r7, r0
 8003c4e:	3568      	adds	r5, #104	; 0x68
 8003c50:	e7e9      	b.n	8003c26 <_fwalk_reent+0x12>

08003c52 <__retarget_lock_init_recursive>:
 8003c52:	4770      	bx	lr

08003c54 <__retarget_lock_acquire_recursive>:
 8003c54:	4770      	bx	lr

08003c56 <__retarget_lock_release_recursive>:
 8003c56:	4770      	bx	lr

08003c58 <__swhatbuf_r>:
 8003c58:	b570      	push	{r4, r5, r6, lr}
 8003c5a:	460e      	mov	r6, r1
 8003c5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c60:	2900      	cmp	r1, #0
 8003c62:	b096      	sub	sp, #88	; 0x58
 8003c64:	4614      	mov	r4, r2
 8003c66:	461d      	mov	r5, r3
 8003c68:	da08      	bge.n	8003c7c <__swhatbuf_r+0x24>
 8003c6a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	602a      	str	r2, [r5, #0]
 8003c72:	061a      	lsls	r2, r3, #24
 8003c74:	d410      	bmi.n	8003c98 <__swhatbuf_r+0x40>
 8003c76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c7a:	e00e      	b.n	8003c9a <__swhatbuf_r+0x42>
 8003c7c:	466a      	mov	r2, sp
 8003c7e:	f000 fc95 	bl	80045ac <_fstat_r>
 8003c82:	2800      	cmp	r0, #0
 8003c84:	dbf1      	blt.n	8003c6a <__swhatbuf_r+0x12>
 8003c86:	9a01      	ldr	r2, [sp, #4]
 8003c88:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003c8c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003c90:	425a      	negs	r2, r3
 8003c92:	415a      	adcs	r2, r3
 8003c94:	602a      	str	r2, [r5, #0]
 8003c96:	e7ee      	b.n	8003c76 <__swhatbuf_r+0x1e>
 8003c98:	2340      	movs	r3, #64	; 0x40
 8003c9a:	2000      	movs	r0, #0
 8003c9c:	6023      	str	r3, [r4, #0]
 8003c9e:	b016      	add	sp, #88	; 0x58
 8003ca0:	bd70      	pop	{r4, r5, r6, pc}
	...

08003ca4 <__smakebuf_r>:
 8003ca4:	898b      	ldrh	r3, [r1, #12]
 8003ca6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003ca8:	079d      	lsls	r5, r3, #30
 8003caa:	4606      	mov	r6, r0
 8003cac:	460c      	mov	r4, r1
 8003cae:	d507      	bpl.n	8003cc0 <__smakebuf_r+0x1c>
 8003cb0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003cb4:	6023      	str	r3, [r4, #0]
 8003cb6:	6123      	str	r3, [r4, #16]
 8003cb8:	2301      	movs	r3, #1
 8003cba:	6163      	str	r3, [r4, #20]
 8003cbc:	b002      	add	sp, #8
 8003cbe:	bd70      	pop	{r4, r5, r6, pc}
 8003cc0:	ab01      	add	r3, sp, #4
 8003cc2:	466a      	mov	r2, sp
 8003cc4:	f7ff ffc8 	bl	8003c58 <__swhatbuf_r>
 8003cc8:	9900      	ldr	r1, [sp, #0]
 8003cca:	4605      	mov	r5, r0
 8003ccc:	4630      	mov	r0, r6
 8003cce:	f000 f895 	bl	8003dfc <_malloc_r>
 8003cd2:	b948      	cbnz	r0, 8003ce8 <__smakebuf_r+0x44>
 8003cd4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003cd8:	059a      	lsls	r2, r3, #22
 8003cda:	d4ef      	bmi.n	8003cbc <__smakebuf_r+0x18>
 8003cdc:	f023 0303 	bic.w	r3, r3, #3
 8003ce0:	f043 0302 	orr.w	r3, r3, #2
 8003ce4:	81a3      	strh	r3, [r4, #12]
 8003ce6:	e7e3      	b.n	8003cb0 <__smakebuf_r+0xc>
 8003ce8:	4b0d      	ldr	r3, [pc, #52]	; (8003d20 <__smakebuf_r+0x7c>)
 8003cea:	62b3      	str	r3, [r6, #40]	; 0x28
 8003cec:	89a3      	ldrh	r3, [r4, #12]
 8003cee:	6020      	str	r0, [r4, #0]
 8003cf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cf4:	81a3      	strh	r3, [r4, #12]
 8003cf6:	9b00      	ldr	r3, [sp, #0]
 8003cf8:	6163      	str	r3, [r4, #20]
 8003cfa:	9b01      	ldr	r3, [sp, #4]
 8003cfc:	6120      	str	r0, [r4, #16]
 8003cfe:	b15b      	cbz	r3, 8003d18 <__smakebuf_r+0x74>
 8003d00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003d04:	4630      	mov	r0, r6
 8003d06:	f000 fc63 	bl	80045d0 <_isatty_r>
 8003d0a:	b128      	cbz	r0, 8003d18 <__smakebuf_r+0x74>
 8003d0c:	89a3      	ldrh	r3, [r4, #12]
 8003d0e:	f023 0303 	bic.w	r3, r3, #3
 8003d12:	f043 0301 	orr.w	r3, r3, #1
 8003d16:	81a3      	strh	r3, [r4, #12]
 8003d18:	89a0      	ldrh	r0, [r4, #12]
 8003d1a:	4305      	orrs	r5, r0
 8003d1c:	81a5      	strh	r5, [r4, #12]
 8003d1e:	e7cd      	b.n	8003cbc <__smakebuf_r+0x18>
 8003d20:	08003ab1 	.word	0x08003ab1

08003d24 <_free_r>:
 8003d24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003d26:	2900      	cmp	r1, #0
 8003d28:	d044      	beq.n	8003db4 <_free_r+0x90>
 8003d2a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d2e:	9001      	str	r0, [sp, #4]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	f1a1 0404 	sub.w	r4, r1, #4
 8003d36:	bfb8      	it	lt
 8003d38:	18e4      	addlt	r4, r4, r3
 8003d3a:	f000 fc6b 	bl	8004614 <__malloc_lock>
 8003d3e:	4a1e      	ldr	r2, [pc, #120]	; (8003db8 <_free_r+0x94>)
 8003d40:	9801      	ldr	r0, [sp, #4]
 8003d42:	6813      	ldr	r3, [r2, #0]
 8003d44:	b933      	cbnz	r3, 8003d54 <_free_r+0x30>
 8003d46:	6063      	str	r3, [r4, #4]
 8003d48:	6014      	str	r4, [r2, #0]
 8003d4a:	b003      	add	sp, #12
 8003d4c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003d50:	f000 bc66 	b.w	8004620 <__malloc_unlock>
 8003d54:	42a3      	cmp	r3, r4
 8003d56:	d908      	bls.n	8003d6a <_free_r+0x46>
 8003d58:	6825      	ldr	r5, [r4, #0]
 8003d5a:	1961      	adds	r1, r4, r5
 8003d5c:	428b      	cmp	r3, r1
 8003d5e:	bf01      	itttt	eq
 8003d60:	6819      	ldreq	r1, [r3, #0]
 8003d62:	685b      	ldreq	r3, [r3, #4]
 8003d64:	1949      	addeq	r1, r1, r5
 8003d66:	6021      	streq	r1, [r4, #0]
 8003d68:	e7ed      	b.n	8003d46 <_free_r+0x22>
 8003d6a:	461a      	mov	r2, r3
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	b10b      	cbz	r3, 8003d74 <_free_r+0x50>
 8003d70:	42a3      	cmp	r3, r4
 8003d72:	d9fa      	bls.n	8003d6a <_free_r+0x46>
 8003d74:	6811      	ldr	r1, [r2, #0]
 8003d76:	1855      	adds	r5, r2, r1
 8003d78:	42a5      	cmp	r5, r4
 8003d7a:	d10b      	bne.n	8003d94 <_free_r+0x70>
 8003d7c:	6824      	ldr	r4, [r4, #0]
 8003d7e:	4421      	add	r1, r4
 8003d80:	1854      	adds	r4, r2, r1
 8003d82:	42a3      	cmp	r3, r4
 8003d84:	6011      	str	r1, [r2, #0]
 8003d86:	d1e0      	bne.n	8003d4a <_free_r+0x26>
 8003d88:	681c      	ldr	r4, [r3, #0]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	6053      	str	r3, [r2, #4]
 8003d8e:	4421      	add	r1, r4
 8003d90:	6011      	str	r1, [r2, #0]
 8003d92:	e7da      	b.n	8003d4a <_free_r+0x26>
 8003d94:	d902      	bls.n	8003d9c <_free_r+0x78>
 8003d96:	230c      	movs	r3, #12
 8003d98:	6003      	str	r3, [r0, #0]
 8003d9a:	e7d6      	b.n	8003d4a <_free_r+0x26>
 8003d9c:	6825      	ldr	r5, [r4, #0]
 8003d9e:	1961      	adds	r1, r4, r5
 8003da0:	428b      	cmp	r3, r1
 8003da2:	bf04      	itt	eq
 8003da4:	6819      	ldreq	r1, [r3, #0]
 8003da6:	685b      	ldreq	r3, [r3, #4]
 8003da8:	6063      	str	r3, [r4, #4]
 8003daa:	bf04      	itt	eq
 8003dac:	1949      	addeq	r1, r1, r5
 8003dae:	6021      	streq	r1, [r4, #0]
 8003db0:	6054      	str	r4, [r2, #4]
 8003db2:	e7ca      	b.n	8003d4a <_free_r+0x26>
 8003db4:	b003      	add	sp, #12
 8003db6:	bd30      	pop	{r4, r5, pc}
 8003db8:	2000011c 	.word	0x2000011c

08003dbc <sbrk_aligned>:
 8003dbc:	b570      	push	{r4, r5, r6, lr}
 8003dbe:	4e0e      	ldr	r6, [pc, #56]	; (8003df8 <sbrk_aligned+0x3c>)
 8003dc0:	460c      	mov	r4, r1
 8003dc2:	6831      	ldr	r1, [r6, #0]
 8003dc4:	4605      	mov	r5, r0
 8003dc6:	b911      	cbnz	r1, 8003dce <sbrk_aligned+0x12>
 8003dc8:	f000 fb7a 	bl	80044c0 <_sbrk_r>
 8003dcc:	6030      	str	r0, [r6, #0]
 8003dce:	4621      	mov	r1, r4
 8003dd0:	4628      	mov	r0, r5
 8003dd2:	f000 fb75 	bl	80044c0 <_sbrk_r>
 8003dd6:	1c43      	adds	r3, r0, #1
 8003dd8:	d00a      	beq.n	8003df0 <sbrk_aligned+0x34>
 8003dda:	1cc4      	adds	r4, r0, #3
 8003ddc:	f024 0403 	bic.w	r4, r4, #3
 8003de0:	42a0      	cmp	r0, r4
 8003de2:	d007      	beq.n	8003df4 <sbrk_aligned+0x38>
 8003de4:	1a21      	subs	r1, r4, r0
 8003de6:	4628      	mov	r0, r5
 8003de8:	f000 fb6a 	bl	80044c0 <_sbrk_r>
 8003dec:	3001      	adds	r0, #1
 8003dee:	d101      	bne.n	8003df4 <sbrk_aligned+0x38>
 8003df0:	f04f 34ff 	mov.w	r4, #4294967295
 8003df4:	4620      	mov	r0, r4
 8003df6:	bd70      	pop	{r4, r5, r6, pc}
 8003df8:	20000120 	.word	0x20000120

08003dfc <_malloc_r>:
 8003dfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e00:	1ccd      	adds	r5, r1, #3
 8003e02:	f025 0503 	bic.w	r5, r5, #3
 8003e06:	3508      	adds	r5, #8
 8003e08:	2d0c      	cmp	r5, #12
 8003e0a:	bf38      	it	cc
 8003e0c:	250c      	movcc	r5, #12
 8003e0e:	2d00      	cmp	r5, #0
 8003e10:	4607      	mov	r7, r0
 8003e12:	db01      	blt.n	8003e18 <_malloc_r+0x1c>
 8003e14:	42a9      	cmp	r1, r5
 8003e16:	d905      	bls.n	8003e24 <_malloc_r+0x28>
 8003e18:	230c      	movs	r3, #12
 8003e1a:	603b      	str	r3, [r7, #0]
 8003e1c:	2600      	movs	r6, #0
 8003e1e:	4630      	mov	r0, r6
 8003e20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e24:	4e2e      	ldr	r6, [pc, #184]	; (8003ee0 <_malloc_r+0xe4>)
 8003e26:	f000 fbf5 	bl	8004614 <__malloc_lock>
 8003e2a:	6833      	ldr	r3, [r6, #0]
 8003e2c:	461c      	mov	r4, r3
 8003e2e:	bb34      	cbnz	r4, 8003e7e <_malloc_r+0x82>
 8003e30:	4629      	mov	r1, r5
 8003e32:	4638      	mov	r0, r7
 8003e34:	f7ff ffc2 	bl	8003dbc <sbrk_aligned>
 8003e38:	1c43      	adds	r3, r0, #1
 8003e3a:	4604      	mov	r4, r0
 8003e3c:	d14d      	bne.n	8003eda <_malloc_r+0xde>
 8003e3e:	6834      	ldr	r4, [r6, #0]
 8003e40:	4626      	mov	r6, r4
 8003e42:	2e00      	cmp	r6, #0
 8003e44:	d140      	bne.n	8003ec8 <_malloc_r+0xcc>
 8003e46:	6823      	ldr	r3, [r4, #0]
 8003e48:	4631      	mov	r1, r6
 8003e4a:	4638      	mov	r0, r7
 8003e4c:	eb04 0803 	add.w	r8, r4, r3
 8003e50:	f000 fb36 	bl	80044c0 <_sbrk_r>
 8003e54:	4580      	cmp	r8, r0
 8003e56:	d13a      	bne.n	8003ece <_malloc_r+0xd2>
 8003e58:	6821      	ldr	r1, [r4, #0]
 8003e5a:	3503      	adds	r5, #3
 8003e5c:	1a6d      	subs	r5, r5, r1
 8003e5e:	f025 0503 	bic.w	r5, r5, #3
 8003e62:	3508      	adds	r5, #8
 8003e64:	2d0c      	cmp	r5, #12
 8003e66:	bf38      	it	cc
 8003e68:	250c      	movcc	r5, #12
 8003e6a:	4629      	mov	r1, r5
 8003e6c:	4638      	mov	r0, r7
 8003e6e:	f7ff ffa5 	bl	8003dbc <sbrk_aligned>
 8003e72:	3001      	adds	r0, #1
 8003e74:	d02b      	beq.n	8003ece <_malloc_r+0xd2>
 8003e76:	6823      	ldr	r3, [r4, #0]
 8003e78:	442b      	add	r3, r5
 8003e7a:	6023      	str	r3, [r4, #0]
 8003e7c:	e00e      	b.n	8003e9c <_malloc_r+0xa0>
 8003e7e:	6822      	ldr	r2, [r4, #0]
 8003e80:	1b52      	subs	r2, r2, r5
 8003e82:	d41e      	bmi.n	8003ec2 <_malloc_r+0xc6>
 8003e84:	2a0b      	cmp	r2, #11
 8003e86:	d916      	bls.n	8003eb6 <_malloc_r+0xba>
 8003e88:	1961      	adds	r1, r4, r5
 8003e8a:	42a3      	cmp	r3, r4
 8003e8c:	6025      	str	r5, [r4, #0]
 8003e8e:	bf18      	it	ne
 8003e90:	6059      	strne	r1, [r3, #4]
 8003e92:	6863      	ldr	r3, [r4, #4]
 8003e94:	bf08      	it	eq
 8003e96:	6031      	streq	r1, [r6, #0]
 8003e98:	5162      	str	r2, [r4, r5]
 8003e9a:	604b      	str	r3, [r1, #4]
 8003e9c:	4638      	mov	r0, r7
 8003e9e:	f104 060b 	add.w	r6, r4, #11
 8003ea2:	f000 fbbd 	bl	8004620 <__malloc_unlock>
 8003ea6:	f026 0607 	bic.w	r6, r6, #7
 8003eaa:	1d23      	adds	r3, r4, #4
 8003eac:	1af2      	subs	r2, r6, r3
 8003eae:	d0b6      	beq.n	8003e1e <_malloc_r+0x22>
 8003eb0:	1b9b      	subs	r3, r3, r6
 8003eb2:	50a3      	str	r3, [r4, r2]
 8003eb4:	e7b3      	b.n	8003e1e <_malloc_r+0x22>
 8003eb6:	6862      	ldr	r2, [r4, #4]
 8003eb8:	42a3      	cmp	r3, r4
 8003eba:	bf0c      	ite	eq
 8003ebc:	6032      	streq	r2, [r6, #0]
 8003ebe:	605a      	strne	r2, [r3, #4]
 8003ec0:	e7ec      	b.n	8003e9c <_malloc_r+0xa0>
 8003ec2:	4623      	mov	r3, r4
 8003ec4:	6864      	ldr	r4, [r4, #4]
 8003ec6:	e7b2      	b.n	8003e2e <_malloc_r+0x32>
 8003ec8:	4634      	mov	r4, r6
 8003eca:	6876      	ldr	r6, [r6, #4]
 8003ecc:	e7b9      	b.n	8003e42 <_malloc_r+0x46>
 8003ece:	230c      	movs	r3, #12
 8003ed0:	603b      	str	r3, [r7, #0]
 8003ed2:	4638      	mov	r0, r7
 8003ed4:	f000 fba4 	bl	8004620 <__malloc_unlock>
 8003ed8:	e7a1      	b.n	8003e1e <_malloc_r+0x22>
 8003eda:	6025      	str	r5, [r4, #0]
 8003edc:	e7de      	b.n	8003e9c <_malloc_r+0xa0>
 8003ede:	bf00      	nop
 8003ee0:	2000011c 	.word	0x2000011c

08003ee4 <__sfputc_r>:
 8003ee4:	6893      	ldr	r3, [r2, #8]
 8003ee6:	3b01      	subs	r3, #1
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	b410      	push	{r4}
 8003eec:	6093      	str	r3, [r2, #8]
 8003eee:	da08      	bge.n	8003f02 <__sfputc_r+0x1e>
 8003ef0:	6994      	ldr	r4, [r2, #24]
 8003ef2:	42a3      	cmp	r3, r4
 8003ef4:	db01      	blt.n	8003efa <__sfputc_r+0x16>
 8003ef6:	290a      	cmp	r1, #10
 8003ef8:	d103      	bne.n	8003f02 <__sfputc_r+0x1e>
 8003efa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003efe:	f7ff bc31 	b.w	8003764 <__swbuf_r>
 8003f02:	6813      	ldr	r3, [r2, #0]
 8003f04:	1c58      	adds	r0, r3, #1
 8003f06:	6010      	str	r0, [r2, #0]
 8003f08:	7019      	strb	r1, [r3, #0]
 8003f0a:	4608      	mov	r0, r1
 8003f0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003f10:	4770      	bx	lr

08003f12 <__sfputs_r>:
 8003f12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f14:	4606      	mov	r6, r0
 8003f16:	460f      	mov	r7, r1
 8003f18:	4614      	mov	r4, r2
 8003f1a:	18d5      	adds	r5, r2, r3
 8003f1c:	42ac      	cmp	r4, r5
 8003f1e:	d101      	bne.n	8003f24 <__sfputs_r+0x12>
 8003f20:	2000      	movs	r0, #0
 8003f22:	e007      	b.n	8003f34 <__sfputs_r+0x22>
 8003f24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f28:	463a      	mov	r2, r7
 8003f2a:	4630      	mov	r0, r6
 8003f2c:	f7ff ffda 	bl	8003ee4 <__sfputc_r>
 8003f30:	1c43      	adds	r3, r0, #1
 8003f32:	d1f3      	bne.n	8003f1c <__sfputs_r+0xa>
 8003f34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003f38 <_vfiprintf_r>:
 8003f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f3c:	460d      	mov	r5, r1
 8003f3e:	b09d      	sub	sp, #116	; 0x74
 8003f40:	4614      	mov	r4, r2
 8003f42:	4698      	mov	r8, r3
 8003f44:	4606      	mov	r6, r0
 8003f46:	b118      	cbz	r0, 8003f50 <_vfiprintf_r+0x18>
 8003f48:	6983      	ldr	r3, [r0, #24]
 8003f4a:	b90b      	cbnz	r3, 8003f50 <_vfiprintf_r+0x18>
 8003f4c:	f7ff fde4 	bl	8003b18 <__sinit>
 8003f50:	4b89      	ldr	r3, [pc, #548]	; (8004178 <_vfiprintf_r+0x240>)
 8003f52:	429d      	cmp	r5, r3
 8003f54:	d11b      	bne.n	8003f8e <_vfiprintf_r+0x56>
 8003f56:	6875      	ldr	r5, [r6, #4]
 8003f58:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003f5a:	07d9      	lsls	r1, r3, #31
 8003f5c:	d405      	bmi.n	8003f6a <_vfiprintf_r+0x32>
 8003f5e:	89ab      	ldrh	r3, [r5, #12]
 8003f60:	059a      	lsls	r2, r3, #22
 8003f62:	d402      	bmi.n	8003f6a <_vfiprintf_r+0x32>
 8003f64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003f66:	f7ff fe75 	bl	8003c54 <__retarget_lock_acquire_recursive>
 8003f6a:	89ab      	ldrh	r3, [r5, #12]
 8003f6c:	071b      	lsls	r3, r3, #28
 8003f6e:	d501      	bpl.n	8003f74 <_vfiprintf_r+0x3c>
 8003f70:	692b      	ldr	r3, [r5, #16]
 8003f72:	b9eb      	cbnz	r3, 8003fb0 <_vfiprintf_r+0x78>
 8003f74:	4629      	mov	r1, r5
 8003f76:	4630      	mov	r0, r6
 8003f78:	f7ff fc46 	bl	8003808 <__swsetup_r>
 8003f7c:	b1c0      	cbz	r0, 8003fb0 <_vfiprintf_r+0x78>
 8003f7e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003f80:	07dc      	lsls	r4, r3, #31
 8003f82:	d50e      	bpl.n	8003fa2 <_vfiprintf_r+0x6a>
 8003f84:	f04f 30ff 	mov.w	r0, #4294967295
 8003f88:	b01d      	add	sp, #116	; 0x74
 8003f8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f8e:	4b7b      	ldr	r3, [pc, #492]	; (800417c <_vfiprintf_r+0x244>)
 8003f90:	429d      	cmp	r5, r3
 8003f92:	d101      	bne.n	8003f98 <_vfiprintf_r+0x60>
 8003f94:	68b5      	ldr	r5, [r6, #8]
 8003f96:	e7df      	b.n	8003f58 <_vfiprintf_r+0x20>
 8003f98:	4b79      	ldr	r3, [pc, #484]	; (8004180 <_vfiprintf_r+0x248>)
 8003f9a:	429d      	cmp	r5, r3
 8003f9c:	bf08      	it	eq
 8003f9e:	68f5      	ldreq	r5, [r6, #12]
 8003fa0:	e7da      	b.n	8003f58 <_vfiprintf_r+0x20>
 8003fa2:	89ab      	ldrh	r3, [r5, #12]
 8003fa4:	0598      	lsls	r0, r3, #22
 8003fa6:	d4ed      	bmi.n	8003f84 <_vfiprintf_r+0x4c>
 8003fa8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003faa:	f7ff fe54 	bl	8003c56 <__retarget_lock_release_recursive>
 8003fae:	e7e9      	b.n	8003f84 <_vfiprintf_r+0x4c>
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	9309      	str	r3, [sp, #36]	; 0x24
 8003fb4:	2320      	movs	r3, #32
 8003fb6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003fba:	f8cd 800c 	str.w	r8, [sp, #12]
 8003fbe:	2330      	movs	r3, #48	; 0x30
 8003fc0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004184 <_vfiprintf_r+0x24c>
 8003fc4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003fc8:	f04f 0901 	mov.w	r9, #1
 8003fcc:	4623      	mov	r3, r4
 8003fce:	469a      	mov	sl, r3
 8003fd0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003fd4:	b10a      	cbz	r2, 8003fda <_vfiprintf_r+0xa2>
 8003fd6:	2a25      	cmp	r2, #37	; 0x25
 8003fd8:	d1f9      	bne.n	8003fce <_vfiprintf_r+0x96>
 8003fda:	ebba 0b04 	subs.w	fp, sl, r4
 8003fde:	d00b      	beq.n	8003ff8 <_vfiprintf_r+0xc0>
 8003fe0:	465b      	mov	r3, fp
 8003fe2:	4622      	mov	r2, r4
 8003fe4:	4629      	mov	r1, r5
 8003fe6:	4630      	mov	r0, r6
 8003fe8:	f7ff ff93 	bl	8003f12 <__sfputs_r>
 8003fec:	3001      	adds	r0, #1
 8003fee:	f000 80aa 	beq.w	8004146 <_vfiprintf_r+0x20e>
 8003ff2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003ff4:	445a      	add	r2, fp
 8003ff6:	9209      	str	r2, [sp, #36]	; 0x24
 8003ff8:	f89a 3000 	ldrb.w	r3, [sl]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	f000 80a2 	beq.w	8004146 <_vfiprintf_r+0x20e>
 8004002:	2300      	movs	r3, #0
 8004004:	f04f 32ff 	mov.w	r2, #4294967295
 8004008:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800400c:	f10a 0a01 	add.w	sl, sl, #1
 8004010:	9304      	str	r3, [sp, #16]
 8004012:	9307      	str	r3, [sp, #28]
 8004014:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004018:	931a      	str	r3, [sp, #104]	; 0x68
 800401a:	4654      	mov	r4, sl
 800401c:	2205      	movs	r2, #5
 800401e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004022:	4858      	ldr	r0, [pc, #352]	; (8004184 <_vfiprintf_r+0x24c>)
 8004024:	f7fc f8dc 	bl	80001e0 <memchr>
 8004028:	9a04      	ldr	r2, [sp, #16]
 800402a:	b9d8      	cbnz	r0, 8004064 <_vfiprintf_r+0x12c>
 800402c:	06d1      	lsls	r1, r2, #27
 800402e:	bf44      	itt	mi
 8004030:	2320      	movmi	r3, #32
 8004032:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004036:	0713      	lsls	r3, r2, #28
 8004038:	bf44      	itt	mi
 800403a:	232b      	movmi	r3, #43	; 0x2b
 800403c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004040:	f89a 3000 	ldrb.w	r3, [sl]
 8004044:	2b2a      	cmp	r3, #42	; 0x2a
 8004046:	d015      	beq.n	8004074 <_vfiprintf_r+0x13c>
 8004048:	9a07      	ldr	r2, [sp, #28]
 800404a:	4654      	mov	r4, sl
 800404c:	2000      	movs	r0, #0
 800404e:	f04f 0c0a 	mov.w	ip, #10
 8004052:	4621      	mov	r1, r4
 8004054:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004058:	3b30      	subs	r3, #48	; 0x30
 800405a:	2b09      	cmp	r3, #9
 800405c:	d94e      	bls.n	80040fc <_vfiprintf_r+0x1c4>
 800405e:	b1b0      	cbz	r0, 800408e <_vfiprintf_r+0x156>
 8004060:	9207      	str	r2, [sp, #28]
 8004062:	e014      	b.n	800408e <_vfiprintf_r+0x156>
 8004064:	eba0 0308 	sub.w	r3, r0, r8
 8004068:	fa09 f303 	lsl.w	r3, r9, r3
 800406c:	4313      	orrs	r3, r2
 800406e:	9304      	str	r3, [sp, #16]
 8004070:	46a2      	mov	sl, r4
 8004072:	e7d2      	b.n	800401a <_vfiprintf_r+0xe2>
 8004074:	9b03      	ldr	r3, [sp, #12]
 8004076:	1d19      	adds	r1, r3, #4
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	9103      	str	r1, [sp, #12]
 800407c:	2b00      	cmp	r3, #0
 800407e:	bfbb      	ittet	lt
 8004080:	425b      	neglt	r3, r3
 8004082:	f042 0202 	orrlt.w	r2, r2, #2
 8004086:	9307      	strge	r3, [sp, #28]
 8004088:	9307      	strlt	r3, [sp, #28]
 800408a:	bfb8      	it	lt
 800408c:	9204      	strlt	r2, [sp, #16]
 800408e:	7823      	ldrb	r3, [r4, #0]
 8004090:	2b2e      	cmp	r3, #46	; 0x2e
 8004092:	d10c      	bne.n	80040ae <_vfiprintf_r+0x176>
 8004094:	7863      	ldrb	r3, [r4, #1]
 8004096:	2b2a      	cmp	r3, #42	; 0x2a
 8004098:	d135      	bne.n	8004106 <_vfiprintf_r+0x1ce>
 800409a:	9b03      	ldr	r3, [sp, #12]
 800409c:	1d1a      	adds	r2, r3, #4
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	9203      	str	r2, [sp, #12]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	bfb8      	it	lt
 80040a6:	f04f 33ff 	movlt.w	r3, #4294967295
 80040aa:	3402      	adds	r4, #2
 80040ac:	9305      	str	r3, [sp, #20]
 80040ae:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004194 <_vfiprintf_r+0x25c>
 80040b2:	7821      	ldrb	r1, [r4, #0]
 80040b4:	2203      	movs	r2, #3
 80040b6:	4650      	mov	r0, sl
 80040b8:	f7fc f892 	bl	80001e0 <memchr>
 80040bc:	b140      	cbz	r0, 80040d0 <_vfiprintf_r+0x198>
 80040be:	2340      	movs	r3, #64	; 0x40
 80040c0:	eba0 000a 	sub.w	r0, r0, sl
 80040c4:	fa03 f000 	lsl.w	r0, r3, r0
 80040c8:	9b04      	ldr	r3, [sp, #16]
 80040ca:	4303      	orrs	r3, r0
 80040cc:	3401      	adds	r4, #1
 80040ce:	9304      	str	r3, [sp, #16]
 80040d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80040d4:	482c      	ldr	r0, [pc, #176]	; (8004188 <_vfiprintf_r+0x250>)
 80040d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80040da:	2206      	movs	r2, #6
 80040dc:	f7fc f880 	bl	80001e0 <memchr>
 80040e0:	2800      	cmp	r0, #0
 80040e2:	d03f      	beq.n	8004164 <_vfiprintf_r+0x22c>
 80040e4:	4b29      	ldr	r3, [pc, #164]	; (800418c <_vfiprintf_r+0x254>)
 80040e6:	bb1b      	cbnz	r3, 8004130 <_vfiprintf_r+0x1f8>
 80040e8:	9b03      	ldr	r3, [sp, #12]
 80040ea:	3307      	adds	r3, #7
 80040ec:	f023 0307 	bic.w	r3, r3, #7
 80040f0:	3308      	adds	r3, #8
 80040f2:	9303      	str	r3, [sp, #12]
 80040f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80040f6:	443b      	add	r3, r7
 80040f8:	9309      	str	r3, [sp, #36]	; 0x24
 80040fa:	e767      	b.n	8003fcc <_vfiprintf_r+0x94>
 80040fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8004100:	460c      	mov	r4, r1
 8004102:	2001      	movs	r0, #1
 8004104:	e7a5      	b.n	8004052 <_vfiprintf_r+0x11a>
 8004106:	2300      	movs	r3, #0
 8004108:	3401      	adds	r4, #1
 800410a:	9305      	str	r3, [sp, #20]
 800410c:	4619      	mov	r1, r3
 800410e:	f04f 0c0a 	mov.w	ip, #10
 8004112:	4620      	mov	r0, r4
 8004114:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004118:	3a30      	subs	r2, #48	; 0x30
 800411a:	2a09      	cmp	r2, #9
 800411c:	d903      	bls.n	8004126 <_vfiprintf_r+0x1ee>
 800411e:	2b00      	cmp	r3, #0
 8004120:	d0c5      	beq.n	80040ae <_vfiprintf_r+0x176>
 8004122:	9105      	str	r1, [sp, #20]
 8004124:	e7c3      	b.n	80040ae <_vfiprintf_r+0x176>
 8004126:	fb0c 2101 	mla	r1, ip, r1, r2
 800412a:	4604      	mov	r4, r0
 800412c:	2301      	movs	r3, #1
 800412e:	e7f0      	b.n	8004112 <_vfiprintf_r+0x1da>
 8004130:	ab03      	add	r3, sp, #12
 8004132:	9300      	str	r3, [sp, #0]
 8004134:	462a      	mov	r2, r5
 8004136:	4b16      	ldr	r3, [pc, #88]	; (8004190 <_vfiprintf_r+0x258>)
 8004138:	a904      	add	r1, sp, #16
 800413a:	4630      	mov	r0, r6
 800413c:	f3af 8000 	nop.w
 8004140:	4607      	mov	r7, r0
 8004142:	1c78      	adds	r0, r7, #1
 8004144:	d1d6      	bne.n	80040f4 <_vfiprintf_r+0x1bc>
 8004146:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004148:	07d9      	lsls	r1, r3, #31
 800414a:	d405      	bmi.n	8004158 <_vfiprintf_r+0x220>
 800414c:	89ab      	ldrh	r3, [r5, #12]
 800414e:	059a      	lsls	r2, r3, #22
 8004150:	d402      	bmi.n	8004158 <_vfiprintf_r+0x220>
 8004152:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004154:	f7ff fd7f 	bl	8003c56 <__retarget_lock_release_recursive>
 8004158:	89ab      	ldrh	r3, [r5, #12]
 800415a:	065b      	lsls	r3, r3, #25
 800415c:	f53f af12 	bmi.w	8003f84 <_vfiprintf_r+0x4c>
 8004160:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004162:	e711      	b.n	8003f88 <_vfiprintf_r+0x50>
 8004164:	ab03      	add	r3, sp, #12
 8004166:	9300      	str	r3, [sp, #0]
 8004168:	462a      	mov	r2, r5
 800416a:	4b09      	ldr	r3, [pc, #36]	; (8004190 <_vfiprintf_r+0x258>)
 800416c:	a904      	add	r1, sp, #16
 800416e:	4630      	mov	r0, r6
 8004170:	f000 f880 	bl	8004274 <_printf_i>
 8004174:	e7e4      	b.n	8004140 <_vfiprintf_r+0x208>
 8004176:	bf00      	nop
 8004178:	08004814 	.word	0x08004814
 800417c:	08004834 	.word	0x08004834
 8004180:	080047f4 	.word	0x080047f4
 8004184:	08004854 	.word	0x08004854
 8004188:	0800485e 	.word	0x0800485e
 800418c:	00000000 	.word	0x00000000
 8004190:	08003f13 	.word	0x08003f13
 8004194:	0800485a 	.word	0x0800485a

08004198 <_printf_common>:
 8004198:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800419c:	4616      	mov	r6, r2
 800419e:	4699      	mov	r9, r3
 80041a0:	688a      	ldr	r2, [r1, #8]
 80041a2:	690b      	ldr	r3, [r1, #16]
 80041a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80041a8:	4293      	cmp	r3, r2
 80041aa:	bfb8      	it	lt
 80041ac:	4613      	movlt	r3, r2
 80041ae:	6033      	str	r3, [r6, #0]
 80041b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80041b4:	4607      	mov	r7, r0
 80041b6:	460c      	mov	r4, r1
 80041b8:	b10a      	cbz	r2, 80041be <_printf_common+0x26>
 80041ba:	3301      	adds	r3, #1
 80041bc:	6033      	str	r3, [r6, #0]
 80041be:	6823      	ldr	r3, [r4, #0]
 80041c0:	0699      	lsls	r1, r3, #26
 80041c2:	bf42      	ittt	mi
 80041c4:	6833      	ldrmi	r3, [r6, #0]
 80041c6:	3302      	addmi	r3, #2
 80041c8:	6033      	strmi	r3, [r6, #0]
 80041ca:	6825      	ldr	r5, [r4, #0]
 80041cc:	f015 0506 	ands.w	r5, r5, #6
 80041d0:	d106      	bne.n	80041e0 <_printf_common+0x48>
 80041d2:	f104 0a19 	add.w	sl, r4, #25
 80041d6:	68e3      	ldr	r3, [r4, #12]
 80041d8:	6832      	ldr	r2, [r6, #0]
 80041da:	1a9b      	subs	r3, r3, r2
 80041dc:	42ab      	cmp	r3, r5
 80041de:	dc26      	bgt.n	800422e <_printf_common+0x96>
 80041e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80041e4:	1e13      	subs	r3, r2, #0
 80041e6:	6822      	ldr	r2, [r4, #0]
 80041e8:	bf18      	it	ne
 80041ea:	2301      	movne	r3, #1
 80041ec:	0692      	lsls	r2, r2, #26
 80041ee:	d42b      	bmi.n	8004248 <_printf_common+0xb0>
 80041f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80041f4:	4649      	mov	r1, r9
 80041f6:	4638      	mov	r0, r7
 80041f8:	47c0      	blx	r8
 80041fa:	3001      	adds	r0, #1
 80041fc:	d01e      	beq.n	800423c <_printf_common+0xa4>
 80041fe:	6823      	ldr	r3, [r4, #0]
 8004200:	68e5      	ldr	r5, [r4, #12]
 8004202:	6832      	ldr	r2, [r6, #0]
 8004204:	f003 0306 	and.w	r3, r3, #6
 8004208:	2b04      	cmp	r3, #4
 800420a:	bf08      	it	eq
 800420c:	1aad      	subeq	r5, r5, r2
 800420e:	68a3      	ldr	r3, [r4, #8]
 8004210:	6922      	ldr	r2, [r4, #16]
 8004212:	bf0c      	ite	eq
 8004214:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004218:	2500      	movne	r5, #0
 800421a:	4293      	cmp	r3, r2
 800421c:	bfc4      	itt	gt
 800421e:	1a9b      	subgt	r3, r3, r2
 8004220:	18ed      	addgt	r5, r5, r3
 8004222:	2600      	movs	r6, #0
 8004224:	341a      	adds	r4, #26
 8004226:	42b5      	cmp	r5, r6
 8004228:	d11a      	bne.n	8004260 <_printf_common+0xc8>
 800422a:	2000      	movs	r0, #0
 800422c:	e008      	b.n	8004240 <_printf_common+0xa8>
 800422e:	2301      	movs	r3, #1
 8004230:	4652      	mov	r2, sl
 8004232:	4649      	mov	r1, r9
 8004234:	4638      	mov	r0, r7
 8004236:	47c0      	blx	r8
 8004238:	3001      	adds	r0, #1
 800423a:	d103      	bne.n	8004244 <_printf_common+0xac>
 800423c:	f04f 30ff 	mov.w	r0, #4294967295
 8004240:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004244:	3501      	adds	r5, #1
 8004246:	e7c6      	b.n	80041d6 <_printf_common+0x3e>
 8004248:	18e1      	adds	r1, r4, r3
 800424a:	1c5a      	adds	r2, r3, #1
 800424c:	2030      	movs	r0, #48	; 0x30
 800424e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004252:	4422      	add	r2, r4
 8004254:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004258:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800425c:	3302      	adds	r3, #2
 800425e:	e7c7      	b.n	80041f0 <_printf_common+0x58>
 8004260:	2301      	movs	r3, #1
 8004262:	4622      	mov	r2, r4
 8004264:	4649      	mov	r1, r9
 8004266:	4638      	mov	r0, r7
 8004268:	47c0      	blx	r8
 800426a:	3001      	adds	r0, #1
 800426c:	d0e6      	beq.n	800423c <_printf_common+0xa4>
 800426e:	3601      	adds	r6, #1
 8004270:	e7d9      	b.n	8004226 <_printf_common+0x8e>
	...

08004274 <_printf_i>:
 8004274:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004278:	7e0f      	ldrb	r7, [r1, #24]
 800427a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800427c:	2f78      	cmp	r7, #120	; 0x78
 800427e:	4691      	mov	r9, r2
 8004280:	4680      	mov	r8, r0
 8004282:	460c      	mov	r4, r1
 8004284:	469a      	mov	sl, r3
 8004286:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800428a:	d807      	bhi.n	800429c <_printf_i+0x28>
 800428c:	2f62      	cmp	r7, #98	; 0x62
 800428e:	d80a      	bhi.n	80042a6 <_printf_i+0x32>
 8004290:	2f00      	cmp	r7, #0
 8004292:	f000 80d8 	beq.w	8004446 <_printf_i+0x1d2>
 8004296:	2f58      	cmp	r7, #88	; 0x58
 8004298:	f000 80a3 	beq.w	80043e2 <_printf_i+0x16e>
 800429c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80042a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80042a4:	e03a      	b.n	800431c <_printf_i+0xa8>
 80042a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80042aa:	2b15      	cmp	r3, #21
 80042ac:	d8f6      	bhi.n	800429c <_printf_i+0x28>
 80042ae:	a101      	add	r1, pc, #4	; (adr r1, 80042b4 <_printf_i+0x40>)
 80042b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80042b4:	0800430d 	.word	0x0800430d
 80042b8:	08004321 	.word	0x08004321
 80042bc:	0800429d 	.word	0x0800429d
 80042c0:	0800429d 	.word	0x0800429d
 80042c4:	0800429d 	.word	0x0800429d
 80042c8:	0800429d 	.word	0x0800429d
 80042cc:	08004321 	.word	0x08004321
 80042d0:	0800429d 	.word	0x0800429d
 80042d4:	0800429d 	.word	0x0800429d
 80042d8:	0800429d 	.word	0x0800429d
 80042dc:	0800429d 	.word	0x0800429d
 80042e0:	0800442d 	.word	0x0800442d
 80042e4:	08004351 	.word	0x08004351
 80042e8:	0800440f 	.word	0x0800440f
 80042ec:	0800429d 	.word	0x0800429d
 80042f0:	0800429d 	.word	0x0800429d
 80042f4:	0800444f 	.word	0x0800444f
 80042f8:	0800429d 	.word	0x0800429d
 80042fc:	08004351 	.word	0x08004351
 8004300:	0800429d 	.word	0x0800429d
 8004304:	0800429d 	.word	0x0800429d
 8004308:	08004417 	.word	0x08004417
 800430c:	682b      	ldr	r3, [r5, #0]
 800430e:	1d1a      	adds	r2, r3, #4
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	602a      	str	r2, [r5, #0]
 8004314:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004318:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800431c:	2301      	movs	r3, #1
 800431e:	e0a3      	b.n	8004468 <_printf_i+0x1f4>
 8004320:	6820      	ldr	r0, [r4, #0]
 8004322:	6829      	ldr	r1, [r5, #0]
 8004324:	0606      	lsls	r6, r0, #24
 8004326:	f101 0304 	add.w	r3, r1, #4
 800432a:	d50a      	bpl.n	8004342 <_printf_i+0xce>
 800432c:	680e      	ldr	r6, [r1, #0]
 800432e:	602b      	str	r3, [r5, #0]
 8004330:	2e00      	cmp	r6, #0
 8004332:	da03      	bge.n	800433c <_printf_i+0xc8>
 8004334:	232d      	movs	r3, #45	; 0x2d
 8004336:	4276      	negs	r6, r6
 8004338:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800433c:	485e      	ldr	r0, [pc, #376]	; (80044b8 <_printf_i+0x244>)
 800433e:	230a      	movs	r3, #10
 8004340:	e019      	b.n	8004376 <_printf_i+0x102>
 8004342:	680e      	ldr	r6, [r1, #0]
 8004344:	602b      	str	r3, [r5, #0]
 8004346:	f010 0f40 	tst.w	r0, #64	; 0x40
 800434a:	bf18      	it	ne
 800434c:	b236      	sxthne	r6, r6
 800434e:	e7ef      	b.n	8004330 <_printf_i+0xbc>
 8004350:	682b      	ldr	r3, [r5, #0]
 8004352:	6820      	ldr	r0, [r4, #0]
 8004354:	1d19      	adds	r1, r3, #4
 8004356:	6029      	str	r1, [r5, #0]
 8004358:	0601      	lsls	r1, r0, #24
 800435a:	d501      	bpl.n	8004360 <_printf_i+0xec>
 800435c:	681e      	ldr	r6, [r3, #0]
 800435e:	e002      	b.n	8004366 <_printf_i+0xf2>
 8004360:	0646      	lsls	r6, r0, #25
 8004362:	d5fb      	bpl.n	800435c <_printf_i+0xe8>
 8004364:	881e      	ldrh	r6, [r3, #0]
 8004366:	4854      	ldr	r0, [pc, #336]	; (80044b8 <_printf_i+0x244>)
 8004368:	2f6f      	cmp	r7, #111	; 0x6f
 800436a:	bf0c      	ite	eq
 800436c:	2308      	moveq	r3, #8
 800436e:	230a      	movne	r3, #10
 8004370:	2100      	movs	r1, #0
 8004372:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004376:	6865      	ldr	r5, [r4, #4]
 8004378:	60a5      	str	r5, [r4, #8]
 800437a:	2d00      	cmp	r5, #0
 800437c:	bfa2      	ittt	ge
 800437e:	6821      	ldrge	r1, [r4, #0]
 8004380:	f021 0104 	bicge.w	r1, r1, #4
 8004384:	6021      	strge	r1, [r4, #0]
 8004386:	b90e      	cbnz	r6, 800438c <_printf_i+0x118>
 8004388:	2d00      	cmp	r5, #0
 800438a:	d04d      	beq.n	8004428 <_printf_i+0x1b4>
 800438c:	4615      	mov	r5, r2
 800438e:	fbb6 f1f3 	udiv	r1, r6, r3
 8004392:	fb03 6711 	mls	r7, r3, r1, r6
 8004396:	5dc7      	ldrb	r7, [r0, r7]
 8004398:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800439c:	4637      	mov	r7, r6
 800439e:	42bb      	cmp	r3, r7
 80043a0:	460e      	mov	r6, r1
 80043a2:	d9f4      	bls.n	800438e <_printf_i+0x11a>
 80043a4:	2b08      	cmp	r3, #8
 80043a6:	d10b      	bne.n	80043c0 <_printf_i+0x14c>
 80043a8:	6823      	ldr	r3, [r4, #0]
 80043aa:	07de      	lsls	r6, r3, #31
 80043ac:	d508      	bpl.n	80043c0 <_printf_i+0x14c>
 80043ae:	6923      	ldr	r3, [r4, #16]
 80043b0:	6861      	ldr	r1, [r4, #4]
 80043b2:	4299      	cmp	r1, r3
 80043b4:	bfde      	ittt	le
 80043b6:	2330      	movle	r3, #48	; 0x30
 80043b8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80043bc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80043c0:	1b52      	subs	r2, r2, r5
 80043c2:	6122      	str	r2, [r4, #16]
 80043c4:	f8cd a000 	str.w	sl, [sp]
 80043c8:	464b      	mov	r3, r9
 80043ca:	aa03      	add	r2, sp, #12
 80043cc:	4621      	mov	r1, r4
 80043ce:	4640      	mov	r0, r8
 80043d0:	f7ff fee2 	bl	8004198 <_printf_common>
 80043d4:	3001      	adds	r0, #1
 80043d6:	d14c      	bne.n	8004472 <_printf_i+0x1fe>
 80043d8:	f04f 30ff 	mov.w	r0, #4294967295
 80043dc:	b004      	add	sp, #16
 80043de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043e2:	4835      	ldr	r0, [pc, #212]	; (80044b8 <_printf_i+0x244>)
 80043e4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80043e8:	6829      	ldr	r1, [r5, #0]
 80043ea:	6823      	ldr	r3, [r4, #0]
 80043ec:	f851 6b04 	ldr.w	r6, [r1], #4
 80043f0:	6029      	str	r1, [r5, #0]
 80043f2:	061d      	lsls	r5, r3, #24
 80043f4:	d514      	bpl.n	8004420 <_printf_i+0x1ac>
 80043f6:	07df      	lsls	r7, r3, #31
 80043f8:	bf44      	itt	mi
 80043fa:	f043 0320 	orrmi.w	r3, r3, #32
 80043fe:	6023      	strmi	r3, [r4, #0]
 8004400:	b91e      	cbnz	r6, 800440a <_printf_i+0x196>
 8004402:	6823      	ldr	r3, [r4, #0]
 8004404:	f023 0320 	bic.w	r3, r3, #32
 8004408:	6023      	str	r3, [r4, #0]
 800440a:	2310      	movs	r3, #16
 800440c:	e7b0      	b.n	8004370 <_printf_i+0xfc>
 800440e:	6823      	ldr	r3, [r4, #0]
 8004410:	f043 0320 	orr.w	r3, r3, #32
 8004414:	6023      	str	r3, [r4, #0]
 8004416:	2378      	movs	r3, #120	; 0x78
 8004418:	4828      	ldr	r0, [pc, #160]	; (80044bc <_printf_i+0x248>)
 800441a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800441e:	e7e3      	b.n	80043e8 <_printf_i+0x174>
 8004420:	0659      	lsls	r1, r3, #25
 8004422:	bf48      	it	mi
 8004424:	b2b6      	uxthmi	r6, r6
 8004426:	e7e6      	b.n	80043f6 <_printf_i+0x182>
 8004428:	4615      	mov	r5, r2
 800442a:	e7bb      	b.n	80043a4 <_printf_i+0x130>
 800442c:	682b      	ldr	r3, [r5, #0]
 800442e:	6826      	ldr	r6, [r4, #0]
 8004430:	6961      	ldr	r1, [r4, #20]
 8004432:	1d18      	adds	r0, r3, #4
 8004434:	6028      	str	r0, [r5, #0]
 8004436:	0635      	lsls	r5, r6, #24
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	d501      	bpl.n	8004440 <_printf_i+0x1cc>
 800443c:	6019      	str	r1, [r3, #0]
 800443e:	e002      	b.n	8004446 <_printf_i+0x1d2>
 8004440:	0670      	lsls	r0, r6, #25
 8004442:	d5fb      	bpl.n	800443c <_printf_i+0x1c8>
 8004444:	8019      	strh	r1, [r3, #0]
 8004446:	2300      	movs	r3, #0
 8004448:	6123      	str	r3, [r4, #16]
 800444a:	4615      	mov	r5, r2
 800444c:	e7ba      	b.n	80043c4 <_printf_i+0x150>
 800444e:	682b      	ldr	r3, [r5, #0]
 8004450:	1d1a      	adds	r2, r3, #4
 8004452:	602a      	str	r2, [r5, #0]
 8004454:	681d      	ldr	r5, [r3, #0]
 8004456:	6862      	ldr	r2, [r4, #4]
 8004458:	2100      	movs	r1, #0
 800445a:	4628      	mov	r0, r5
 800445c:	f7fb fec0 	bl	80001e0 <memchr>
 8004460:	b108      	cbz	r0, 8004466 <_printf_i+0x1f2>
 8004462:	1b40      	subs	r0, r0, r5
 8004464:	6060      	str	r0, [r4, #4]
 8004466:	6863      	ldr	r3, [r4, #4]
 8004468:	6123      	str	r3, [r4, #16]
 800446a:	2300      	movs	r3, #0
 800446c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004470:	e7a8      	b.n	80043c4 <_printf_i+0x150>
 8004472:	6923      	ldr	r3, [r4, #16]
 8004474:	462a      	mov	r2, r5
 8004476:	4649      	mov	r1, r9
 8004478:	4640      	mov	r0, r8
 800447a:	47d0      	blx	sl
 800447c:	3001      	adds	r0, #1
 800447e:	d0ab      	beq.n	80043d8 <_printf_i+0x164>
 8004480:	6823      	ldr	r3, [r4, #0]
 8004482:	079b      	lsls	r3, r3, #30
 8004484:	d413      	bmi.n	80044ae <_printf_i+0x23a>
 8004486:	68e0      	ldr	r0, [r4, #12]
 8004488:	9b03      	ldr	r3, [sp, #12]
 800448a:	4298      	cmp	r0, r3
 800448c:	bfb8      	it	lt
 800448e:	4618      	movlt	r0, r3
 8004490:	e7a4      	b.n	80043dc <_printf_i+0x168>
 8004492:	2301      	movs	r3, #1
 8004494:	4632      	mov	r2, r6
 8004496:	4649      	mov	r1, r9
 8004498:	4640      	mov	r0, r8
 800449a:	47d0      	blx	sl
 800449c:	3001      	adds	r0, #1
 800449e:	d09b      	beq.n	80043d8 <_printf_i+0x164>
 80044a0:	3501      	adds	r5, #1
 80044a2:	68e3      	ldr	r3, [r4, #12]
 80044a4:	9903      	ldr	r1, [sp, #12]
 80044a6:	1a5b      	subs	r3, r3, r1
 80044a8:	42ab      	cmp	r3, r5
 80044aa:	dcf2      	bgt.n	8004492 <_printf_i+0x21e>
 80044ac:	e7eb      	b.n	8004486 <_printf_i+0x212>
 80044ae:	2500      	movs	r5, #0
 80044b0:	f104 0619 	add.w	r6, r4, #25
 80044b4:	e7f5      	b.n	80044a2 <_printf_i+0x22e>
 80044b6:	bf00      	nop
 80044b8:	08004865 	.word	0x08004865
 80044bc:	08004876 	.word	0x08004876

080044c0 <_sbrk_r>:
 80044c0:	b538      	push	{r3, r4, r5, lr}
 80044c2:	4d06      	ldr	r5, [pc, #24]	; (80044dc <_sbrk_r+0x1c>)
 80044c4:	2300      	movs	r3, #0
 80044c6:	4604      	mov	r4, r0
 80044c8:	4608      	mov	r0, r1
 80044ca:	602b      	str	r3, [r5, #0]
 80044cc:	f7fc fafa 	bl	8000ac4 <_sbrk>
 80044d0:	1c43      	adds	r3, r0, #1
 80044d2:	d102      	bne.n	80044da <_sbrk_r+0x1a>
 80044d4:	682b      	ldr	r3, [r5, #0]
 80044d6:	b103      	cbz	r3, 80044da <_sbrk_r+0x1a>
 80044d8:	6023      	str	r3, [r4, #0]
 80044da:	bd38      	pop	{r3, r4, r5, pc}
 80044dc:	20000124 	.word	0x20000124

080044e0 <__sread>:
 80044e0:	b510      	push	{r4, lr}
 80044e2:	460c      	mov	r4, r1
 80044e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044e8:	f000 f8a0 	bl	800462c <_read_r>
 80044ec:	2800      	cmp	r0, #0
 80044ee:	bfab      	itete	ge
 80044f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80044f2:	89a3      	ldrhlt	r3, [r4, #12]
 80044f4:	181b      	addge	r3, r3, r0
 80044f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80044fa:	bfac      	ite	ge
 80044fc:	6563      	strge	r3, [r4, #84]	; 0x54
 80044fe:	81a3      	strhlt	r3, [r4, #12]
 8004500:	bd10      	pop	{r4, pc}

08004502 <__swrite>:
 8004502:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004506:	461f      	mov	r7, r3
 8004508:	898b      	ldrh	r3, [r1, #12]
 800450a:	05db      	lsls	r3, r3, #23
 800450c:	4605      	mov	r5, r0
 800450e:	460c      	mov	r4, r1
 8004510:	4616      	mov	r6, r2
 8004512:	d505      	bpl.n	8004520 <__swrite+0x1e>
 8004514:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004518:	2302      	movs	r3, #2
 800451a:	2200      	movs	r2, #0
 800451c:	f000 f868 	bl	80045f0 <_lseek_r>
 8004520:	89a3      	ldrh	r3, [r4, #12]
 8004522:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004526:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800452a:	81a3      	strh	r3, [r4, #12]
 800452c:	4632      	mov	r2, r6
 800452e:	463b      	mov	r3, r7
 8004530:	4628      	mov	r0, r5
 8004532:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004536:	f000 b817 	b.w	8004568 <_write_r>

0800453a <__sseek>:
 800453a:	b510      	push	{r4, lr}
 800453c:	460c      	mov	r4, r1
 800453e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004542:	f000 f855 	bl	80045f0 <_lseek_r>
 8004546:	1c43      	adds	r3, r0, #1
 8004548:	89a3      	ldrh	r3, [r4, #12]
 800454a:	bf15      	itete	ne
 800454c:	6560      	strne	r0, [r4, #84]	; 0x54
 800454e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004552:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004556:	81a3      	strheq	r3, [r4, #12]
 8004558:	bf18      	it	ne
 800455a:	81a3      	strhne	r3, [r4, #12]
 800455c:	bd10      	pop	{r4, pc}

0800455e <__sclose>:
 800455e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004562:	f000 b813 	b.w	800458c <_close_r>
	...

08004568 <_write_r>:
 8004568:	b538      	push	{r3, r4, r5, lr}
 800456a:	4d07      	ldr	r5, [pc, #28]	; (8004588 <_write_r+0x20>)
 800456c:	4604      	mov	r4, r0
 800456e:	4608      	mov	r0, r1
 8004570:	4611      	mov	r1, r2
 8004572:	2200      	movs	r2, #0
 8004574:	602a      	str	r2, [r5, #0]
 8004576:	461a      	mov	r2, r3
 8004578:	f7fc fa53 	bl	8000a22 <_write>
 800457c:	1c43      	adds	r3, r0, #1
 800457e:	d102      	bne.n	8004586 <_write_r+0x1e>
 8004580:	682b      	ldr	r3, [r5, #0]
 8004582:	b103      	cbz	r3, 8004586 <_write_r+0x1e>
 8004584:	6023      	str	r3, [r4, #0]
 8004586:	bd38      	pop	{r3, r4, r5, pc}
 8004588:	20000124 	.word	0x20000124

0800458c <_close_r>:
 800458c:	b538      	push	{r3, r4, r5, lr}
 800458e:	4d06      	ldr	r5, [pc, #24]	; (80045a8 <_close_r+0x1c>)
 8004590:	2300      	movs	r3, #0
 8004592:	4604      	mov	r4, r0
 8004594:	4608      	mov	r0, r1
 8004596:	602b      	str	r3, [r5, #0]
 8004598:	f7fc fa5f 	bl	8000a5a <_close>
 800459c:	1c43      	adds	r3, r0, #1
 800459e:	d102      	bne.n	80045a6 <_close_r+0x1a>
 80045a0:	682b      	ldr	r3, [r5, #0]
 80045a2:	b103      	cbz	r3, 80045a6 <_close_r+0x1a>
 80045a4:	6023      	str	r3, [r4, #0]
 80045a6:	bd38      	pop	{r3, r4, r5, pc}
 80045a8:	20000124 	.word	0x20000124

080045ac <_fstat_r>:
 80045ac:	b538      	push	{r3, r4, r5, lr}
 80045ae:	4d07      	ldr	r5, [pc, #28]	; (80045cc <_fstat_r+0x20>)
 80045b0:	2300      	movs	r3, #0
 80045b2:	4604      	mov	r4, r0
 80045b4:	4608      	mov	r0, r1
 80045b6:	4611      	mov	r1, r2
 80045b8:	602b      	str	r3, [r5, #0]
 80045ba:	f7fc fa5a 	bl	8000a72 <_fstat>
 80045be:	1c43      	adds	r3, r0, #1
 80045c0:	d102      	bne.n	80045c8 <_fstat_r+0x1c>
 80045c2:	682b      	ldr	r3, [r5, #0]
 80045c4:	b103      	cbz	r3, 80045c8 <_fstat_r+0x1c>
 80045c6:	6023      	str	r3, [r4, #0]
 80045c8:	bd38      	pop	{r3, r4, r5, pc}
 80045ca:	bf00      	nop
 80045cc:	20000124 	.word	0x20000124

080045d0 <_isatty_r>:
 80045d0:	b538      	push	{r3, r4, r5, lr}
 80045d2:	4d06      	ldr	r5, [pc, #24]	; (80045ec <_isatty_r+0x1c>)
 80045d4:	2300      	movs	r3, #0
 80045d6:	4604      	mov	r4, r0
 80045d8:	4608      	mov	r0, r1
 80045da:	602b      	str	r3, [r5, #0]
 80045dc:	f7fc fa59 	bl	8000a92 <_isatty>
 80045e0:	1c43      	adds	r3, r0, #1
 80045e2:	d102      	bne.n	80045ea <_isatty_r+0x1a>
 80045e4:	682b      	ldr	r3, [r5, #0]
 80045e6:	b103      	cbz	r3, 80045ea <_isatty_r+0x1a>
 80045e8:	6023      	str	r3, [r4, #0]
 80045ea:	bd38      	pop	{r3, r4, r5, pc}
 80045ec:	20000124 	.word	0x20000124

080045f0 <_lseek_r>:
 80045f0:	b538      	push	{r3, r4, r5, lr}
 80045f2:	4d07      	ldr	r5, [pc, #28]	; (8004610 <_lseek_r+0x20>)
 80045f4:	4604      	mov	r4, r0
 80045f6:	4608      	mov	r0, r1
 80045f8:	4611      	mov	r1, r2
 80045fa:	2200      	movs	r2, #0
 80045fc:	602a      	str	r2, [r5, #0]
 80045fe:	461a      	mov	r2, r3
 8004600:	f7fc fa52 	bl	8000aa8 <_lseek>
 8004604:	1c43      	adds	r3, r0, #1
 8004606:	d102      	bne.n	800460e <_lseek_r+0x1e>
 8004608:	682b      	ldr	r3, [r5, #0]
 800460a:	b103      	cbz	r3, 800460e <_lseek_r+0x1e>
 800460c:	6023      	str	r3, [r4, #0]
 800460e:	bd38      	pop	{r3, r4, r5, pc}
 8004610:	20000124 	.word	0x20000124

08004614 <__malloc_lock>:
 8004614:	4801      	ldr	r0, [pc, #4]	; (800461c <__malloc_lock+0x8>)
 8004616:	f7ff bb1d 	b.w	8003c54 <__retarget_lock_acquire_recursive>
 800461a:	bf00      	nop
 800461c:	20000118 	.word	0x20000118

08004620 <__malloc_unlock>:
 8004620:	4801      	ldr	r0, [pc, #4]	; (8004628 <__malloc_unlock+0x8>)
 8004622:	f7ff bb18 	b.w	8003c56 <__retarget_lock_release_recursive>
 8004626:	bf00      	nop
 8004628:	20000118 	.word	0x20000118

0800462c <_read_r>:
 800462c:	b538      	push	{r3, r4, r5, lr}
 800462e:	4d07      	ldr	r5, [pc, #28]	; (800464c <_read_r+0x20>)
 8004630:	4604      	mov	r4, r0
 8004632:	4608      	mov	r0, r1
 8004634:	4611      	mov	r1, r2
 8004636:	2200      	movs	r2, #0
 8004638:	602a      	str	r2, [r5, #0]
 800463a:	461a      	mov	r2, r3
 800463c:	f7fc f9d4 	bl	80009e8 <_read>
 8004640:	1c43      	adds	r3, r0, #1
 8004642:	d102      	bne.n	800464a <_read_r+0x1e>
 8004644:	682b      	ldr	r3, [r5, #0]
 8004646:	b103      	cbz	r3, 800464a <_read_r+0x1e>
 8004648:	6023      	str	r3, [r4, #0]
 800464a:	bd38      	pop	{r3, r4, r5, pc}
 800464c:	20000124 	.word	0x20000124

08004650 <_init>:
 8004650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004652:	bf00      	nop
 8004654:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004656:	bc08      	pop	{r3}
 8004658:	469e      	mov	lr, r3
 800465a:	4770      	bx	lr

0800465c <_fini>:
 800465c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800465e:	bf00      	nop
 8004660:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004662:	bc08      	pop	{r3}
 8004664:	469e      	mov	lr, r3
 8004666:	4770      	bx	lr
