
MainProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000587c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000027c  08005a0c  08005a0c  00015a0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c88  08005c88  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005c88  08005c88  00015c88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005c90  08005c90  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c90  08005c90  00015c90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005c94  08005c94  00015c94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005c98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000254  20000070  08005d08  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002c4  08005d08  000202c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001215a  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002620  00000000  00000000  000321fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001078  00000000  00000000  00034820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f80  00000000  00000000  00035898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026bc7  00000000  00000000  00036818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012e53  00000000  00000000  0005d3df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f5f15  00000000  00000000  00070232  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00166147  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004eac  00000000  00000000  00166198  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080059f4 	.word	0x080059f4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080059f4 	.word	0x080059f4

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <UART_Transmit>:
#define OPTION1 "1. Start LED blinking\n\r"
#define OPTION2 "2. Stop LED blinking\n\r"
#define PROMPT "Select Option >\n\r"

int UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, size_t len)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b084      	sub	sp, #16
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	60f8      	str	r0, [r7, #12]
 80005ac:	60b9      	str	r1, [r7, #8]
 80005ae:	607a      	str	r2, [r7, #4]
	if (HAL_UART_Transmit_IT(huart, pData, len) != HAL_OK) {
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	b29b      	uxth	r3, r3
 80005b4:	461a      	mov	r2, r3
 80005b6:	68b9      	ldr	r1, [r7, #8]
 80005b8:	68f8      	ldr	r0, [r7, #12]
 80005ba:	f002 feb3 	bl	8003324 <HAL_UART_Transmit_IT>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d009      	beq.n	80005d8 <UART_Transmit+0x34>
		if (!RingBuffer_Write(&txrb, pData, len)) {
 80005c4:	687a      	ldr	r2, [r7, #4]
 80005c6:	68b9      	ldr	r1, [r7, #8]
 80005c8:	4806      	ldr	r0, [pc, #24]	; (80005e4 <UART_Transmit+0x40>)
 80005ca:	f000 fa9b 	bl	8000b04 <RingBuffer_Write>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d101      	bne.n	80005d8 <UART_Transmit+0x34>
			return 0;
 80005d4:	2300      	movs	r3, #0
 80005d6:	e000      	b.n	80005da <UART_Transmit+0x36>
		}
	}
	return 1;
 80005d8:	2301      	movs	r3, #1
}
 80005da:	4618      	mov	r0, r3
 80005dc:	3710      	adds	r7, #16
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	2000015c 	.word	0x2000015c

080005e8 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 80005e8:	b480      	push	{r7}
 80005ea:	b083      	sub	sp, #12
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
	if (!RingBuffer_IsEmpty(&txrb)) {
		RingBuffer_Read(&txrb, &txData, 1);
		HAL_UART_Transmit_IT(huart, &txData, 1);
	}
	*/
}
 80005f0:	bf00      	nop
 80005f2:	370c      	adds	r7, #12
 80005f4:	46bd      	mov	sp, r7
 80005f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fa:	4770      	bx	lr

080005fc <printMessages2>:
	HAL_UART_Transmit_IT(&huart2, (uint8_t*)OPTION1, strlen(OPTION1));
	HAL_UART_Transmit_IT(&huart2, (uint8_t*)OPTION2, strlen(OPTION2));
	HAL_UART_Transmit_IT(&huart2, (uint8_t*)PROMPT, strlen(PROMPT));
}

void printMessages2(void) {
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
	UART_Transmit(&huart2, (uint8_t*)WELCOME_MSG, strlen(WELCOME_MSG));
 8000600:	2216      	movs	r2, #22
 8000602:	490d      	ldr	r1, [pc, #52]	; (8000638 <printMessages2+0x3c>)
 8000604:	480d      	ldr	r0, [pc, #52]	; (800063c <printMessages2+0x40>)
 8000606:	f7ff ffcd 	bl	80005a4 <UART_Transmit>
	UART_Transmit(&huart2, (uint8_t*)MAIN_MENU, strlen(MAIN_MENU));
 800060a:	2214      	movs	r2, #20
 800060c:	490c      	ldr	r1, [pc, #48]	; (8000640 <printMessages2+0x44>)
 800060e:	480b      	ldr	r0, [pc, #44]	; (800063c <printMessages2+0x40>)
 8000610:	f7ff ffc8 	bl	80005a4 <UART_Transmit>
	UART_Transmit(&huart2, (uint8_t*)OPTION1, strlen(OPTION1));
 8000614:	2217      	movs	r2, #23
 8000616:	490b      	ldr	r1, [pc, #44]	; (8000644 <printMessages2+0x48>)
 8000618:	4808      	ldr	r0, [pc, #32]	; (800063c <printMessages2+0x40>)
 800061a:	f7ff ffc3 	bl	80005a4 <UART_Transmit>
	UART_Transmit(&huart2, (uint8_t*)OPTION2, strlen(OPTION2));
 800061e:	2216      	movs	r2, #22
 8000620:	4909      	ldr	r1, [pc, #36]	; (8000648 <printMessages2+0x4c>)
 8000622:	4806      	ldr	r0, [pc, #24]	; (800063c <printMessages2+0x40>)
 8000624:	f7ff ffbe 	bl	80005a4 <UART_Transmit>
	UART_Transmit(&huart2, (uint8_t*)PROMPT, strlen(PROMPT));
 8000628:	2211      	movs	r2, #17
 800062a:	4908      	ldr	r1, [pc, #32]	; (800064c <printMessages2+0x50>)
 800062c:	4803      	ldr	r0, [pc, #12]	; (800063c <printMessages2+0x40>)
 800062e:	f7ff ffb9 	bl	80005a4 <UART_Transmit>
}
 8000632:	bf00      	nop
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	08005a0c 	.word	0x08005a0c
 800063c:	200000d8 	.word	0x200000d8
 8000640:	08005a24 	.word	0x08005a24
 8000644:	08005a3c 	.word	0x08005a3c
 8000648:	08005a54 	.word	0x08005a54
 800064c:	08005a6c 	.word	0x08005a6c

08000650 <ledTask>:
enum LedTaskState ledState;
int ledCount;
int ledMaxCount;

void ledTask()
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
	if (ledState == LedOn)
 8000654:	4b0b      	ldr	r3, [pc, #44]	; (8000684 <ledTask+0x34>)
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	2b00      	cmp	r3, #0
 800065a:	d110      	bne.n	800067e <ledTask+0x2e>
	{
		if (ledCount++ >= ledMaxCount)
 800065c:	4b0a      	ldr	r3, [pc, #40]	; (8000688 <ledTask+0x38>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	1c5a      	adds	r2, r3, #1
 8000662:	4909      	ldr	r1, [pc, #36]	; (8000688 <ledTask+0x38>)
 8000664:	600a      	str	r2, [r1, #0]
 8000666:	4a09      	ldr	r2, [pc, #36]	; (800068c <ledTask+0x3c>)
 8000668:	6812      	ldr	r2, [r2, #0]
 800066a:	4293      	cmp	r3, r2
 800066c:	db07      	blt.n	800067e <ledTask+0x2e>
		{
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800066e:	2120      	movs	r1, #32
 8000670:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000674:	f000 ffee 	bl	8001654 <HAL_GPIO_TogglePin>
			ledCount = 0;
 8000678:	4b03      	ldr	r3, [pc, #12]	; (8000688 <ledTask+0x38>)
 800067a:	2200      	movs	r2, #0
 800067c:	601a      	str	r2, [r3, #0]
	}
	else if (ledState == LedOff)
	{
		//HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);
	}
}
 800067e:	bf00      	nop
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	20000234 	.word	0x20000234
 8000688:	20000238 	.word	0x20000238
 800068c:	2000023c 	.word	0x2000023c

08000690 <commTask>:
uint8_t cmdbuffer[MAX_BUFFER_LENGTH];
int cmdcount = 0;
int cmdprint = 0;

int commTask()
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
	uint8_t ch;

	HAL_StatusTypeDef Status = HAL_UART_Receive(&huart2, &ch, 1, 10);
 8000696:	1db9      	adds	r1, r7, #6
 8000698:	230a      	movs	r3, #10
 800069a:	2201      	movs	r2, #1
 800069c:	4836      	ldr	r0, [pc, #216]	; (8000778 <commTask+0xe8>)
 800069e:	f002 fd6f 	bl	8003180 <HAL_UART_Receive>
 80006a2:	4603      	mov	r3, r0
 80006a4:	71fb      	strb	r3, [r7, #7]
	if (Status != HAL_OK)
 80006a6:	79fb      	ldrb	r3, [r7, #7]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d020      	beq.n	80006ee <commTask+0x5e>
	{
		if ((huart2.Instance->ISR & USART_ISR_ORE) != 0)
 80006ac:	4b32      	ldr	r3, [pc, #200]	; (8000778 <commTask+0xe8>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	69db      	ldr	r3, [r3, #28]
 80006b2:	f003 0308 	and.w	r3, r3, #8
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d011      	beq.n	80006de <commTask+0x4e>
		{
			__HAL_UART_CLEAR_OREFLAG(&huart2);
 80006ba:	4b2f      	ldr	r3, [pc, #188]	; (8000778 <commTask+0xe8>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	2208      	movs	r2, #8
 80006c0:	621a      	str	r2, [r3, #32]
		}

		// here we have a time to print the command
		while (cmdprint < cmdcount)
 80006c2:	e00c      	b.n	80006de <commTask+0x4e>
		{
			HAL_UART_Transmit(&huart2, &cmdbuffer[cmdprint++], 1, 0xFFFF);
 80006c4:	4b2d      	ldr	r3, [pc, #180]	; (800077c <commTask+0xec>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	1c5a      	adds	r2, r3, #1
 80006ca:	492c      	ldr	r1, [pc, #176]	; (800077c <commTask+0xec>)
 80006cc:	600a      	str	r2, [r1, #0]
 80006ce:	4a2c      	ldr	r2, [pc, #176]	; (8000780 <commTask+0xf0>)
 80006d0:	1899      	adds	r1, r3, r2
 80006d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006d6:	2201      	movs	r2, #1
 80006d8:	4827      	ldr	r0, [pc, #156]	; (8000778 <commTask+0xe8>)
 80006da:	f002 fcbd 	bl	8003058 <HAL_UART_Transmit>
		while (cmdprint < cmdcount)
 80006de:	4b27      	ldr	r3, [pc, #156]	; (800077c <commTask+0xec>)
 80006e0:	681a      	ldr	r2, [r3, #0]
 80006e2:	4b28      	ldr	r3, [pc, #160]	; (8000784 <commTask+0xf4>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	429a      	cmp	r2, r3
 80006e8:	dbec      	blt.n	80006c4 <commTask+0x34>
		}

		return 0;
 80006ea:	2300      	movs	r3, #0
 80006ec:	e03f      	b.n	800076e <commTask+0xde>
	}

	if (ch != '\r' && ch != '\n')
 80006ee:	79bb      	ldrb	r3, [r7, #6]
 80006f0:	2b0d      	cmp	r3, #13
 80006f2:	d023      	beq.n	800073c <commTask+0xac>
 80006f4:	79bb      	ldrb	r3, [r7, #6]
 80006f6:	2b0a      	cmp	r3, #10
 80006f8:	d020      	beq.n	800073c <commTask+0xac>
	{
		//HAL_UART_Transmit(&huart2, &ch, 1, 0xFFFF);

		if (cmdcount >= MAX_BUFFER_LENGTH)
 80006fa:	4b22      	ldr	r3, [pc, #136]	; (8000784 <commTask+0xf4>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	2b63      	cmp	r3, #99	; 0x63
 8000700:	dd05      	ble.n	800070e <commTask+0x7e>
		{
			cmdcount = 0;
 8000702:	4b20      	ldr	r3, [pc, #128]	; (8000784 <commTask+0xf4>)
 8000704:	2200      	movs	r2, #0
 8000706:	601a      	str	r2, [r3, #0]
			cmdprint = 0;
 8000708:	4b1c      	ldr	r3, [pc, #112]	; (800077c <commTask+0xec>)
 800070a:	2200      	movs	r2, #0
 800070c:	601a      	str	r2, [r3, #0]
		}

		cmdbuffer[cmdcount++] = ch;
 800070e:	4b1d      	ldr	r3, [pc, #116]	; (8000784 <commTask+0xf4>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	1c5a      	adds	r2, r3, #1
 8000714:	491b      	ldr	r1, [pc, #108]	; (8000784 <commTask+0xf4>)
 8000716:	600a      	str	r2, [r1, #0]
 8000718:	79b9      	ldrb	r1, [r7, #6]
 800071a:	4a19      	ldr	r2, [pc, #100]	; (8000780 <commTask+0xf0>)
 800071c:	54d1      	strb	r1, [r2, r3]
		return 0;
 800071e:	2300      	movs	r3, #0
 8000720:	e025      	b.n	800076e <commTask+0xde>
	}

	// here we have a time to print the command
	while (cmdprint < cmdcount)
	{
		HAL_UART_Transmit(&huart2, &cmdbuffer[cmdprint++], 1, 0xFFFF);
 8000722:	4b16      	ldr	r3, [pc, #88]	; (800077c <commTask+0xec>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	1c5a      	adds	r2, r3, #1
 8000728:	4914      	ldr	r1, [pc, #80]	; (800077c <commTask+0xec>)
 800072a:	600a      	str	r2, [r1, #0]
 800072c:	4a14      	ldr	r2, [pc, #80]	; (8000780 <commTask+0xf0>)
 800072e:	1899      	adds	r1, r3, r2
 8000730:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000734:	2201      	movs	r2, #1
 8000736:	4810      	ldr	r0, [pc, #64]	; (8000778 <commTask+0xe8>)
 8000738:	f002 fc8e 	bl	8003058 <HAL_UART_Transmit>
	while (cmdprint < cmdcount)
 800073c:	4b0f      	ldr	r3, [pc, #60]	; (800077c <commTask+0xec>)
 800073e:	681a      	ldr	r2, [r3, #0]
 8000740:	4b10      	ldr	r3, [pc, #64]	; (8000784 <commTask+0xf4>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	429a      	cmp	r2, r3
 8000746:	dbec      	blt.n	8000722 <commTask+0x92>
	}

	HAL_UART_Transmit(&huart2, (uint8_t*)"\r\n", 2, 0xFFFF);
 8000748:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800074c:	2202      	movs	r2, #2
 800074e:	490e      	ldr	r1, [pc, #56]	; (8000788 <commTask+0xf8>)
 8000750:	4809      	ldr	r0, [pc, #36]	; (8000778 <commTask+0xe8>)
 8000752:	f002 fc81 	bl	8003058 <HAL_UART_Transmit>

	cmdbuffer[cmdcount] = 0;
 8000756:	4b0b      	ldr	r3, [pc, #44]	; (8000784 <commTask+0xf4>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	4a09      	ldr	r2, [pc, #36]	; (8000780 <commTask+0xf0>)
 800075c:	2100      	movs	r1, #0
 800075e:	54d1      	strb	r1, [r2, r3]
	cmdcount = 0;
 8000760:	4b08      	ldr	r3, [pc, #32]	; (8000784 <commTask+0xf4>)
 8000762:	2200      	movs	r2, #0
 8000764:	601a      	str	r2, [r3, #0]
	cmdprint = 0;
 8000766:	4b05      	ldr	r3, [pc, #20]	; (800077c <commTask+0xec>)
 8000768:	2200      	movs	r2, #0
 800076a:	601a      	str	r2, [r3, #0]
	return 1;
 800076c:	2301      	movs	r3, #1
}
 800076e:	4618      	mov	r0, r3
 8000770:	3708      	adds	r7, #8
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	200000d8 	.word	0x200000d8
 800077c:	200002a8 	.word	0x200002a8
 8000780:	20000240 	.word	0x20000240
 8000784:	200002a4 	.word	0x200002a4
 8000788:	08005a80 	.word	0x08005a80

0800078c <handleCommand>:

void handleCommand()
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b088      	sub	sp, #32
 8000790:	af00      	add	r7, sp, #0
  char cmd[20];
  int maxCount;

  int params = sscanf((const char*)cmdbuffer, "%s %d", cmd, &maxCount);
 8000792:	1d3b      	adds	r3, r7, #4
 8000794:	f107 0208 	add.w	r2, r7, #8
 8000798:	4910      	ldr	r1, [pc, #64]	; (80007dc <handleCommand+0x50>)
 800079a:	4811      	ldr	r0, [pc, #68]	; (80007e0 <handleCommand+0x54>)
 800079c:	f003 ffa0 	bl	80046e0 <siscanf>
 80007a0:	61f8      	str	r0, [r7, #28]

  if (params == 0)
 80007a2:	69fb      	ldr	r3, [r7, #28]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d015      	beq.n	80007d4 <handleCommand+0x48>
  {
	  return;
  }

  if (strcmp(cmd, "start") == 0)
 80007a8:	f107 0308 	add.w	r3, r7, #8
 80007ac:	490d      	ldr	r1, [pc, #52]	; (80007e4 <handleCommand+0x58>)
 80007ae:	4618      	mov	r0, r3
 80007b0:	f7ff fd0e 	bl	80001d0 <strcmp>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d00d      	beq.n	80007d6 <handleCommand+0x4a>
  {
	  //ledStart(maxCount);
  }
  else if (strcmp(cmd, "stop") == 0)
 80007ba:	f107 0308 	add.w	r3, r7, #8
 80007be:	490a      	ldr	r1, [pc, #40]	; (80007e8 <handleCommand+0x5c>)
 80007c0:	4618      	mov	r0, r3
 80007c2:	f7ff fd05 	bl	80001d0 <strcmp>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d004      	beq.n	80007d6 <handleCommand+0x4a>
  {
	  //ledStop();
  }
  else
  {
	  printf("Invalid command\r\n");
 80007cc:	4807      	ldr	r0, [pc, #28]	; (80007ec <handleCommand+0x60>)
 80007ce:	f003 ff7f 	bl	80046d0 <puts>
 80007d2:	e000      	b.n	80007d6 <handleCommand+0x4a>
	  return;
 80007d4:	bf00      	nop
  }
}
 80007d6:	3720      	adds	r7, #32
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	08005a84 	.word	0x08005a84
 80007e0:	20000240 	.word	0x20000240
 80007e4:	08005a8c 	.word	0x08005a8c
 80007e8:	08005a94 	.word	0x08005a94
 80007ec:	08005a9c 	.word	0x08005a9c

080007f0 <_write>:

/////////////////////////////////////////////////////////////////////////
// Redirecting printf to UART
/////////////////////////////////////////////////////////////////////////
int _write(int fd, char* ptr, int len) {
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b084      	sub	sp, #16
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	60f8      	str	r0, [r7, #12]
 80007f8:	60b9      	str	r1, [r7, #8]
 80007fa:	607a      	str	r2, [r7, #4]
    //HAL_UART_Transmit(&huart2, (uint8_t *) ptr, len, HAL_MAX_DELAY);
	UART_Transmit(&huart2, (uint8_t *) ptr, len);
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	461a      	mov	r2, r3
 8000800:	68b9      	ldr	r1, [r7, #8]
 8000802:	4804      	ldr	r0, [pc, #16]	; (8000814 <_write+0x24>)
 8000804:	f7ff fece 	bl	80005a4 <UART_Transmit>
    return len;
 8000808:	687b      	ldr	r3, [r7, #4]
}
 800080a:	4618      	mov	r0, r3
 800080c:	3710      	adds	r7, #16
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	200000d8 	.word	0x200000d8

08000818 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800081c:	f000 fb4c 	bl	8000eb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000820:	f000 f81c 	bl	800085c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000824:	f000 f8d4 	bl	80009d0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000828:	f000 f8a2 	bl	8000970 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 800082c:	f000 f868 	bl	8000900 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  RingBuffer_Init(&txrb);
 8000830:	4808      	ldr	r0, [pc, #32]	; (8000854 <main+0x3c>)
 8000832:	f000 f938 	bl	8000aa6 <RingBuffer_Init>
  RingBuffer_Init(&rxrb);
 8000836:	4808      	ldr	r0, [pc, #32]	; (8000858 <main+0x40>)
 8000838:	f000 f935 	bl	8000aa6 <RingBuffer_Init>

  printMessages2();
 800083c:	f7ff fede 	bl	80005fc <printMessages2>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  ledTask();
 8000840:	f7ff ff06 	bl	8000650 <ledTask>
	  if (commTask())
 8000844:	f7ff ff24 	bl	8000690 <commTask>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d0f8      	beq.n	8000840 <main+0x28>
	  {
		  handleCommand();
 800084e:	f7ff ff9d 	bl	800078c <handleCommand>
	  ledTask();
 8000852:	e7f5      	b.n	8000840 <main+0x28>
 8000854:	2000015c 	.word	0x2000015c
 8000858:	200001c8 	.word	0x200001c8

0800085c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b096      	sub	sp, #88	; 0x58
 8000860:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000862:	f107 0314 	add.w	r3, r7, #20
 8000866:	2244      	movs	r2, #68	; 0x44
 8000868:	2100      	movs	r1, #0
 800086a:	4618      	mov	r0, r3
 800086c:	f003 feba 	bl	80045e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000870:	463b      	mov	r3, r7
 8000872:	2200      	movs	r2, #0
 8000874:	601a      	str	r2, [r3, #0]
 8000876:	605a      	str	r2, [r3, #4]
 8000878:	609a      	str	r2, [r3, #8]
 800087a:	60da      	str	r2, [r3, #12]
 800087c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800087e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000882:	f000 ff0f 	bl	80016a4 <HAL_PWREx_ControlVoltageScaling>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800088c:	f000 f906 	bl	8000a9c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000890:	2302      	movs	r3, #2
 8000892:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000894:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000898:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800089a:	2310      	movs	r3, #16
 800089c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800089e:	2302      	movs	r3, #2
 80008a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008a2:	2302      	movs	r3, #2
 80008a4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80008a6:	2301      	movs	r3, #1
 80008a8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80008aa:	230a      	movs	r3, #10
 80008ac:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80008ae:	2307      	movs	r3, #7
 80008b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80008b2:	2302      	movs	r3, #2
 80008b4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80008b6:	2302      	movs	r3, #2
 80008b8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008ba:	f107 0314 	add.w	r3, r7, #20
 80008be:	4618      	mov	r0, r3
 80008c0:	f000 ff46 	bl	8001750 <HAL_RCC_OscConfig>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <SystemClock_Config+0x72>
  {
    Error_Handler();
 80008ca:	f000 f8e7 	bl	8000a9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ce:	230f      	movs	r3, #15
 80008d0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008d2:	2303      	movs	r3, #3
 80008d4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008d6:	2300      	movs	r3, #0
 80008d8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008da:	2300      	movs	r3, #0
 80008dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008de:	2300      	movs	r3, #0
 80008e0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80008e2:	463b      	mov	r3, r7
 80008e4:	2104      	movs	r1, #4
 80008e6:	4618      	mov	r0, r3
 80008e8:	f001 fb0e 	bl	8001f08 <HAL_RCC_ClockConfig>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80008f2:	f000 f8d3 	bl	8000a9c <Error_Handler>
  }
}
 80008f6:	bf00      	nop
 80008f8:	3758      	adds	r7, #88	; 0x58
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
	...

08000900 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b084      	sub	sp, #16
 8000904:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000906:	1d3b      	adds	r3, r7, #4
 8000908:	2200      	movs	r2, #0
 800090a:	601a      	str	r2, [r3, #0]
 800090c:	605a      	str	r2, [r3, #4]
 800090e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000910:	4b15      	ldr	r3, [pc, #84]	; (8000968 <MX_TIM6_Init+0x68>)
 8000912:	4a16      	ldr	r2, [pc, #88]	; (800096c <MX_TIM6_Init+0x6c>)
 8000914:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7999;
 8000916:	4b14      	ldr	r3, [pc, #80]	; (8000968 <MX_TIM6_Init+0x68>)
 8000918:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800091c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800091e:	4b12      	ldr	r3, [pc, #72]	; (8000968 <MX_TIM6_Init+0x68>)
 8000920:	2200      	movs	r2, #0
 8000922:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 4999;
 8000924:	4b10      	ldr	r3, [pc, #64]	; (8000968 <MX_TIM6_Init+0x68>)
 8000926:	f241 3287 	movw	r2, #4999	; 0x1387
 800092a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800092c:	4b0e      	ldr	r3, [pc, #56]	; (8000968 <MX_TIM6_Init+0x68>)
 800092e:	2200      	movs	r2, #0
 8000930:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000932:	480d      	ldr	r0, [pc, #52]	; (8000968 <MX_TIM6_Init+0x68>)
 8000934:	f002 f9c8 	bl	8002cc8 <HAL_TIM_Base_Init>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800093e:	f000 f8ad 	bl	8000a9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000942:	2300      	movs	r3, #0
 8000944:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000946:	2300      	movs	r3, #0
 8000948:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800094a:	1d3b      	adds	r3, r7, #4
 800094c:	4619      	mov	r1, r3
 800094e:	4806      	ldr	r0, [pc, #24]	; (8000968 <MX_TIM6_Init+0x68>)
 8000950:	f002 faac 	bl	8002eac <HAL_TIMEx_MasterConfigSynchronization>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 800095a:	f000 f89f 	bl	8000a9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800095e:	bf00      	nop
 8000960:	3710      	adds	r7, #16
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	2000008c 	.word	0x2000008c
 800096c:	40001000 	.word	0x40001000

08000970 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000974:	4b14      	ldr	r3, [pc, #80]	; (80009c8 <MX_USART2_UART_Init+0x58>)
 8000976:	4a15      	ldr	r2, [pc, #84]	; (80009cc <MX_USART2_UART_Init+0x5c>)
 8000978:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800097a:	4b13      	ldr	r3, [pc, #76]	; (80009c8 <MX_USART2_UART_Init+0x58>)
 800097c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000980:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000982:	4b11      	ldr	r3, [pc, #68]	; (80009c8 <MX_USART2_UART_Init+0x58>)
 8000984:	2200      	movs	r2, #0
 8000986:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000988:	4b0f      	ldr	r3, [pc, #60]	; (80009c8 <MX_USART2_UART_Init+0x58>)
 800098a:	2200      	movs	r2, #0
 800098c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800098e:	4b0e      	ldr	r3, [pc, #56]	; (80009c8 <MX_USART2_UART_Init+0x58>)
 8000990:	2200      	movs	r2, #0
 8000992:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000994:	4b0c      	ldr	r3, [pc, #48]	; (80009c8 <MX_USART2_UART_Init+0x58>)
 8000996:	220c      	movs	r2, #12
 8000998:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800099a:	4b0b      	ldr	r3, [pc, #44]	; (80009c8 <MX_USART2_UART_Init+0x58>)
 800099c:	2200      	movs	r2, #0
 800099e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009a0:	4b09      	ldr	r3, [pc, #36]	; (80009c8 <MX_USART2_UART_Init+0x58>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009a6:	4b08      	ldr	r3, [pc, #32]	; (80009c8 <MX_USART2_UART_Init+0x58>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009ac:	4b06      	ldr	r3, [pc, #24]	; (80009c8 <MX_USART2_UART_Init+0x58>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009b2:	4805      	ldr	r0, [pc, #20]	; (80009c8 <MX_USART2_UART_Init+0x58>)
 80009b4:	f002 fb02 	bl	8002fbc <HAL_UART_Init>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80009be:	f000 f86d 	bl	8000a9c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009c2:	bf00      	nop
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	200000d8 	.word	0x200000d8
 80009cc:	40004400 	.word	0x40004400

080009d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b08a      	sub	sp, #40	; 0x28
 80009d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d6:	f107 0314 	add.w	r3, r7, #20
 80009da:	2200      	movs	r2, #0
 80009dc:	601a      	str	r2, [r3, #0]
 80009de:	605a      	str	r2, [r3, #4]
 80009e0:	609a      	str	r2, [r3, #8]
 80009e2:	60da      	str	r2, [r3, #12]
 80009e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009e6:	4b2b      	ldr	r3, [pc, #172]	; (8000a94 <MX_GPIO_Init+0xc4>)
 80009e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ea:	4a2a      	ldr	r2, [pc, #168]	; (8000a94 <MX_GPIO_Init+0xc4>)
 80009ec:	f043 0304 	orr.w	r3, r3, #4
 80009f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009f2:	4b28      	ldr	r3, [pc, #160]	; (8000a94 <MX_GPIO_Init+0xc4>)
 80009f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009f6:	f003 0304 	and.w	r3, r3, #4
 80009fa:	613b      	str	r3, [r7, #16]
 80009fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009fe:	4b25      	ldr	r3, [pc, #148]	; (8000a94 <MX_GPIO_Init+0xc4>)
 8000a00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a02:	4a24      	ldr	r2, [pc, #144]	; (8000a94 <MX_GPIO_Init+0xc4>)
 8000a04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a0a:	4b22      	ldr	r3, [pc, #136]	; (8000a94 <MX_GPIO_Init+0xc4>)
 8000a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a12:	60fb      	str	r3, [r7, #12]
 8000a14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a16:	4b1f      	ldr	r3, [pc, #124]	; (8000a94 <MX_GPIO_Init+0xc4>)
 8000a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a1a:	4a1e      	ldr	r2, [pc, #120]	; (8000a94 <MX_GPIO_Init+0xc4>)
 8000a1c:	f043 0301 	orr.w	r3, r3, #1
 8000a20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a22:	4b1c      	ldr	r3, [pc, #112]	; (8000a94 <MX_GPIO_Init+0xc4>)
 8000a24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a26:	f003 0301 	and.w	r3, r3, #1
 8000a2a:	60bb      	str	r3, [r7, #8]
 8000a2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a2e:	4b19      	ldr	r3, [pc, #100]	; (8000a94 <MX_GPIO_Init+0xc4>)
 8000a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a32:	4a18      	ldr	r2, [pc, #96]	; (8000a94 <MX_GPIO_Init+0xc4>)
 8000a34:	f043 0302 	orr.w	r3, r3, #2
 8000a38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a3a:	4b16      	ldr	r3, [pc, #88]	; (8000a94 <MX_GPIO_Init+0xc4>)
 8000a3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a3e:	f003 0302 	and.w	r3, r3, #2
 8000a42:	607b      	str	r3, [r7, #4]
 8000a44:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a46:	2200      	movs	r2, #0
 8000a48:	2120      	movs	r1, #32
 8000a4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a4e:	f000 fde9 	bl	8001624 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a52:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a58:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a62:	f107 0314 	add.w	r3, r7, #20
 8000a66:	4619      	mov	r1, r3
 8000a68:	480b      	ldr	r0, [pc, #44]	; (8000a98 <MX_GPIO_Init+0xc8>)
 8000a6a:	f000 fc31 	bl	80012d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a6e:	2320      	movs	r3, #32
 8000a70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a72:	2301      	movs	r3, #1
 8000a74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a76:	2300      	movs	r3, #0
 8000a78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a7e:	f107 0314 	add.w	r3, r7, #20
 8000a82:	4619      	mov	r1, r3
 8000a84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a88:	f000 fc22 	bl	80012d0 <HAL_GPIO_Init>

}
 8000a8c:	bf00      	nop
 8000a8e:	3728      	adds	r7, #40	; 0x28
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	40021000 	.word	0x40021000
 8000a98:	48000800 	.word	0x48000800

08000a9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aa0:	b672      	cpsid	i
}
 8000aa2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aa4:	e7fe      	b.n	8000aa4 <Error_Handler+0x8>

08000aa6 <RingBuffer_Init>:
#include "ringbuffer.h"

// Initializes the ring buffer internal data structures
void RingBuffer_Init(RingBuffer* rb)
{
 8000aa6:	b480      	push	{r7}
 8000aa8:	b083      	sub	sp, #12
 8000aaa:	af00      	add	r7, sp, #0
 8000aac:	6078      	str	r0, [r7, #4]
	rb->_head = 0;
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	601a      	str	r2, [r3, #0]
	rb->_tail = 0;
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	605a      	str	r2, [r3, #4]
}
 8000aba:	bf00      	nop
 8000abc:	370c      	adds	r7, #12
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr

08000ac6 <RingBuffer_FreeSpace>:
	return rb->_tail == (rb->_head + 1) % RING_BUFFER_SIZE;
}

// returns the amount of free space in the buffer
int RingBuffer_FreeSpace(RingBuffer* rb)
{
 8000ac6:	b480      	push	{r7}
 8000ac8:	b083      	sub	sp, #12
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	6078      	str	r0, [r7, #4]
	if (rb->_head >= rb->_tail) {
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681a      	ldr	r2, [r3, #0]
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	685b      	ldr	r3, [r3, #4]
 8000ad6:	429a      	cmp	r2, r3
 8000ad8:	db07      	blt.n	8000aea <RingBuffer_FreeSpace+0x24>
		return RING_BUFFER_SIZE - rb->_head + rb->_tail;
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	f1c3 0264 	rsb	r2, r3, #100	; 0x64
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	685b      	ldr	r3, [r3, #4]
 8000ae6:	4413      	add	r3, r2
 8000ae8:	e005      	b.n	8000af6 <RingBuffer_FreeSpace+0x30>
	}
	else {
		return rb->_tail - rb->_head - 1;
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	685a      	ldr	r2, [r3, #4]
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	1ad3      	subs	r3, r2, r3
 8000af4:	3b01      	subs	r3, #1
	}
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	370c      	adds	r7, #12
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr
	...

08000b04 <RingBuffer_Write>:

// Writes the data from the input array to the ring buffer.
// If it does not have enough space returns 0 and does not write any bytes,
// otherwise writes the bytes to the ring buffer and returns 1
int RingBuffer_Write(RingBuffer* rb, uint8_t * data, size_t dataSize)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b086      	sub	sp, #24
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	60f8      	str	r0, [r7, #12]
 8000b0c:	60b9      	str	r1, [r7, #8]
 8000b0e:	607a      	str	r2, [r7, #4]
	if (dataSize >= RingBuffer_FreeSpace(rb)) {
 8000b10:	68f8      	ldr	r0, [r7, #12]
 8000b12:	f7ff ffd8 	bl	8000ac6 <RingBuffer_FreeSpace>
 8000b16:	4603      	mov	r3, r0
 8000b18:	461a      	mov	r2, r3
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	4293      	cmp	r3, r2
 8000b1e:	d301      	bcc.n	8000b24 <RingBuffer_Write+0x20>
		return 0;
 8000b20:	2300      	movs	r3, #0
 8000b22:	e023      	b.n	8000b6c <RingBuffer_Write+0x68>
	}

	for (size_t i = 0; i < dataSize; i++) {
 8000b24:	2300      	movs	r3, #0
 8000b26:	617b      	str	r3, [r7, #20]
 8000b28:	e01b      	b.n	8000b62 <RingBuffer_Write+0x5e>
		rb->_buffer[rb->_head] = *data++;
 8000b2a:	68bb      	ldr	r3, [r7, #8]
 8000b2c:	1c5a      	adds	r2, r3, #1
 8000b2e:	60ba      	str	r2, [r7, #8]
 8000b30:	68fa      	ldr	r2, [r7, #12]
 8000b32:	6812      	ldr	r2, [r2, #0]
 8000b34:	7819      	ldrb	r1, [r3, #0]
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	4413      	add	r3, r2
 8000b3a:	460a      	mov	r2, r1
 8000b3c:	721a      	strb	r2, [r3, #8]
		rb->_head = (rb->_head + 1) % RING_BUFFER_SIZE;
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	1c5a      	adds	r2, r3, #1
 8000b44:	4b0b      	ldr	r3, [pc, #44]	; (8000b74 <RingBuffer_Write+0x70>)
 8000b46:	fb83 1302 	smull	r1, r3, r3, r2
 8000b4a:	1159      	asrs	r1, r3, #5
 8000b4c:	17d3      	asrs	r3, r2, #31
 8000b4e:	1acb      	subs	r3, r1, r3
 8000b50:	2164      	movs	r1, #100	; 0x64
 8000b52:	fb01 f303 	mul.w	r3, r1, r3
 8000b56:	1ad3      	subs	r3, r2, r3
 8000b58:	68fa      	ldr	r2, [r7, #12]
 8000b5a:	6013      	str	r3, [r2, #0]
	for (size_t i = 0; i < dataSize; i++) {
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	3301      	adds	r3, #1
 8000b60:	617b      	str	r3, [r7, #20]
 8000b62:	697a      	ldr	r2, [r7, #20]
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	429a      	cmp	r2, r3
 8000b68:	d3df      	bcc.n	8000b2a <RingBuffer_Write+0x26>
	}
	return 1;
 8000b6a:	2301      	movs	r3, #1
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	3718      	adds	r7, #24
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	51eb851f 	.word	0x51eb851f

08000b78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b7e:	4b0f      	ldr	r3, [pc, #60]	; (8000bbc <HAL_MspInit+0x44>)
 8000b80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b82:	4a0e      	ldr	r2, [pc, #56]	; (8000bbc <HAL_MspInit+0x44>)
 8000b84:	f043 0301 	orr.w	r3, r3, #1
 8000b88:	6613      	str	r3, [r2, #96]	; 0x60
 8000b8a:	4b0c      	ldr	r3, [pc, #48]	; (8000bbc <HAL_MspInit+0x44>)
 8000b8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b8e:	f003 0301 	and.w	r3, r3, #1
 8000b92:	607b      	str	r3, [r7, #4]
 8000b94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b96:	4b09      	ldr	r3, [pc, #36]	; (8000bbc <HAL_MspInit+0x44>)
 8000b98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b9a:	4a08      	ldr	r2, [pc, #32]	; (8000bbc <HAL_MspInit+0x44>)
 8000b9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ba0:	6593      	str	r3, [r2, #88]	; 0x58
 8000ba2:	4b06      	ldr	r3, [pc, #24]	; (8000bbc <HAL_MspInit+0x44>)
 8000ba4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ba6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000baa:	603b      	str	r3, [r7, #0]
 8000bac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bae:	bf00      	nop
 8000bb0:	370c      	adds	r7, #12
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	40021000 	.word	0x40021000

08000bc0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b085      	sub	sp, #20
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a0a      	ldr	r2, [pc, #40]	; (8000bf8 <HAL_TIM_Base_MspInit+0x38>)
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d10b      	bne.n	8000bea <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000bd2:	4b0a      	ldr	r3, [pc, #40]	; (8000bfc <HAL_TIM_Base_MspInit+0x3c>)
 8000bd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bd6:	4a09      	ldr	r2, [pc, #36]	; (8000bfc <HAL_TIM_Base_MspInit+0x3c>)
 8000bd8:	f043 0310 	orr.w	r3, r3, #16
 8000bdc:	6593      	str	r3, [r2, #88]	; 0x58
 8000bde:	4b07      	ldr	r3, [pc, #28]	; (8000bfc <HAL_TIM_Base_MspInit+0x3c>)
 8000be0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000be2:	f003 0310 	and.w	r3, r3, #16
 8000be6:	60fb      	str	r3, [r7, #12]
 8000be8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000bea:	bf00      	nop
 8000bec:	3714      	adds	r7, #20
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop
 8000bf8:	40001000 	.word	0x40001000
 8000bfc:	40021000 	.word	0x40021000

08000c00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b0ac      	sub	sp, #176	; 0xb0
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c08:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	601a      	str	r2, [r3, #0]
 8000c10:	605a      	str	r2, [r3, #4]
 8000c12:	609a      	str	r2, [r3, #8]
 8000c14:	60da      	str	r2, [r3, #12]
 8000c16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c18:	f107 0314 	add.w	r3, r7, #20
 8000c1c:	2288      	movs	r2, #136	; 0x88
 8000c1e:	2100      	movs	r1, #0
 8000c20:	4618      	mov	r0, r3
 8000c22:	f003 fcdf 	bl	80045e4 <memset>
  if(huart->Instance==USART2)
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4a25      	ldr	r2, [pc, #148]	; (8000cc0 <HAL_UART_MspInit+0xc0>)
 8000c2c:	4293      	cmp	r3, r2
 8000c2e:	d143      	bne.n	8000cb8 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000c30:	2302      	movs	r3, #2
 8000c32:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000c34:	2300      	movs	r3, #0
 8000c36:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c38:	f107 0314 	add.w	r3, r7, #20
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f001 fb87 	bl	8002350 <HAL_RCCEx_PeriphCLKConfig>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000c48:	f7ff ff28 	bl	8000a9c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c4c:	4b1d      	ldr	r3, [pc, #116]	; (8000cc4 <HAL_UART_MspInit+0xc4>)
 8000c4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c50:	4a1c      	ldr	r2, [pc, #112]	; (8000cc4 <HAL_UART_MspInit+0xc4>)
 8000c52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c56:	6593      	str	r3, [r2, #88]	; 0x58
 8000c58:	4b1a      	ldr	r3, [pc, #104]	; (8000cc4 <HAL_UART_MspInit+0xc4>)
 8000c5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c60:	613b      	str	r3, [r7, #16]
 8000c62:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c64:	4b17      	ldr	r3, [pc, #92]	; (8000cc4 <HAL_UART_MspInit+0xc4>)
 8000c66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c68:	4a16      	ldr	r2, [pc, #88]	; (8000cc4 <HAL_UART_MspInit+0xc4>)
 8000c6a:	f043 0301 	orr.w	r3, r3, #1
 8000c6e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c70:	4b14      	ldr	r3, [pc, #80]	; (8000cc4 <HAL_UART_MspInit+0xc4>)
 8000c72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c74:	f003 0301 	and.w	r3, r3, #1
 8000c78:	60fb      	str	r3, [r7, #12]
 8000c7a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c7c:	230c      	movs	r3, #12
 8000c7e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c82:	2302      	movs	r3, #2
 8000c84:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c8e:	2303      	movs	r3, #3
 8000c90:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c94:	2307      	movs	r3, #7
 8000c96:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c9a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ca4:	f000 fb14 	bl	80012d0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000ca8:	2200      	movs	r2, #0
 8000caa:	2100      	movs	r1, #0
 8000cac:	2026      	movs	r0, #38	; 0x26
 8000cae:	f000 fa5a 	bl	8001166 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000cb2:	2026      	movs	r0, #38	; 0x26
 8000cb4:	f000 fa73 	bl	800119e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000cb8:	bf00      	nop
 8000cba:	37b0      	adds	r7, #176	; 0xb0
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	40004400 	.word	0x40004400
 8000cc4:	40021000 	.word	0x40021000

08000cc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ccc:	e7fe      	b.n	8000ccc <NMI_Handler+0x4>

08000cce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cce:	b480      	push	{r7}
 8000cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cd2:	e7fe      	b.n	8000cd2 <HardFault_Handler+0x4>

08000cd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cd8:	e7fe      	b.n	8000cd8 <MemManage_Handler+0x4>

08000cda <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cda:	b480      	push	{r7}
 8000cdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cde:	e7fe      	b.n	8000cde <BusFault_Handler+0x4>

08000ce0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ce4:	e7fe      	b.n	8000ce4 <UsageFault_Handler+0x4>

08000ce6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ce6:	b480      	push	{r7}
 8000ce8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cea:	bf00      	nop
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr

08000cf4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cf8:	bf00      	nop
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr

08000d02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d02:	b480      	push	{r7}
 8000d04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d06:	bf00      	nop
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr

08000d10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d14:	f000 f92c 	bl	8000f70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d18:	bf00      	nop
 8000d1a:	bd80      	pop	{r7, pc}

08000d1c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000d20:	4802      	ldr	r0, [pc, #8]	; (8000d2c <USART2_IRQHandler+0x10>)
 8000d22:	f002 fb6d 	bl	8003400 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000d26:	bf00      	nop
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	200000d8 	.word	0x200000d8

08000d30 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b086      	sub	sp, #24
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	60f8      	str	r0, [r7, #12]
 8000d38:	60b9      	str	r1, [r7, #8]
 8000d3a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	617b      	str	r3, [r7, #20]
 8000d40:	e00a      	b.n	8000d58 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000d42:	f3af 8000 	nop.w
 8000d46:	4601      	mov	r1, r0
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	1c5a      	adds	r2, r3, #1
 8000d4c:	60ba      	str	r2, [r7, #8]
 8000d4e:	b2ca      	uxtb	r2, r1
 8000d50:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d52:	697b      	ldr	r3, [r7, #20]
 8000d54:	3301      	adds	r3, #1
 8000d56:	617b      	str	r3, [r7, #20]
 8000d58:	697a      	ldr	r2, [r7, #20]
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	429a      	cmp	r2, r3
 8000d5e:	dbf0      	blt.n	8000d42 <_read+0x12>
	}

return len;
 8000d60:	687b      	ldr	r3, [r7, #4]
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	3718      	adds	r7, #24
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}

08000d6a <_close>:
	}
	return len;
}

int _close(int file)
{
 8000d6a:	b480      	push	{r7}
 8000d6c:	b083      	sub	sp, #12
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	6078      	str	r0, [r7, #4]
	return -1;
 8000d72:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	370c      	adds	r7, #12
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr

08000d82 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d82:	b480      	push	{r7}
 8000d84:	b083      	sub	sp, #12
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	6078      	str	r0, [r7, #4]
 8000d8a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d92:	605a      	str	r2, [r3, #4]
	return 0;
 8000d94:	2300      	movs	r3, #0
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	370c      	adds	r7, #12
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr

08000da2 <_isatty>:

int _isatty(int file)
{
 8000da2:	b480      	push	{r7}
 8000da4:	b083      	sub	sp, #12
 8000da6:	af00      	add	r7, sp, #0
 8000da8:	6078      	str	r0, [r7, #4]
	return 1;
 8000daa:	2301      	movs	r3, #1
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	370c      	adds	r7, #12
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr

08000db8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b085      	sub	sp, #20
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	60f8      	str	r0, [r7, #12]
 8000dc0:	60b9      	str	r1, [r7, #8]
 8000dc2:	607a      	str	r2, [r7, #4]
	return 0;
 8000dc4:	2300      	movs	r3, #0
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	3714      	adds	r7, #20
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
	...

08000dd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b086      	sub	sp, #24
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ddc:	4a14      	ldr	r2, [pc, #80]	; (8000e30 <_sbrk+0x5c>)
 8000dde:	4b15      	ldr	r3, [pc, #84]	; (8000e34 <_sbrk+0x60>)
 8000de0:	1ad3      	subs	r3, r2, r3
 8000de2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000de8:	4b13      	ldr	r3, [pc, #76]	; (8000e38 <_sbrk+0x64>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d102      	bne.n	8000df6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000df0:	4b11      	ldr	r3, [pc, #68]	; (8000e38 <_sbrk+0x64>)
 8000df2:	4a12      	ldr	r2, [pc, #72]	; (8000e3c <_sbrk+0x68>)
 8000df4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000df6:	4b10      	ldr	r3, [pc, #64]	; (8000e38 <_sbrk+0x64>)
 8000df8:	681a      	ldr	r2, [r3, #0]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	4413      	add	r3, r2
 8000dfe:	693a      	ldr	r2, [r7, #16]
 8000e00:	429a      	cmp	r2, r3
 8000e02:	d207      	bcs.n	8000e14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e04:	f003 fbc4 	bl	8004590 <__errno>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	220c      	movs	r2, #12
 8000e0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e0e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e12:	e009      	b.n	8000e28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e14:	4b08      	ldr	r3, [pc, #32]	; (8000e38 <_sbrk+0x64>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e1a:	4b07      	ldr	r3, [pc, #28]	; (8000e38 <_sbrk+0x64>)
 8000e1c:	681a      	ldr	r2, [r3, #0]
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4413      	add	r3, r2
 8000e22:	4a05      	ldr	r2, [pc, #20]	; (8000e38 <_sbrk+0x64>)
 8000e24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e26:	68fb      	ldr	r3, [r7, #12]
}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	3718      	adds	r7, #24
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	20018000 	.word	0x20018000
 8000e34:	00000400 	.word	0x00000400
 8000e38:	200002ac 	.word	0x200002ac
 8000e3c:	200002c8 	.word	0x200002c8

08000e40 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000e44:	4b06      	ldr	r3, [pc, #24]	; (8000e60 <SystemInit+0x20>)
 8000e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e4a:	4a05      	ldr	r2, [pc, #20]	; (8000e60 <SystemInit+0x20>)
 8000e4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000e54:	bf00      	nop
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	e000ed00 	.word	0xe000ed00

08000e64 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000e64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e9c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e68:	f7ff ffea 	bl	8000e40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e6c:	480c      	ldr	r0, [pc, #48]	; (8000ea0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e6e:	490d      	ldr	r1, [pc, #52]	; (8000ea4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e70:	4a0d      	ldr	r2, [pc, #52]	; (8000ea8 <LoopForever+0xe>)
  movs r3, #0
 8000e72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e74:	e002      	b.n	8000e7c <LoopCopyDataInit>

08000e76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e7a:	3304      	adds	r3, #4

08000e7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e80:	d3f9      	bcc.n	8000e76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e82:	4a0a      	ldr	r2, [pc, #40]	; (8000eac <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e84:	4c0a      	ldr	r4, [pc, #40]	; (8000eb0 <LoopForever+0x16>)
  movs r3, #0
 8000e86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e88:	e001      	b.n	8000e8e <LoopFillZerobss>

08000e8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e8c:	3204      	adds	r2, #4

08000e8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e90:	d3fb      	bcc.n	8000e8a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e92:	f003 fb83 	bl	800459c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e96:	f7ff fcbf 	bl	8000818 <main>

08000e9a <LoopForever>:

LoopForever:
    b LoopForever
 8000e9a:	e7fe      	b.n	8000e9a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000e9c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000ea0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ea4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000ea8:	08005c98 	.word	0x08005c98
  ldr r2, =_sbss
 8000eac:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000eb0:	200002c4 	.word	0x200002c4

08000eb4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000eb4:	e7fe      	b.n	8000eb4 <ADC1_2_IRQHandler>
	...

08000eb8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ec2:	4b0c      	ldr	r3, [pc, #48]	; (8000ef4 <HAL_Init+0x3c>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4a0b      	ldr	r2, [pc, #44]	; (8000ef4 <HAL_Init+0x3c>)
 8000ec8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ecc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ece:	2003      	movs	r0, #3
 8000ed0:	f000 f93e 	bl	8001150 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ed4:	2000      	movs	r0, #0
 8000ed6:	f000 f80f 	bl	8000ef8 <HAL_InitTick>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d002      	beq.n	8000ee6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	71fb      	strb	r3, [r7, #7]
 8000ee4:	e001      	b.n	8000eea <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ee6:	f7ff fe47 	bl	8000b78 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000eea:	79fb      	ldrb	r3, [r7, #7]
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	3708      	adds	r7, #8
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	40022000 	.word	0x40022000

08000ef8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b084      	sub	sp, #16
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f00:	2300      	movs	r3, #0
 8000f02:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000f04:	4b17      	ldr	r3, [pc, #92]	; (8000f64 <HAL_InitTick+0x6c>)
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d023      	beq.n	8000f54 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000f0c:	4b16      	ldr	r3, [pc, #88]	; (8000f68 <HAL_InitTick+0x70>)
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	4b14      	ldr	r3, [pc, #80]	; (8000f64 <HAL_InitTick+0x6c>)
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	4619      	mov	r1, r3
 8000f16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f22:	4618      	mov	r0, r3
 8000f24:	f000 f949 	bl	80011ba <HAL_SYSTICK_Config>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d10f      	bne.n	8000f4e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	2b0f      	cmp	r3, #15
 8000f32:	d809      	bhi.n	8000f48 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f34:	2200      	movs	r2, #0
 8000f36:	6879      	ldr	r1, [r7, #4]
 8000f38:	f04f 30ff 	mov.w	r0, #4294967295
 8000f3c:	f000 f913 	bl	8001166 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f40:	4a0a      	ldr	r2, [pc, #40]	; (8000f6c <HAL_InitTick+0x74>)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6013      	str	r3, [r2, #0]
 8000f46:	e007      	b.n	8000f58 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	73fb      	strb	r3, [r7, #15]
 8000f4c:	e004      	b.n	8000f58 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	73fb      	strb	r3, [r7, #15]
 8000f52:	e001      	b.n	8000f58 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f54:	2301      	movs	r3, #1
 8000f56:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f58:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3710      	adds	r7, #16
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	20000008 	.word	0x20000008
 8000f68:	20000000 	.word	0x20000000
 8000f6c:	20000004 	.word	0x20000004

08000f70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f74:	4b06      	ldr	r3, [pc, #24]	; (8000f90 <HAL_IncTick+0x20>)
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	461a      	mov	r2, r3
 8000f7a:	4b06      	ldr	r3, [pc, #24]	; (8000f94 <HAL_IncTick+0x24>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	4413      	add	r3, r2
 8000f80:	4a04      	ldr	r2, [pc, #16]	; (8000f94 <HAL_IncTick+0x24>)
 8000f82:	6013      	str	r3, [r2, #0]
}
 8000f84:	bf00      	nop
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	20000008 	.word	0x20000008
 8000f94:	200002b0 	.word	0x200002b0

08000f98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f9c:	4b03      	ldr	r3, [pc, #12]	; (8000fac <HAL_GetTick+0x14>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	200002b0 	.word	0x200002b0

08000fb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b085      	sub	sp, #20
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	f003 0307 	and.w	r3, r3, #7
 8000fbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fc0:	4b0c      	ldr	r3, [pc, #48]	; (8000ff4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fc2:	68db      	ldr	r3, [r3, #12]
 8000fc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fc6:	68ba      	ldr	r2, [r7, #8]
 8000fc8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fcc:	4013      	ands	r3, r2
 8000fce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fd8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fe0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fe2:	4a04      	ldr	r2, [pc, #16]	; (8000ff4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	60d3      	str	r3, [r2, #12]
}
 8000fe8:	bf00      	nop
 8000fea:	3714      	adds	r7, #20
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr
 8000ff4:	e000ed00 	.word	0xe000ed00

08000ff8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ffc:	4b04      	ldr	r3, [pc, #16]	; (8001010 <__NVIC_GetPriorityGrouping+0x18>)
 8000ffe:	68db      	ldr	r3, [r3, #12]
 8001000:	0a1b      	lsrs	r3, r3, #8
 8001002:	f003 0307 	and.w	r3, r3, #7
}
 8001006:	4618      	mov	r0, r3
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr
 8001010:	e000ed00 	.word	0xe000ed00

08001014 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	4603      	mov	r3, r0
 800101c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800101e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001022:	2b00      	cmp	r3, #0
 8001024:	db0b      	blt.n	800103e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001026:	79fb      	ldrb	r3, [r7, #7]
 8001028:	f003 021f 	and.w	r2, r3, #31
 800102c:	4907      	ldr	r1, [pc, #28]	; (800104c <__NVIC_EnableIRQ+0x38>)
 800102e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001032:	095b      	lsrs	r3, r3, #5
 8001034:	2001      	movs	r0, #1
 8001036:	fa00 f202 	lsl.w	r2, r0, r2
 800103a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800103e:	bf00      	nop
 8001040:	370c      	adds	r7, #12
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	e000e100 	.word	0xe000e100

08001050 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	4603      	mov	r3, r0
 8001058:	6039      	str	r1, [r7, #0]
 800105a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800105c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001060:	2b00      	cmp	r3, #0
 8001062:	db0a      	blt.n	800107a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	b2da      	uxtb	r2, r3
 8001068:	490c      	ldr	r1, [pc, #48]	; (800109c <__NVIC_SetPriority+0x4c>)
 800106a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106e:	0112      	lsls	r2, r2, #4
 8001070:	b2d2      	uxtb	r2, r2
 8001072:	440b      	add	r3, r1
 8001074:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001078:	e00a      	b.n	8001090 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	b2da      	uxtb	r2, r3
 800107e:	4908      	ldr	r1, [pc, #32]	; (80010a0 <__NVIC_SetPriority+0x50>)
 8001080:	79fb      	ldrb	r3, [r7, #7]
 8001082:	f003 030f 	and.w	r3, r3, #15
 8001086:	3b04      	subs	r3, #4
 8001088:	0112      	lsls	r2, r2, #4
 800108a:	b2d2      	uxtb	r2, r2
 800108c:	440b      	add	r3, r1
 800108e:	761a      	strb	r2, [r3, #24]
}
 8001090:	bf00      	nop
 8001092:	370c      	adds	r7, #12
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr
 800109c:	e000e100 	.word	0xe000e100
 80010a0:	e000ed00 	.word	0xe000ed00

080010a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b089      	sub	sp, #36	; 0x24
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	60f8      	str	r0, [r7, #12]
 80010ac:	60b9      	str	r1, [r7, #8]
 80010ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	f003 0307 	and.w	r3, r3, #7
 80010b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	f1c3 0307 	rsb	r3, r3, #7
 80010be:	2b04      	cmp	r3, #4
 80010c0:	bf28      	it	cs
 80010c2:	2304      	movcs	r3, #4
 80010c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	3304      	adds	r3, #4
 80010ca:	2b06      	cmp	r3, #6
 80010cc:	d902      	bls.n	80010d4 <NVIC_EncodePriority+0x30>
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	3b03      	subs	r3, #3
 80010d2:	e000      	b.n	80010d6 <NVIC_EncodePriority+0x32>
 80010d4:	2300      	movs	r3, #0
 80010d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010d8:	f04f 32ff 	mov.w	r2, #4294967295
 80010dc:	69bb      	ldr	r3, [r7, #24]
 80010de:	fa02 f303 	lsl.w	r3, r2, r3
 80010e2:	43da      	mvns	r2, r3
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	401a      	ands	r2, r3
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010ec:	f04f 31ff 	mov.w	r1, #4294967295
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	fa01 f303 	lsl.w	r3, r1, r3
 80010f6:	43d9      	mvns	r1, r3
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010fc:	4313      	orrs	r3, r2
         );
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3724      	adds	r7, #36	; 0x24
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
	...

0800110c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	3b01      	subs	r3, #1
 8001118:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800111c:	d301      	bcc.n	8001122 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800111e:	2301      	movs	r3, #1
 8001120:	e00f      	b.n	8001142 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001122:	4a0a      	ldr	r2, [pc, #40]	; (800114c <SysTick_Config+0x40>)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	3b01      	subs	r3, #1
 8001128:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800112a:	210f      	movs	r1, #15
 800112c:	f04f 30ff 	mov.w	r0, #4294967295
 8001130:	f7ff ff8e 	bl	8001050 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001134:	4b05      	ldr	r3, [pc, #20]	; (800114c <SysTick_Config+0x40>)
 8001136:	2200      	movs	r2, #0
 8001138:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800113a:	4b04      	ldr	r3, [pc, #16]	; (800114c <SysTick_Config+0x40>)
 800113c:	2207      	movs	r2, #7
 800113e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001140:	2300      	movs	r3, #0
}
 8001142:	4618      	mov	r0, r3
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	e000e010 	.word	0xe000e010

08001150 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001158:	6878      	ldr	r0, [r7, #4]
 800115a:	f7ff ff29 	bl	8000fb0 <__NVIC_SetPriorityGrouping>
}
 800115e:	bf00      	nop
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}

08001166 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001166:	b580      	push	{r7, lr}
 8001168:	b086      	sub	sp, #24
 800116a:	af00      	add	r7, sp, #0
 800116c:	4603      	mov	r3, r0
 800116e:	60b9      	str	r1, [r7, #8]
 8001170:	607a      	str	r2, [r7, #4]
 8001172:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001174:	2300      	movs	r3, #0
 8001176:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001178:	f7ff ff3e 	bl	8000ff8 <__NVIC_GetPriorityGrouping>
 800117c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800117e:	687a      	ldr	r2, [r7, #4]
 8001180:	68b9      	ldr	r1, [r7, #8]
 8001182:	6978      	ldr	r0, [r7, #20]
 8001184:	f7ff ff8e 	bl	80010a4 <NVIC_EncodePriority>
 8001188:	4602      	mov	r2, r0
 800118a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800118e:	4611      	mov	r1, r2
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff ff5d 	bl	8001050 <__NVIC_SetPriority>
}
 8001196:	bf00      	nop
 8001198:	3718      	adds	r7, #24
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}

0800119e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800119e:	b580      	push	{r7, lr}
 80011a0:	b082      	sub	sp, #8
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	4603      	mov	r3, r0
 80011a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff ff31 	bl	8001014 <__NVIC_EnableIRQ>
}
 80011b2:	bf00      	nop
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}

080011ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011ba:	b580      	push	{r7, lr}
 80011bc:	b082      	sub	sp, #8
 80011be:	af00      	add	r7, sp, #0
 80011c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011c2:	6878      	ldr	r0, [r7, #4]
 80011c4:	f7ff ffa2 	bl	800110c <SysTick_Config>
 80011c8:	4603      	mov	r3, r0
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}

080011d2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80011d2:	b480      	push	{r7}
 80011d4:	b085      	sub	sp, #20
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011da:	2300      	movs	r3, #0
 80011dc:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	2b02      	cmp	r3, #2
 80011e8:	d008      	beq.n	80011fc <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2204      	movs	r2, #4
 80011ee:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2200      	movs	r2, #0
 80011f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80011f8:	2301      	movs	r3, #1
 80011fa:	e022      	b.n	8001242 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f022 020e 	bic.w	r2, r2, #14
 800120a:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	681a      	ldr	r2, [r3, #0]
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f022 0201 	bic.w	r2, r2, #1
 800121a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001220:	f003 021c 	and.w	r2, r3, #28
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001228:	2101      	movs	r1, #1
 800122a:	fa01 f202 	lsl.w	r2, r1, r2
 800122e:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2201      	movs	r2, #1
 8001234:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2200      	movs	r2, #0
 800123c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001240:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001242:	4618      	mov	r0, r3
 8001244:	3714      	adds	r7, #20
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr

0800124e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800124e:	b580      	push	{r7, lr}
 8001250:	b084      	sub	sp, #16
 8001252:	af00      	add	r7, sp, #0
 8001254:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001256:	2300      	movs	r3, #0
 8001258:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001260:	b2db      	uxtb	r3, r3
 8001262:	2b02      	cmp	r3, #2
 8001264:	d005      	beq.n	8001272 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2204      	movs	r2, #4
 800126a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800126c:	2301      	movs	r3, #1
 800126e:	73fb      	strb	r3, [r7, #15]
 8001270:	e029      	b.n	80012c6 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f022 020e 	bic.w	r2, r2, #14
 8001280:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f022 0201 	bic.w	r2, r2, #1
 8001290:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001296:	f003 021c 	and.w	r2, r3, #28
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129e:	2101      	movs	r1, #1
 80012a0:	fa01 f202 	lsl.w	r2, r1, r2
 80012a4:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2201      	movs	r2, #1
 80012aa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2200      	movs	r2, #0
 80012b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d003      	beq.n	80012c6 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012c2:	6878      	ldr	r0, [r7, #4]
 80012c4:	4798      	blx	r3
    }
  }
  return status;
 80012c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	3710      	adds	r7, #16
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}

080012d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b087      	sub	sp, #28
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
 80012d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012da:	2300      	movs	r3, #0
 80012dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012de:	e17f      	b.n	80015e0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	681a      	ldr	r2, [r3, #0]
 80012e4:	2101      	movs	r1, #1
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	fa01 f303 	lsl.w	r3, r1, r3
 80012ec:	4013      	ands	r3, r2
 80012ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	f000 8171 	beq.w	80015da <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	f003 0303 	and.w	r3, r3, #3
 8001300:	2b01      	cmp	r3, #1
 8001302:	d005      	beq.n	8001310 <HAL_GPIO_Init+0x40>
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f003 0303 	and.w	r3, r3, #3
 800130c:	2b02      	cmp	r3, #2
 800130e:	d130      	bne.n	8001372 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	689b      	ldr	r3, [r3, #8]
 8001314:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	005b      	lsls	r3, r3, #1
 800131a:	2203      	movs	r2, #3
 800131c:	fa02 f303 	lsl.w	r3, r2, r3
 8001320:	43db      	mvns	r3, r3
 8001322:	693a      	ldr	r2, [r7, #16]
 8001324:	4013      	ands	r3, r2
 8001326:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	68da      	ldr	r2, [r3, #12]
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	005b      	lsls	r3, r3, #1
 8001330:	fa02 f303 	lsl.w	r3, r2, r3
 8001334:	693a      	ldr	r2, [r7, #16]
 8001336:	4313      	orrs	r3, r2
 8001338:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	693a      	ldr	r2, [r7, #16]
 800133e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001346:	2201      	movs	r2, #1
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	fa02 f303 	lsl.w	r3, r2, r3
 800134e:	43db      	mvns	r3, r3
 8001350:	693a      	ldr	r2, [r7, #16]
 8001352:	4013      	ands	r3, r2
 8001354:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	091b      	lsrs	r3, r3, #4
 800135c:	f003 0201 	and.w	r2, r3, #1
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	fa02 f303 	lsl.w	r3, r2, r3
 8001366:	693a      	ldr	r2, [r7, #16]
 8001368:	4313      	orrs	r3, r2
 800136a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	693a      	ldr	r2, [r7, #16]
 8001370:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	f003 0303 	and.w	r3, r3, #3
 800137a:	2b03      	cmp	r3, #3
 800137c:	d118      	bne.n	80013b0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001382:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001384:	2201      	movs	r2, #1
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	fa02 f303 	lsl.w	r3, r2, r3
 800138c:	43db      	mvns	r3, r3
 800138e:	693a      	ldr	r2, [r7, #16]
 8001390:	4013      	ands	r3, r2
 8001392:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	08db      	lsrs	r3, r3, #3
 800139a:	f003 0201 	and.w	r2, r3, #1
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	fa02 f303 	lsl.w	r3, r2, r3
 80013a4:	693a      	ldr	r2, [r7, #16]
 80013a6:	4313      	orrs	r3, r2
 80013a8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	693a      	ldr	r2, [r7, #16]
 80013ae:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f003 0303 	and.w	r3, r3, #3
 80013b8:	2b03      	cmp	r3, #3
 80013ba:	d017      	beq.n	80013ec <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	68db      	ldr	r3, [r3, #12]
 80013c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	005b      	lsls	r3, r3, #1
 80013c6:	2203      	movs	r2, #3
 80013c8:	fa02 f303 	lsl.w	r3, r2, r3
 80013cc:	43db      	mvns	r3, r3
 80013ce:	693a      	ldr	r2, [r7, #16]
 80013d0:	4013      	ands	r3, r2
 80013d2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	689a      	ldr	r2, [r3, #8]
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	005b      	lsls	r3, r3, #1
 80013dc:	fa02 f303 	lsl.w	r3, r2, r3
 80013e0:	693a      	ldr	r2, [r7, #16]
 80013e2:	4313      	orrs	r3, r2
 80013e4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	693a      	ldr	r2, [r7, #16]
 80013ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f003 0303 	and.w	r3, r3, #3
 80013f4:	2b02      	cmp	r3, #2
 80013f6:	d123      	bne.n	8001440 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	08da      	lsrs	r2, r3, #3
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	3208      	adds	r2, #8
 8001400:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001404:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	f003 0307 	and.w	r3, r3, #7
 800140c:	009b      	lsls	r3, r3, #2
 800140e:	220f      	movs	r2, #15
 8001410:	fa02 f303 	lsl.w	r3, r2, r3
 8001414:	43db      	mvns	r3, r3
 8001416:	693a      	ldr	r2, [r7, #16]
 8001418:	4013      	ands	r3, r2
 800141a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	691a      	ldr	r2, [r3, #16]
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	f003 0307 	and.w	r3, r3, #7
 8001426:	009b      	lsls	r3, r3, #2
 8001428:	fa02 f303 	lsl.w	r3, r2, r3
 800142c:	693a      	ldr	r2, [r7, #16]
 800142e:	4313      	orrs	r3, r2
 8001430:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	08da      	lsrs	r2, r3, #3
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	3208      	adds	r2, #8
 800143a:	6939      	ldr	r1, [r7, #16]
 800143c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	005b      	lsls	r3, r3, #1
 800144a:	2203      	movs	r2, #3
 800144c:	fa02 f303 	lsl.w	r3, r2, r3
 8001450:	43db      	mvns	r3, r3
 8001452:	693a      	ldr	r2, [r7, #16]
 8001454:	4013      	ands	r3, r2
 8001456:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f003 0203 	and.w	r2, r3, #3
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	005b      	lsls	r3, r3, #1
 8001464:	fa02 f303 	lsl.w	r3, r2, r3
 8001468:	693a      	ldr	r2, [r7, #16]
 800146a:	4313      	orrs	r3, r2
 800146c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	693a      	ldr	r2, [r7, #16]
 8001472:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800147c:	2b00      	cmp	r3, #0
 800147e:	f000 80ac 	beq.w	80015da <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001482:	4b5f      	ldr	r3, [pc, #380]	; (8001600 <HAL_GPIO_Init+0x330>)
 8001484:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001486:	4a5e      	ldr	r2, [pc, #376]	; (8001600 <HAL_GPIO_Init+0x330>)
 8001488:	f043 0301 	orr.w	r3, r3, #1
 800148c:	6613      	str	r3, [r2, #96]	; 0x60
 800148e:	4b5c      	ldr	r3, [pc, #368]	; (8001600 <HAL_GPIO_Init+0x330>)
 8001490:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001492:	f003 0301 	and.w	r3, r3, #1
 8001496:	60bb      	str	r3, [r7, #8]
 8001498:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800149a:	4a5a      	ldr	r2, [pc, #360]	; (8001604 <HAL_GPIO_Init+0x334>)
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	089b      	lsrs	r3, r3, #2
 80014a0:	3302      	adds	r3, #2
 80014a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	f003 0303 	and.w	r3, r3, #3
 80014ae:	009b      	lsls	r3, r3, #2
 80014b0:	220f      	movs	r2, #15
 80014b2:	fa02 f303 	lsl.w	r3, r2, r3
 80014b6:	43db      	mvns	r3, r3
 80014b8:	693a      	ldr	r2, [r7, #16]
 80014ba:	4013      	ands	r3, r2
 80014bc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80014c4:	d025      	beq.n	8001512 <HAL_GPIO_Init+0x242>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4a4f      	ldr	r2, [pc, #316]	; (8001608 <HAL_GPIO_Init+0x338>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d01f      	beq.n	800150e <HAL_GPIO_Init+0x23e>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4a4e      	ldr	r2, [pc, #312]	; (800160c <HAL_GPIO_Init+0x33c>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d019      	beq.n	800150a <HAL_GPIO_Init+0x23a>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4a4d      	ldr	r2, [pc, #308]	; (8001610 <HAL_GPIO_Init+0x340>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d013      	beq.n	8001506 <HAL_GPIO_Init+0x236>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	4a4c      	ldr	r2, [pc, #304]	; (8001614 <HAL_GPIO_Init+0x344>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d00d      	beq.n	8001502 <HAL_GPIO_Init+0x232>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	4a4b      	ldr	r2, [pc, #300]	; (8001618 <HAL_GPIO_Init+0x348>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d007      	beq.n	80014fe <HAL_GPIO_Init+0x22e>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	4a4a      	ldr	r2, [pc, #296]	; (800161c <HAL_GPIO_Init+0x34c>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d101      	bne.n	80014fa <HAL_GPIO_Init+0x22a>
 80014f6:	2306      	movs	r3, #6
 80014f8:	e00c      	b.n	8001514 <HAL_GPIO_Init+0x244>
 80014fa:	2307      	movs	r3, #7
 80014fc:	e00a      	b.n	8001514 <HAL_GPIO_Init+0x244>
 80014fe:	2305      	movs	r3, #5
 8001500:	e008      	b.n	8001514 <HAL_GPIO_Init+0x244>
 8001502:	2304      	movs	r3, #4
 8001504:	e006      	b.n	8001514 <HAL_GPIO_Init+0x244>
 8001506:	2303      	movs	r3, #3
 8001508:	e004      	b.n	8001514 <HAL_GPIO_Init+0x244>
 800150a:	2302      	movs	r3, #2
 800150c:	e002      	b.n	8001514 <HAL_GPIO_Init+0x244>
 800150e:	2301      	movs	r3, #1
 8001510:	e000      	b.n	8001514 <HAL_GPIO_Init+0x244>
 8001512:	2300      	movs	r3, #0
 8001514:	697a      	ldr	r2, [r7, #20]
 8001516:	f002 0203 	and.w	r2, r2, #3
 800151a:	0092      	lsls	r2, r2, #2
 800151c:	4093      	lsls	r3, r2
 800151e:	693a      	ldr	r2, [r7, #16]
 8001520:	4313      	orrs	r3, r2
 8001522:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001524:	4937      	ldr	r1, [pc, #220]	; (8001604 <HAL_GPIO_Init+0x334>)
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	089b      	lsrs	r3, r3, #2
 800152a:	3302      	adds	r3, #2
 800152c:	693a      	ldr	r2, [r7, #16]
 800152e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001532:	4b3b      	ldr	r3, [pc, #236]	; (8001620 <HAL_GPIO_Init+0x350>)
 8001534:	689b      	ldr	r3, [r3, #8]
 8001536:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	43db      	mvns	r3, r3
 800153c:	693a      	ldr	r2, [r7, #16]
 800153e:	4013      	ands	r3, r2
 8001540:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800154a:	2b00      	cmp	r3, #0
 800154c:	d003      	beq.n	8001556 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800154e:	693a      	ldr	r2, [r7, #16]
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	4313      	orrs	r3, r2
 8001554:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001556:	4a32      	ldr	r2, [pc, #200]	; (8001620 <HAL_GPIO_Init+0x350>)
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800155c:	4b30      	ldr	r3, [pc, #192]	; (8001620 <HAL_GPIO_Init+0x350>)
 800155e:	68db      	ldr	r3, [r3, #12]
 8001560:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	43db      	mvns	r3, r3
 8001566:	693a      	ldr	r2, [r7, #16]
 8001568:	4013      	ands	r3, r2
 800156a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001574:	2b00      	cmp	r3, #0
 8001576:	d003      	beq.n	8001580 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001578:	693a      	ldr	r2, [r7, #16]
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	4313      	orrs	r3, r2
 800157e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001580:	4a27      	ldr	r2, [pc, #156]	; (8001620 <HAL_GPIO_Init+0x350>)
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001586:	4b26      	ldr	r3, [pc, #152]	; (8001620 <HAL_GPIO_Init+0x350>)
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	43db      	mvns	r3, r3
 8001590:	693a      	ldr	r2, [r7, #16]
 8001592:	4013      	ands	r3, r2
 8001594:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d003      	beq.n	80015aa <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80015a2:	693a      	ldr	r2, [r7, #16]
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	4313      	orrs	r3, r2
 80015a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80015aa:	4a1d      	ldr	r2, [pc, #116]	; (8001620 <HAL_GPIO_Init+0x350>)
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80015b0:	4b1b      	ldr	r3, [pc, #108]	; (8001620 <HAL_GPIO_Init+0x350>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	43db      	mvns	r3, r3
 80015ba:	693a      	ldr	r2, [r7, #16]
 80015bc:	4013      	ands	r3, r2
 80015be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d003      	beq.n	80015d4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80015cc:	693a      	ldr	r2, [r7, #16]
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	4313      	orrs	r3, r2
 80015d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80015d4:	4a12      	ldr	r2, [pc, #72]	; (8001620 <HAL_GPIO_Init+0x350>)
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	3301      	adds	r3, #1
 80015de:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	fa22 f303 	lsr.w	r3, r2, r3
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	f47f ae78 	bne.w	80012e0 <HAL_GPIO_Init+0x10>
  }
}
 80015f0:	bf00      	nop
 80015f2:	bf00      	nop
 80015f4:	371c      	adds	r7, #28
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	40021000 	.word	0x40021000
 8001604:	40010000 	.word	0x40010000
 8001608:	48000400 	.word	0x48000400
 800160c:	48000800 	.word	0x48000800
 8001610:	48000c00 	.word	0x48000c00
 8001614:	48001000 	.word	0x48001000
 8001618:	48001400 	.word	0x48001400
 800161c:	48001800 	.word	0x48001800
 8001620:	40010400 	.word	0x40010400

08001624 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	460b      	mov	r3, r1
 800162e:	807b      	strh	r3, [r7, #2]
 8001630:	4613      	mov	r3, r2
 8001632:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001634:	787b      	ldrb	r3, [r7, #1]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d003      	beq.n	8001642 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800163a:	887a      	ldrh	r2, [r7, #2]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001640:	e002      	b.n	8001648 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001642:	887a      	ldrh	r2, [r7, #2]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001648:	bf00      	nop
 800164a:	370c      	adds	r7, #12
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr

08001654 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001654:	b480      	push	{r7}
 8001656:	b085      	sub	sp, #20
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
 800165c:	460b      	mov	r3, r1
 800165e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	695b      	ldr	r3, [r3, #20]
 8001664:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001666:	887a      	ldrh	r2, [r7, #2]
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	4013      	ands	r3, r2
 800166c:	041a      	lsls	r2, r3, #16
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	43d9      	mvns	r1, r3
 8001672:	887b      	ldrh	r3, [r7, #2]
 8001674:	400b      	ands	r3, r1
 8001676:	431a      	orrs	r2, r3
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	619a      	str	r2, [r3, #24]
}
 800167c:	bf00      	nop
 800167e:	3714      	adds	r7, #20
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr

08001688 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800168c:	4b04      	ldr	r3, [pc, #16]	; (80016a0 <HAL_PWREx_GetVoltageRange+0x18>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001694:	4618      	mov	r0, r3
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	40007000 	.word	0x40007000

080016a4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b085      	sub	sp, #20
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016b2:	d130      	bne.n	8001716 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80016b4:	4b23      	ldr	r3, [pc, #140]	; (8001744 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80016bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016c0:	d038      	beq.n	8001734 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80016c2:	4b20      	ldr	r3, [pc, #128]	; (8001744 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80016ca:	4a1e      	ldr	r2, [pc, #120]	; (8001744 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016d0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80016d2:	4b1d      	ldr	r3, [pc, #116]	; (8001748 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	2232      	movs	r2, #50	; 0x32
 80016d8:	fb02 f303 	mul.w	r3, r2, r3
 80016dc:	4a1b      	ldr	r2, [pc, #108]	; (800174c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80016de:	fba2 2303 	umull	r2, r3, r2, r3
 80016e2:	0c9b      	lsrs	r3, r3, #18
 80016e4:	3301      	adds	r3, #1
 80016e6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016e8:	e002      	b.n	80016f0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	3b01      	subs	r3, #1
 80016ee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016f0:	4b14      	ldr	r3, [pc, #80]	; (8001744 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016f2:	695b      	ldr	r3, [r3, #20]
 80016f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016fc:	d102      	bne.n	8001704 <HAL_PWREx_ControlVoltageScaling+0x60>
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d1f2      	bne.n	80016ea <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001704:	4b0f      	ldr	r3, [pc, #60]	; (8001744 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001706:	695b      	ldr	r3, [r3, #20]
 8001708:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800170c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001710:	d110      	bne.n	8001734 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001712:	2303      	movs	r3, #3
 8001714:	e00f      	b.n	8001736 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001716:	4b0b      	ldr	r3, [pc, #44]	; (8001744 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800171e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001722:	d007      	beq.n	8001734 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001724:	4b07      	ldr	r3, [pc, #28]	; (8001744 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800172c:	4a05      	ldr	r2, [pc, #20]	; (8001744 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800172e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001732:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001734:	2300      	movs	r3, #0
}
 8001736:	4618      	mov	r0, r3
 8001738:	3714      	adds	r7, #20
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	40007000 	.word	0x40007000
 8001748:	20000000 	.word	0x20000000
 800174c:	431bde83 	.word	0x431bde83

08001750 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b088      	sub	sp, #32
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d101      	bne.n	8001762 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	e3ca      	b.n	8001ef8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001762:	4b97      	ldr	r3, [pc, #604]	; (80019c0 <HAL_RCC_OscConfig+0x270>)
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	f003 030c 	and.w	r3, r3, #12
 800176a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800176c:	4b94      	ldr	r3, [pc, #592]	; (80019c0 <HAL_RCC_OscConfig+0x270>)
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	f003 0303 	and.w	r3, r3, #3
 8001774:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 0310 	and.w	r3, r3, #16
 800177e:	2b00      	cmp	r3, #0
 8001780:	f000 80e4 	beq.w	800194c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001784:	69bb      	ldr	r3, [r7, #24]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d007      	beq.n	800179a <HAL_RCC_OscConfig+0x4a>
 800178a:	69bb      	ldr	r3, [r7, #24]
 800178c:	2b0c      	cmp	r3, #12
 800178e:	f040 808b 	bne.w	80018a8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	2b01      	cmp	r3, #1
 8001796:	f040 8087 	bne.w	80018a8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800179a:	4b89      	ldr	r3, [pc, #548]	; (80019c0 <HAL_RCC_OscConfig+0x270>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f003 0302 	and.w	r3, r3, #2
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d005      	beq.n	80017b2 <HAL_RCC_OscConfig+0x62>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	699b      	ldr	r3, [r3, #24]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d101      	bne.n	80017b2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	e3a2      	b.n	8001ef8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6a1a      	ldr	r2, [r3, #32]
 80017b6:	4b82      	ldr	r3, [pc, #520]	; (80019c0 <HAL_RCC_OscConfig+0x270>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f003 0308 	and.w	r3, r3, #8
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d004      	beq.n	80017cc <HAL_RCC_OscConfig+0x7c>
 80017c2:	4b7f      	ldr	r3, [pc, #508]	; (80019c0 <HAL_RCC_OscConfig+0x270>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80017ca:	e005      	b.n	80017d8 <HAL_RCC_OscConfig+0x88>
 80017cc:	4b7c      	ldr	r3, [pc, #496]	; (80019c0 <HAL_RCC_OscConfig+0x270>)
 80017ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017d2:	091b      	lsrs	r3, r3, #4
 80017d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80017d8:	4293      	cmp	r3, r2
 80017da:	d223      	bcs.n	8001824 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6a1b      	ldr	r3, [r3, #32]
 80017e0:	4618      	mov	r0, r3
 80017e2:	f000 fd55 	bl	8002290 <RCC_SetFlashLatencyFromMSIRange>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d001      	beq.n	80017f0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80017ec:	2301      	movs	r3, #1
 80017ee:	e383      	b.n	8001ef8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017f0:	4b73      	ldr	r3, [pc, #460]	; (80019c0 <HAL_RCC_OscConfig+0x270>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a72      	ldr	r2, [pc, #456]	; (80019c0 <HAL_RCC_OscConfig+0x270>)
 80017f6:	f043 0308 	orr.w	r3, r3, #8
 80017fa:	6013      	str	r3, [r2, #0]
 80017fc:	4b70      	ldr	r3, [pc, #448]	; (80019c0 <HAL_RCC_OscConfig+0x270>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6a1b      	ldr	r3, [r3, #32]
 8001808:	496d      	ldr	r1, [pc, #436]	; (80019c0 <HAL_RCC_OscConfig+0x270>)
 800180a:	4313      	orrs	r3, r2
 800180c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800180e:	4b6c      	ldr	r3, [pc, #432]	; (80019c0 <HAL_RCC_OscConfig+0x270>)
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	69db      	ldr	r3, [r3, #28]
 800181a:	021b      	lsls	r3, r3, #8
 800181c:	4968      	ldr	r1, [pc, #416]	; (80019c0 <HAL_RCC_OscConfig+0x270>)
 800181e:	4313      	orrs	r3, r2
 8001820:	604b      	str	r3, [r1, #4]
 8001822:	e025      	b.n	8001870 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001824:	4b66      	ldr	r3, [pc, #408]	; (80019c0 <HAL_RCC_OscConfig+0x270>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a65      	ldr	r2, [pc, #404]	; (80019c0 <HAL_RCC_OscConfig+0x270>)
 800182a:	f043 0308 	orr.w	r3, r3, #8
 800182e:	6013      	str	r3, [r2, #0]
 8001830:	4b63      	ldr	r3, [pc, #396]	; (80019c0 <HAL_RCC_OscConfig+0x270>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6a1b      	ldr	r3, [r3, #32]
 800183c:	4960      	ldr	r1, [pc, #384]	; (80019c0 <HAL_RCC_OscConfig+0x270>)
 800183e:	4313      	orrs	r3, r2
 8001840:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001842:	4b5f      	ldr	r3, [pc, #380]	; (80019c0 <HAL_RCC_OscConfig+0x270>)
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	69db      	ldr	r3, [r3, #28]
 800184e:	021b      	lsls	r3, r3, #8
 8001850:	495b      	ldr	r1, [pc, #364]	; (80019c0 <HAL_RCC_OscConfig+0x270>)
 8001852:	4313      	orrs	r3, r2
 8001854:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001856:	69bb      	ldr	r3, [r7, #24]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d109      	bne.n	8001870 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6a1b      	ldr	r3, [r3, #32]
 8001860:	4618      	mov	r0, r3
 8001862:	f000 fd15 	bl	8002290 <RCC_SetFlashLatencyFromMSIRange>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d001      	beq.n	8001870 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800186c:	2301      	movs	r3, #1
 800186e:	e343      	b.n	8001ef8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001870:	f000 fc4a 	bl	8002108 <HAL_RCC_GetSysClockFreq>
 8001874:	4602      	mov	r2, r0
 8001876:	4b52      	ldr	r3, [pc, #328]	; (80019c0 <HAL_RCC_OscConfig+0x270>)
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	091b      	lsrs	r3, r3, #4
 800187c:	f003 030f 	and.w	r3, r3, #15
 8001880:	4950      	ldr	r1, [pc, #320]	; (80019c4 <HAL_RCC_OscConfig+0x274>)
 8001882:	5ccb      	ldrb	r3, [r1, r3]
 8001884:	f003 031f 	and.w	r3, r3, #31
 8001888:	fa22 f303 	lsr.w	r3, r2, r3
 800188c:	4a4e      	ldr	r2, [pc, #312]	; (80019c8 <HAL_RCC_OscConfig+0x278>)
 800188e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001890:	4b4e      	ldr	r3, [pc, #312]	; (80019cc <HAL_RCC_OscConfig+0x27c>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4618      	mov	r0, r3
 8001896:	f7ff fb2f 	bl	8000ef8 <HAL_InitTick>
 800189a:	4603      	mov	r3, r0
 800189c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800189e:	7bfb      	ldrb	r3, [r7, #15]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d052      	beq.n	800194a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80018a4:	7bfb      	ldrb	r3, [r7, #15]
 80018a6:	e327      	b.n	8001ef8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	699b      	ldr	r3, [r3, #24]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d032      	beq.n	8001916 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80018b0:	4b43      	ldr	r3, [pc, #268]	; (80019c0 <HAL_RCC_OscConfig+0x270>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a42      	ldr	r2, [pc, #264]	; (80019c0 <HAL_RCC_OscConfig+0x270>)
 80018b6:	f043 0301 	orr.w	r3, r3, #1
 80018ba:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80018bc:	f7ff fb6c 	bl	8000f98 <HAL_GetTick>
 80018c0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80018c2:	e008      	b.n	80018d6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80018c4:	f7ff fb68 	bl	8000f98 <HAL_GetTick>
 80018c8:	4602      	mov	r2, r0
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	d901      	bls.n	80018d6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80018d2:	2303      	movs	r3, #3
 80018d4:	e310      	b.n	8001ef8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80018d6:	4b3a      	ldr	r3, [pc, #232]	; (80019c0 <HAL_RCC_OscConfig+0x270>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f003 0302 	and.w	r3, r3, #2
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d0f0      	beq.n	80018c4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018e2:	4b37      	ldr	r3, [pc, #220]	; (80019c0 <HAL_RCC_OscConfig+0x270>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a36      	ldr	r2, [pc, #216]	; (80019c0 <HAL_RCC_OscConfig+0x270>)
 80018e8:	f043 0308 	orr.w	r3, r3, #8
 80018ec:	6013      	str	r3, [r2, #0]
 80018ee:	4b34      	ldr	r3, [pc, #208]	; (80019c0 <HAL_RCC_OscConfig+0x270>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6a1b      	ldr	r3, [r3, #32]
 80018fa:	4931      	ldr	r1, [pc, #196]	; (80019c0 <HAL_RCC_OscConfig+0x270>)
 80018fc:	4313      	orrs	r3, r2
 80018fe:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001900:	4b2f      	ldr	r3, [pc, #188]	; (80019c0 <HAL_RCC_OscConfig+0x270>)
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	69db      	ldr	r3, [r3, #28]
 800190c:	021b      	lsls	r3, r3, #8
 800190e:	492c      	ldr	r1, [pc, #176]	; (80019c0 <HAL_RCC_OscConfig+0x270>)
 8001910:	4313      	orrs	r3, r2
 8001912:	604b      	str	r3, [r1, #4]
 8001914:	e01a      	b.n	800194c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001916:	4b2a      	ldr	r3, [pc, #168]	; (80019c0 <HAL_RCC_OscConfig+0x270>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a29      	ldr	r2, [pc, #164]	; (80019c0 <HAL_RCC_OscConfig+0x270>)
 800191c:	f023 0301 	bic.w	r3, r3, #1
 8001920:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001922:	f7ff fb39 	bl	8000f98 <HAL_GetTick>
 8001926:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001928:	e008      	b.n	800193c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800192a:	f7ff fb35 	bl	8000f98 <HAL_GetTick>
 800192e:	4602      	mov	r2, r0
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	1ad3      	subs	r3, r2, r3
 8001934:	2b02      	cmp	r3, #2
 8001936:	d901      	bls.n	800193c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001938:	2303      	movs	r3, #3
 800193a:	e2dd      	b.n	8001ef8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800193c:	4b20      	ldr	r3, [pc, #128]	; (80019c0 <HAL_RCC_OscConfig+0x270>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f003 0302 	and.w	r3, r3, #2
 8001944:	2b00      	cmp	r3, #0
 8001946:	d1f0      	bne.n	800192a <HAL_RCC_OscConfig+0x1da>
 8001948:	e000      	b.n	800194c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800194a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f003 0301 	and.w	r3, r3, #1
 8001954:	2b00      	cmp	r3, #0
 8001956:	d074      	beq.n	8001a42 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001958:	69bb      	ldr	r3, [r7, #24]
 800195a:	2b08      	cmp	r3, #8
 800195c:	d005      	beq.n	800196a <HAL_RCC_OscConfig+0x21a>
 800195e:	69bb      	ldr	r3, [r7, #24]
 8001960:	2b0c      	cmp	r3, #12
 8001962:	d10e      	bne.n	8001982 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	2b03      	cmp	r3, #3
 8001968:	d10b      	bne.n	8001982 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800196a:	4b15      	ldr	r3, [pc, #84]	; (80019c0 <HAL_RCC_OscConfig+0x270>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001972:	2b00      	cmp	r3, #0
 8001974:	d064      	beq.n	8001a40 <HAL_RCC_OscConfig+0x2f0>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d160      	bne.n	8001a40 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	e2ba      	b.n	8001ef8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800198a:	d106      	bne.n	800199a <HAL_RCC_OscConfig+0x24a>
 800198c:	4b0c      	ldr	r3, [pc, #48]	; (80019c0 <HAL_RCC_OscConfig+0x270>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a0b      	ldr	r2, [pc, #44]	; (80019c0 <HAL_RCC_OscConfig+0x270>)
 8001992:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001996:	6013      	str	r3, [r2, #0]
 8001998:	e026      	b.n	80019e8 <HAL_RCC_OscConfig+0x298>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019a2:	d115      	bne.n	80019d0 <HAL_RCC_OscConfig+0x280>
 80019a4:	4b06      	ldr	r3, [pc, #24]	; (80019c0 <HAL_RCC_OscConfig+0x270>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a05      	ldr	r2, [pc, #20]	; (80019c0 <HAL_RCC_OscConfig+0x270>)
 80019aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019ae:	6013      	str	r3, [r2, #0]
 80019b0:	4b03      	ldr	r3, [pc, #12]	; (80019c0 <HAL_RCC_OscConfig+0x270>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a02      	ldr	r2, [pc, #8]	; (80019c0 <HAL_RCC_OscConfig+0x270>)
 80019b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019ba:	6013      	str	r3, [r2, #0]
 80019bc:	e014      	b.n	80019e8 <HAL_RCC_OscConfig+0x298>
 80019be:	bf00      	nop
 80019c0:	40021000 	.word	0x40021000
 80019c4:	08005abc 	.word	0x08005abc
 80019c8:	20000000 	.word	0x20000000
 80019cc:	20000004 	.word	0x20000004
 80019d0:	4ba0      	ldr	r3, [pc, #640]	; (8001c54 <HAL_RCC_OscConfig+0x504>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a9f      	ldr	r2, [pc, #636]	; (8001c54 <HAL_RCC_OscConfig+0x504>)
 80019d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019da:	6013      	str	r3, [r2, #0]
 80019dc:	4b9d      	ldr	r3, [pc, #628]	; (8001c54 <HAL_RCC_OscConfig+0x504>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a9c      	ldr	r2, [pc, #624]	; (8001c54 <HAL_RCC_OscConfig+0x504>)
 80019e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d013      	beq.n	8001a18 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019f0:	f7ff fad2 	bl	8000f98 <HAL_GetTick>
 80019f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019f6:	e008      	b.n	8001a0a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019f8:	f7ff face 	bl	8000f98 <HAL_GetTick>
 80019fc:	4602      	mov	r2, r0
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	2b64      	cmp	r3, #100	; 0x64
 8001a04:	d901      	bls.n	8001a0a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001a06:	2303      	movs	r3, #3
 8001a08:	e276      	b.n	8001ef8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a0a:	4b92      	ldr	r3, [pc, #584]	; (8001c54 <HAL_RCC_OscConfig+0x504>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d0f0      	beq.n	80019f8 <HAL_RCC_OscConfig+0x2a8>
 8001a16:	e014      	b.n	8001a42 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a18:	f7ff fabe 	bl	8000f98 <HAL_GetTick>
 8001a1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a1e:	e008      	b.n	8001a32 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a20:	f7ff faba 	bl	8000f98 <HAL_GetTick>
 8001a24:	4602      	mov	r2, r0
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	2b64      	cmp	r3, #100	; 0x64
 8001a2c:	d901      	bls.n	8001a32 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	e262      	b.n	8001ef8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a32:	4b88      	ldr	r3, [pc, #544]	; (8001c54 <HAL_RCC_OscConfig+0x504>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d1f0      	bne.n	8001a20 <HAL_RCC_OscConfig+0x2d0>
 8001a3e:	e000      	b.n	8001a42 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 0302 	and.w	r3, r3, #2
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d060      	beq.n	8001b10 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001a4e:	69bb      	ldr	r3, [r7, #24]
 8001a50:	2b04      	cmp	r3, #4
 8001a52:	d005      	beq.n	8001a60 <HAL_RCC_OscConfig+0x310>
 8001a54:	69bb      	ldr	r3, [r7, #24]
 8001a56:	2b0c      	cmp	r3, #12
 8001a58:	d119      	bne.n	8001a8e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	2b02      	cmp	r3, #2
 8001a5e:	d116      	bne.n	8001a8e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a60:	4b7c      	ldr	r3, [pc, #496]	; (8001c54 <HAL_RCC_OscConfig+0x504>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d005      	beq.n	8001a78 <HAL_RCC_OscConfig+0x328>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d101      	bne.n	8001a78 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001a74:	2301      	movs	r3, #1
 8001a76:	e23f      	b.n	8001ef8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a78:	4b76      	ldr	r3, [pc, #472]	; (8001c54 <HAL_RCC_OscConfig+0x504>)
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	691b      	ldr	r3, [r3, #16]
 8001a84:	061b      	lsls	r3, r3, #24
 8001a86:	4973      	ldr	r1, [pc, #460]	; (8001c54 <HAL_RCC_OscConfig+0x504>)
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a8c:	e040      	b.n	8001b10 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	68db      	ldr	r3, [r3, #12]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d023      	beq.n	8001ade <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a96:	4b6f      	ldr	r3, [pc, #444]	; (8001c54 <HAL_RCC_OscConfig+0x504>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a6e      	ldr	r2, [pc, #440]	; (8001c54 <HAL_RCC_OscConfig+0x504>)
 8001a9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001aa0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aa2:	f7ff fa79 	bl	8000f98 <HAL_GetTick>
 8001aa6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001aa8:	e008      	b.n	8001abc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001aaa:	f7ff fa75 	bl	8000f98 <HAL_GetTick>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	1ad3      	subs	r3, r2, r3
 8001ab4:	2b02      	cmp	r3, #2
 8001ab6:	d901      	bls.n	8001abc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001ab8:	2303      	movs	r3, #3
 8001aba:	e21d      	b.n	8001ef8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001abc:	4b65      	ldr	r3, [pc, #404]	; (8001c54 <HAL_RCC_OscConfig+0x504>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d0f0      	beq.n	8001aaa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ac8:	4b62      	ldr	r3, [pc, #392]	; (8001c54 <HAL_RCC_OscConfig+0x504>)
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	691b      	ldr	r3, [r3, #16]
 8001ad4:	061b      	lsls	r3, r3, #24
 8001ad6:	495f      	ldr	r1, [pc, #380]	; (8001c54 <HAL_RCC_OscConfig+0x504>)
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	604b      	str	r3, [r1, #4]
 8001adc:	e018      	b.n	8001b10 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ade:	4b5d      	ldr	r3, [pc, #372]	; (8001c54 <HAL_RCC_OscConfig+0x504>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a5c      	ldr	r2, [pc, #368]	; (8001c54 <HAL_RCC_OscConfig+0x504>)
 8001ae4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ae8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aea:	f7ff fa55 	bl	8000f98 <HAL_GetTick>
 8001aee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001af0:	e008      	b.n	8001b04 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001af2:	f7ff fa51 	bl	8000f98 <HAL_GetTick>
 8001af6:	4602      	mov	r2, r0
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	1ad3      	subs	r3, r2, r3
 8001afc:	2b02      	cmp	r3, #2
 8001afe:	d901      	bls.n	8001b04 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001b00:	2303      	movs	r3, #3
 8001b02:	e1f9      	b.n	8001ef8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b04:	4b53      	ldr	r3, [pc, #332]	; (8001c54 <HAL_RCC_OscConfig+0x504>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d1f0      	bne.n	8001af2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 0308 	and.w	r3, r3, #8
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d03c      	beq.n	8001b96 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	695b      	ldr	r3, [r3, #20]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d01c      	beq.n	8001b5e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b24:	4b4b      	ldr	r3, [pc, #300]	; (8001c54 <HAL_RCC_OscConfig+0x504>)
 8001b26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b2a:	4a4a      	ldr	r2, [pc, #296]	; (8001c54 <HAL_RCC_OscConfig+0x504>)
 8001b2c:	f043 0301 	orr.w	r3, r3, #1
 8001b30:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b34:	f7ff fa30 	bl	8000f98 <HAL_GetTick>
 8001b38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b3a:	e008      	b.n	8001b4e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b3c:	f7ff fa2c 	bl	8000f98 <HAL_GetTick>
 8001b40:	4602      	mov	r2, r0
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	2b02      	cmp	r3, #2
 8001b48:	d901      	bls.n	8001b4e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	e1d4      	b.n	8001ef8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b4e:	4b41      	ldr	r3, [pc, #260]	; (8001c54 <HAL_RCC_OscConfig+0x504>)
 8001b50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b54:	f003 0302 	and.w	r3, r3, #2
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d0ef      	beq.n	8001b3c <HAL_RCC_OscConfig+0x3ec>
 8001b5c:	e01b      	b.n	8001b96 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b5e:	4b3d      	ldr	r3, [pc, #244]	; (8001c54 <HAL_RCC_OscConfig+0x504>)
 8001b60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b64:	4a3b      	ldr	r2, [pc, #236]	; (8001c54 <HAL_RCC_OscConfig+0x504>)
 8001b66:	f023 0301 	bic.w	r3, r3, #1
 8001b6a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b6e:	f7ff fa13 	bl	8000f98 <HAL_GetTick>
 8001b72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b74:	e008      	b.n	8001b88 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b76:	f7ff fa0f 	bl	8000f98 <HAL_GetTick>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	1ad3      	subs	r3, r2, r3
 8001b80:	2b02      	cmp	r3, #2
 8001b82:	d901      	bls.n	8001b88 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001b84:	2303      	movs	r3, #3
 8001b86:	e1b7      	b.n	8001ef8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b88:	4b32      	ldr	r3, [pc, #200]	; (8001c54 <HAL_RCC_OscConfig+0x504>)
 8001b8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b8e:	f003 0302 	and.w	r3, r3, #2
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d1ef      	bne.n	8001b76 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 0304 	and.w	r3, r3, #4
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	f000 80a6 	beq.w	8001cf0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001ba8:	4b2a      	ldr	r3, [pc, #168]	; (8001c54 <HAL_RCC_OscConfig+0x504>)
 8001baa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d10d      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bb4:	4b27      	ldr	r3, [pc, #156]	; (8001c54 <HAL_RCC_OscConfig+0x504>)
 8001bb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bb8:	4a26      	ldr	r2, [pc, #152]	; (8001c54 <HAL_RCC_OscConfig+0x504>)
 8001bba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bbe:	6593      	str	r3, [r2, #88]	; 0x58
 8001bc0:	4b24      	ldr	r3, [pc, #144]	; (8001c54 <HAL_RCC_OscConfig+0x504>)
 8001bc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bc8:	60bb      	str	r3, [r7, #8]
 8001bca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bd0:	4b21      	ldr	r3, [pc, #132]	; (8001c58 <HAL_RCC_OscConfig+0x508>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d118      	bne.n	8001c0e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001bdc:	4b1e      	ldr	r3, [pc, #120]	; (8001c58 <HAL_RCC_OscConfig+0x508>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a1d      	ldr	r2, [pc, #116]	; (8001c58 <HAL_RCC_OscConfig+0x508>)
 8001be2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001be6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001be8:	f7ff f9d6 	bl	8000f98 <HAL_GetTick>
 8001bec:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bee:	e008      	b.n	8001c02 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bf0:	f7ff f9d2 	bl	8000f98 <HAL_GetTick>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	2b02      	cmp	r3, #2
 8001bfc:	d901      	bls.n	8001c02 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	e17a      	b.n	8001ef8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c02:	4b15      	ldr	r3, [pc, #84]	; (8001c58 <HAL_RCC_OscConfig+0x508>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d0f0      	beq.n	8001bf0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	d108      	bne.n	8001c28 <HAL_RCC_OscConfig+0x4d8>
 8001c16:	4b0f      	ldr	r3, [pc, #60]	; (8001c54 <HAL_RCC_OscConfig+0x504>)
 8001c18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c1c:	4a0d      	ldr	r2, [pc, #52]	; (8001c54 <HAL_RCC_OscConfig+0x504>)
 8001c1e:	f043 0301 	orr.w	r3, r3, #1
 8001c22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c26:	e029      	b.n	8001c7c <HAL_RCC_OscConfig+0x52c>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	2b05      	cmp	r3, #5
 8001c2e:	d115      	bne.n	8001c5c <HAL_RCC_OscConfig+0x50c>
 8001c30:	4b08      	ldr	r3, [pc, #32]	; (8001c54 <HAL_RCC_OscConfig+0x504>)
 8001c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c36:	4a07      	ldr	r2, [pc, #28]	; (8001c54 <HAL_RCC_OscConfig+0x504>)
 8001c38:	f043 0304 	orr.w	r3, r3, #4
 8001c3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c40:	4b04      	ldr	r3, [pc, #16]	; (8001c54 <HAL_RCC_OscConfig+0x504>)
 8001c42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c46:	4a03      	ldr	r2, [pc, #12]	; (8001c54 <HAL_RCC_OscConfig+0x504>)
 8001c48:	f043 0301 	orr.w	r3, r3, #1
 8001c4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c50:	e014      	b.n	8001c7c <HAL_RCC_OscConfig+0x52c>
 8001c52:	bf00      	nop
 8001c54:	40021000 	.word	0x40021000
 8001c58:	40007000 	.word	0x40007000
 8001c5c:	4b9c      	ldr	r3, [pc, #624]	; (8001ed0 <HAL_RCC_OscConfig+0x780>)
 8001c5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c62:	4a9b      	ldr	r2, [pc, #620]	; (8001ed0 <HAL_RCC_OscConfig+0x780>)
 8001c64:	f023 0301 	bic.w	r3, r3, #1
 8001c68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c6c:	4b98      	ldr	r3, [pc, #608]	; (8001ed0 <HAL_RCC_OscConfig+0x780>)
 8001c6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c72:	4a97      	ldr	r2, [pc, #604]	; (8001ed0 <HAL_RCC_OscConfig+0x780>)
 8001c74:	f023 0304 	bic.w	r3, r3, #4
 8001c78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d016      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c84:	f7ff f988 	bl	8000f98 <HAL_GetTick>
 8001c88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c8a:	e00a      	b.n	8001ca2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c8c:	f7ff f984 	bl	8000f98 <HAL_GetTick>
 8001c90:	4602      	mov	r2, r0
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d901      	bls.n	8001ca2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	e12a      	b.n	8001ef8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ca2:	4b8b      	ldr	r3, [pc, #556]	; (8001ed0 <HAL_RCC_OscConfig+0x780>)
 8001ca4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ca8:	f003 0302 	and.w	r3, r3, #2
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d0ed      	beq.n	8001c8c <HAL_RCC_OscConfig+0x53c>
 8001cb0:	e015      	b.n	8001cde <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cb2:	f7ff f971 	bl	8000f98 <HAL_GetTick>
 8001cb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001cb8:	e00a      	b.n	8001cd0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cba:	f7ff f96d 	bl	8000f98 <HAL_GetTick>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	1ad3      	subs	r3, r2, r3
 8001cc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d901      	bls.n	8001cd0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	e113      	b.n	8001ef8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001cd0:	4b7f      	ldr	r3, [pc, #508]	; (8001ed0 <HAL_RCC_OscConfig+0x780>)
 8001cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cd6:	f003 0302 	and.w	r3, r3, #2
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d1ed      	bne.n	8001cba <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001cde:	7ffb      	ldrb	r3, [r7, #31]
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d105      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ce4:	4b7a      	ldr	r3, [pc, #488]	; (8001ed0 <HAL_RCC_OscConfig+0x780>)
 8001ce6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ce8:	4a79      	ldr	r2, [pc, #484]	; (8001ed0 <HAL_RCC_OscConfig+0x780>)
 8001cea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cee:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	f000 80fe 	beq.w	8001ef6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cfe:	2b02      	cmp	r3, #2
 8001d00:	f040 80d0 	bne.w	8001ea4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001d04:	4b72      	ldr	r3, [pc, #456]	; (8001ed0 <HAL_RCC_OscConfig+0x780>)
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	f003 0203 	and.w	r2, r3, #3
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d130      	bne.n	8001d7a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d22:	3b01      	subs	r3, #1
 8001d24:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d26:	429a      	cmp	r2, r3
 8001d28:	d127      	bne.n	8001d7a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d34:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d36:	429a      	cmp	r2, r3
 8001d38:	d11f      	bne.n	8001d7a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d40:	687a      	ldr	r2, [r7, #4]
 8001d42:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001d44:	2a07      	cmp	r2, #7
 8001d46:	bf14      	ite	ne
 8001d48:	2201      	movne	r2, #1
 8001d4a:	2200      	moveq	r2, #0
 8001d4c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d113      	bne.n	8001d7a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d5c:	085b      	lsrs	r3, r3, #1
 8001d5e:	3b01      	subs	r3, #1
 8001d60:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001d62:	429a      	cmp	r2, r3
 8001d64:	d109      	bne.n	8001d7a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d70:	085b      	lsrs	r3, r3, #1
 8001d72:	3b01      	subs	r3, #1
 8001d74:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d06e      	beq.n	8001e58 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d7a:	69bb      	ldr	r3, [r7, #24]
 8001d7c:	2b0c      	cmp	r3, #12
 8001d7e:	d069      	beq.n	8001e54 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001d80:	4b53      	ldr	r3, [pc, #332]	; (8001ed0 <HAL_RCC_OscConfig+0x780>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d105      	bne.n	8001d98 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001d8c:	4b50      	ldr	r3, [pc, #320]	; (8001ed0 <HAL_RCC_OscConfig+0x780>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d001      	beq.n	8001d9c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e0ad      	b.n	8001ef8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001d9c:	4b4c      	ldr	r3, [pc, #304]	; (8001ed0 <HAL_RCC_OscConfig+0x780>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a4b      	ldr	r2, [pc, #300]	; (8001ed0 <HAL_RCC_OscConfig+0x780>)
 8001da2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001da6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001da8:	f7ff f8f6 	bl	8000f98 <HAL_GetTick>
 8001dac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dae:	e008      	b.n	8001dc2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001db0:	f7ff f8f2 	bl	8000f98 <HAL_GetTick>
 8001db4:	4602      	mov	r2, r0
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d901      	bls.n	8001dc2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	e09a      	b.n	8001ef8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dc2:	4b43      	ldr	r3, [pc, #268]	; (8001ed0 <HAL_RCC_OscConfig+0x780>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d1f0      	bne.n	8001db0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001dce:	4b40      	ldr	r3, [pc, #256]	; (8001ed0 <HAL_RCC_OscConfig+0x780>)
 8001dd0:	68da      	ldr	r2, [r3, #12]
 8001dd2:	4b40      	ldr	r3, [pc, #256]	; (8001ed4 <HAL_RCC_OscConfig+0x784>)
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	687a      	ldr	r2, [r7, #4]
 8001dd8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001dda:	687a      	ldr	r2, [r7, #4]
 8001ddc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001dde:	3a01      	subs	r2, #1
 8001de0:	0112      	lsls	r2, r2, #4
 8001de2:	4311      	orrs	r1, r2
 8001de4:	687a      	ldr	r2, [r7, #4]
 8001de6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001de8:	0212      	lsls	r2, r2, #8
 8001dea:	4311      	orrs	r1, r2
 8001dec:	687a      	ldr	r2, [r7, #4]
 8001dee:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001df0:	0852      	lsrs	r2, r2, #1
 8001df2:	3a01      	subs	r2, #1
 8001df4:	0552      	lsls	r2, r2, #21
 8001df6:	4311      	orrs	r1, r2
 8001df8:	687a      	ldr	r2, [r7, #4]
 8001dfa:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001dfc:	0852      	lsrs	r2, r2, #1
 8001dfe:	3a01      	subs	r2, #1
 8001e00:	0652      	lsls	r2, r2, #25
 8001e02:	4311      	orrs	r1, r2
 8001e04:	687a      	ldr	r2, [r7, #4]
 8001e06:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001e08:	0912      	lsrs	r2, r2, #4
 8001e0a:	0452      	lsls	r2, r2, #17
 8001e0c:	430a      	orrs	r2, r1
 8001e0e:	4930      	ldr	r1, [pc, #192]	; (8001ed0 <HAL_RCC_OscConfig+0x780>)
 8001e10:	4313      	orrs	r3, r2
 8001e12:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001e14:	4b2e      	ldr	r3, [pc, #184]	; (8001ed0 <HAL_RCC_OscConfig+0x780>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a2d      	ldr	r2, [pc, #180]	; (8001ed0 <HAL_RCC_OscConfig+0x780>)
 8001e1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e1e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e20:	4b2b      	ldr	r3, [pc, #172]	; (8001ed0 <HAL_RCC_OscConfig+0x780>)
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	4a2a      	ldr	r2, [pc, #168]	; (8001ed0 <HAL_RCC_OscConfig+0x780>)
 8001e26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e2a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e2c:	f7ff f8b4 	bl	8000f98 <HAL_GetTick>
 8001e30:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e32:	e008      	b.n	8001e46 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e34:	f7ff f8b0 	bl	8000f98 <HAL_GetTick>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	2b02      	cmp	r3, #2
 8001e40:	d901      	bls.n	8001e46 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001e42:	2303      	movs	r3, #3
 8001e44:	e058      	b.n	8001ef8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e46:	4b22      	ldr	r3, [pc, #136]	; (8001ed0 <HAL_RCC_OscConfig+0x780>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d0f0      	beq.n	8001e34 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e52:	e050      	b.n	8001ef6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e04f      	b.n	8001ef8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e58:	4b1d      	ldr	r3, [pc, #116]	; (8001ed0 <HAL_RCC_OscConfig+0x780>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d148      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001e64:	4b1a      	ldr	r3, [pc, #104]	; (8001ed0 <HAL_RCC_OscConfig+0x780>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a19      	ldr	r2, [pc, #100]	; (8001ed0 <HAL_RCC_OscConfig+0x780>)
 8001e6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e6e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e70:	4b17      	ldr	r3, [pc, #92]	; (8001ed0 <HAL_RCC_OscConfig+0x780>)
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	4a16      	ldr	r2, [pc, #88]	; (8001ed0 <HAL_RCC_OscConfig+0x780>)
 8001e76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e7a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001e7c:	f7ff f88c 	bl	8000f98 <HAL_GetTick>
 8001e80:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e82:	e008      	b.n	8001e96 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e84:	f7ff f888 	bl	8000f98 <HAL_GetTick>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	2b02      	cmp	r3, #2
 8001e90:	d901      	bls.n	8001e96 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001e92:	2303      	movs	r3, #3
 8001e94:	e030      	b.n	8001ef8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e96:	4b0e      	ldr	r3, [pc, #56]	; (8001ed0 <HAL_RCC_OscConfig+0x780>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d0f0      	beq.n	8001e84 <HAL_RCC_OscConfig+0x734>
 8001ea2:	e028      	b.n	8001ef6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ea4:	69bb      	ldr	r3, [r7, #24]
 8001ea6:	2b0c      	cmp	r3, #12
 8001ea8:	d023      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eaa:	4b09      	ldr	r3, [pc, #36]	; (8001ed0 <HAL_RCC_OscConfig+0x780>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a08      	ldr	r2, [pc, #32]	; (8001ed0 <HAL_RCC_OscConfig+0x780>)
 8001eb0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001eb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eb6:	f7ff f86f 	bl	8000f98 <HAL_GetTick>
 8001eba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ebc:	e00c      	b.n	8001ed8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ebe:	f7ff f86b 	bl	8000f98 <HAL_GetTick>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	1ad3      	subs	r3, r2, r3
 8001ec8:	2b02      	cmp	r3, #2
 8001eca:	d905      	bls.n	8001ed8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001ecc:	2303      	movs	r3, #3
 8001ece:	e013      	b.n	8001ef8 <HAL_RCC_OscConfig+0x7a8>
 8001ed0:	40021000 	.word	0x40021000
 8001ed4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ed8:	4b09      	ldr	r3, [pc, #36]	; (8001f00 <HAL_RCC_OscConfig+0x7b0>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d1ec      	bne.n	8001ebe <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001ee4:	4b06      	ldr	r3, [pc, #24]	; (8001f00 <HAL_RCC_OscConfig+0x7b0>)
 8001ee6:	68da      	ldr	r2, [r3, #12]
 8001ee8:	4905      	ldr	r1, [pc, #20]	; (8001f00 <HAL_RCC_OscConfig+0x7b0>)
 8001eea:	4b06      	ldr	r3, [pc, #24]	; (8001f04 <HAL_RCC_OscConfig+0x7b4>)
 8001eec:	4013      	ands	r3, r2
 8001eee:	60cb      	str	r3, [r1, #12]
 8001ef0:	e001      	b.n	8001ef6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e000      	b.n	8001ef8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001ef6:	2300      	movs	r3, #0
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	3720      	adds	r7, #32
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	40021000 	.word	0x40021000
 8001f04:	feeefffc 	.word	0xfeeefffc

08001f08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b084      	sub	sp, #16
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d101      	bne.n	8001f1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e0e7      	b.n	80020ec <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f1c:	4b75      	ldr	r3, [pc, #468]	; (80020f4 <HAL_RCC_ClockConfig+0x1ec>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 0307 	and.w	r3, r3, #7
 8001f24:	683a      	ldr	r2, [r7, #0]
 8001f26:	429a      	cmp	r2, r3
 8001f28:	d910      	bls.n	8001f4c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f2a:	4b72      	ldr	r3, [pc, #456]	; (80020f4 <HAL_RCC_ClockConfig+0x1ec>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f023 0207 	bic.w	r2, r3, #7
 8001f32:	4970      	ldr	r1, [pc, #448]	; (80020f4 <HAL_RCC_ClockConfig+0x1ec>)
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	4313      	orrs	r3, r2
 8001f38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f3a:	4b6e      	ldr	r3, [pc, #440]	; (80020f4 <HAL_RCC_ClockConfig+0x1ec>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 0307 	and.w	r3, r3, #7
 8001f42:	683a      	ldr	r2, [r7, #0]
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d001      	beq.n	8001f4c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e0cf      	b.n	80020ec <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 0302 	and.w	r3, r3, #2
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d010      	beq.n	8001f7a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	689a      	ldr	r2, [r3, #8]
 8001f5c:	4b66      	ldr	r3, [pc, #408]	; (80020f8 <HAL_RCC_ClockConfig+0x1f0>)
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d908      	bls.n	8001f7a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f68:	4b63      	ldr	r3, [pc, #396]	; (80020f8 <HAL_RCC_ClockConfig+0x1f0>)
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	4960      	ldr	r1, [pc, #384]	; (80020f8 <HAL_RCC_ClockConfig+0x1f0>)
 8001f76:	4313      	orrs	r3, r2
 8001f78:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 0301 	and.w	r3, r3, #1
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d04c      	beq.n	8002020 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	2b03      	cmp	r3, #3
 8001f8c:	d107      	bne.n	8001f9e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f8e:	4b5a      	ldr	r3, [pc, #360]	; (80020f8 <HAL_RCC_ClockConfig+0x1f0>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d121      	bne.n	8001fde <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e0a6      	b.n	80020ec <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	2b02      	cmp	r3, #2
 8001fa4:	d107      	bne.n	8001fb6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fa6:	4b54      	ldr	r3, [pc, #336]	; (80020f8 <HAL_RCC_ClockConfig+0x1f0>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d115      	bne.n	8001fde <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e09a      	b.n	80020ec <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d107      	bne.n	8001fce <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001fbe:	4b4e      	ldr	r3, [pc, #312]	; (80020f8 <HAL_RCC_ClockConfig+0x1f0>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 0302 	and.w	r3, r3, #2
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d109      	bne.n	8001fde <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e08e      	b.n	80020ec <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fce:	4b4a      	ldr	r3, [pc, #296]	; (80020f8 <HAL_RCC_ClockConfig+0x1f0>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d101      	bne.n	8001fde <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e086      	b.n	80020ec <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001fde:	4b46      	ldr	r3, [pc, #280]	; (80020f8 <HAL_RCC_ClockConfig+0x1f0>)
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	f023 0203 	bic.w	r2, r3, #3
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	4943      	ldr	r1, [pc, #268]	; (80020f8 <HAL_RCC_ClockConfig+0x1f0>)
 8001fec:	4313      	orrs	r3, r2
 8001fee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ff0:	f7fe ffd2 	bl	8000f98 <HAL_GetTick>
 8001ff4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ff6:	e00a      	b.n	800200e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ff8:	f7fe ffce 	bl	8000f98 <HAL_GetTick>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	f241 3288 	movw	r2, #5000	; 0x1388
 8002006:	4293      	cmp	r3, r2
 8002008:	d901      	bls.n	800200e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800200a:	2303      	movs	r3, #3
 800200c:	e06e      	b.n	80020ec <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800200e:	4b3a      	ldr	r3, [pc, #232]	; (80020f8 <HAL_RCC_ClockConfig+0x1f0>)
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	f003 020c 	and.w	r2, r3, #12
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	429a      	cmp	r2, r3
 800201e:	d1eb      	bne.n	8001ff8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 0302 	and.w	r3, r3, #2
 8002028:	2b00      	cmp	r3, #0
 800202a:	d010      	beq.n	800204e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	689a      	ldr	r2, [r3, #8]
 8002030:	4b31      	ldr	r3, [pc, #196]	; (80020f8 <HAL_RCC_ClockConfig+0x1f0>)
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002038:	429a      	cmp	r2, r3
 800203a:	d208      	bcs.n	800204e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800203c:	4b2e      	ldr	r3, [pc, #184]	; (80020f8 <HAL_RCC_ClockConfig+0x1f0>)
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	492b      	ldr	r1, [pc, #172]	; (80020f8 <HAL_RCC_ClockConfig+0x1f0>)
 800204a:	4313      	orrs	r3, r2
 800204c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800204e:	4b29      	ldr	r3, [pc, #164]	; (80020f4 <HAL_RCC_ClockConfig+0x1ec>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0307 	and.w	r3, r3, #7
 8002056:	683a      	ldr	r2, [r7, #0]
 8002058:	429a      	cmp	r2, r3
 800205a:	d210      	bcs.n	800207e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800205c:	4b25      	ldr	r3, [pc, #148]	; (80020f4 <HAL_RCC_ClockConfig+0x1ec>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f023 0207 	bic.w	r2, r3, #7
 8002064:	4923      	ldr	r1, [pc, #140]	; (80020f4 <HAL_RCC_ClockConfig+0x1ec>)
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	4313      	orrs	r3, r2
 800206a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800206c:	4b21      	ldr	r3, [pc, #132]	; (80020f4 <HAL_RCC_ClockConfig+0x1ec>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 0307 	and.w	r3, r3, #7
 8002074:	683a      	ldr	r2, [r7, #0]
 8002076:	429a      	cmp	r2, r3
 8002078:	d001      	beq.n	800207e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e036      	b.n	80020ec <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 0304 	and.w	r3, r3, #4
 8002086:	2b00      	cmp	r3, #0
 8002088:	d008      	beq.n	800209c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800208a:	4b1b      	ldr	r3, [pc, #108]	; (80020f8 <HAL_RCC_ClockConfig+0x1f0>)
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	68db      	ldr	r3, [r3, #12]
 8002096:	4918      	ldr	r1, [pc, #96]	; (80020f8 <HAL_RCC_ClockConfig+0x1f0>)
 8002098:	4313      	orrs	r3, r2
 800209a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 0308 	and.w	r3, r3, #8
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d009      	beq.n	80020bc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020a8:	4b13      	ldr	r3, [pc, #76]	; (80020f8 <HAL_RCC_ClockConfig+0x1f0>)
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	691b      	ldr	r3, [r3, #16]
 80020b4:	00db      	lsls	r3, r3, #3
 80020b6:	4910      	ldr	r1, [pc, #64]	; (80020f8 <HAL_RCC_ClockConfig+0x1f0>)
 80020b8:	4313      	orrs	r3, r2
 80020ba:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80020bc:	f000 f824 	bl	8002108 <HAL_RCC_GetSysClockFreq>
 80020c0:	4602      	mov	r2, r0
 80020c2:	4b0d      	ldr	r3, [pc, #52]	; (80020f8 <HAL_RCC_ClockConfig+0x1f0>)
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	091b      	lsrs	r3, r3, #4
 80020c8:	f003 030f 	and.w	r3, r3, #15
 80020cc:	490b      	ldr	r1, [pc, #44]	; (80020fc <HAL_RCC_ClockConfig+0x1f4>)
 80020ce:	5ccb      	ldrb	r3, [r1, r3]
 80020d0:	f003 031f 	and.w	r3, r3, #31
 80020d4:	fa22 f303 	lsr.w	r3, r2, r3
 80020d8:	4a09      	ldr	r2, [pc, #36]	; (8002100 <HAL_RCC_ClockConfig+0x1f8>)
 80020da:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80020dc:	4b09      	ldr	r3, [pc, #36]	; (8002104 <HAL_RCC_ClockConfig+0x1fc>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4618      	mov	r0, r3
 80020e2:	f7fe ff09 	bl	8000ef8 <HAL_InitTick>
 80020e6:	4603      	mov	r3, r0
 80020e8:	72fb      	strb	r3, [r7, #11]

  return status;
 80020ea:	7afb      	ldrb	r3, [r7, #11]
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3710      	adds	r7, #16
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	40022000 	.word	0x40022000
 80020f8:	40021000 	.word	0x40021000
 80020fc:	08005abc 	.word	0x08005abc
 8002100:	20000000 	.word	0x20000000
 8002104:	20000004 	.word	0x20000004

08002108 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002108:	b480      	push	{r7}
 800210a:	b089      	sub	sp, #36	; 0x24
 800210c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800210e:	2300      	movs	r3, #0
 8002110:	61fb      	str	r3, [r7, #28]
 8002112:	2300      	movs	r3, #0
 8002114:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002116:	4b3e      	ldr	r3, [pc, #248]	; (8002210 <HAL_RCC_GetSysClockFreq+0x108>)
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	f003 030c 	and.w	r3, r3, #12
 800211e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002120:	4b3b      	ldr	r3, [pc, #236]	; (8002210 <HAL_RCC_GetSysClockFreq+0x108>)
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	f003 0303 	and.w	r3, r3, #3
 8002128:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d005      	beq.n	800213c <HAL_RCC_GetSysClockFreq+0x34>
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	2b0c      	cmp	r3, #12
 8002134:	d121      	bne.n	800217a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	2b01      	cmp	r3, #1
 800213a:	d11e      	bne.n	800217a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800213c:	4b34      	ldr	r3, [pc, #208]	; (8002210 <HAL_RCC_GetSysClockFreq+0x108>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0308 	and.w	r3, r3, #8
 8002144:	2b00      	cmp	r3, #0
 8002146:	d107      	bne.n	8002158 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002148:	4b31      	ldr	r3, [pc, #196]	; (8002210 <HAL_RCC_GetSysClockFreq+0x108>)
 800214a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800214e:	0a1b      	lsrs	r3, r3, #8
 8002150:	f003 030f 	and.w	r3, r3, #15
 8002154:	61fb      	str	r3, [r7, #28]
 8002156:	e005      	b.n	8002164 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002158:	4b2d      	ldr	r3, [pc, #180]	; (8002210 <HAL_RCC_GetSysClockFreq+0x108>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	091b      	lsrs	r3, r3, #4
 800215e:	f003 030f 	and.w	r3, r3, #15
 8002162:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002164:	4a2b      	ldr	r2, [pc, #172]	; (8002214 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800216c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d10d      	bne.n	8002190 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002178:	e00a      	b.n	8002190 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	2b04      	cmp	r3, #4
 800217e:	d102      	bne.n	8002186 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002180:	4b25      	ldr	r3, [pc, #148]	; (8002218 <HAL_RCC_GetSysClockFreq+0x110>)
 8002182:	61bb      	str	r3, [r7, #24]
 8002184:	e004      	b.n	8002190 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	2b08      	cmp	r3, #8
 800218a:	d101      	bne.n	8002190 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800218c:	4b23      	ldr	r3, [pc, #140]	; (800221c <HAL_RCC_GetSysClockFreq+0x114>)
 800218e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	2b0c      	cmp	r3, #12
 8002194:	d134      	bne.n	8002200 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002196:	4b1e      	ldr	r3, [pc, #120]	; (8002210 <HAL_RCC_GetSysClockFreq+0x108>)
 8002198:	68db      	ldr	r3, [r3, #12]
 800219a:	f003 0303 	and.w	r3, r3, #3
 800219e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	d003      	beq.n	80021ae <HAL_RCC_GetSysClockFreq+0xa6>
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	2b03      	cmp	r3, #3
 80021aa:	d003      	beq.n	80021b4 <HAL_RCC_GetSysClockFreq+0xac>
 80021ac:	e005      	b.n	80021ba <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80021ae:	4b1a      	ldr	r3, [pc, #104]	; (8002218 <HAL_RCC_GetSysClockFreq+0x110>)
 80021b0:	617b      	str	r3, [r7, #20]
      break;
 80021b2:	e005      	b.n	80021c0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80021b4:	4b19      	ldr	r3, [pc, #100]	; (800221c <HAL_RCC_GetSysClockFreq+0x114>)
 80021b6:	617b      	str	r3, [r7, #20]
      break;
 80021b8:	e002      	b.n	80021c0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	617b      	str	r3, [r7, #20]
      break;
 80021be:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80021c0:	4b13      	ldr	r3, [pc, #76]	; (8002210 <HAL_RCC_GetSysClockFreq+0x108>)
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	091b      	lsrs	r3, r3, #4
 80021c6:	f003 0307 	and.w	r3, r3, #7
 80021ca:	3301      	adds	r3, #1
 80021cc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80021ce:	4b10      	ldr	r3, [pc, #64]	; (8002210 <HAL_RCC_GetSysClockFreq+0x108>)
 80021d0:	68db      	ldr	r3, [r3, #12]
 80021d2:	0a1b      	lsrs	r3, r3, #8
 80021d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80021d8:	697a      	ldr	r2, [r7, #20]
 80021da:	fb03 f202 	mul.w	r2, r3, r2
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80021e4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80021e6:	4b0a      	ldr	r3, [pc, #40]	; (8002210 <HAL_RCC_GetSysClockFreq+0x108>)
 80021e8:	68db      	ldr	r3, [r3, #12]
 80021ea:	0e5b      	lsrs	r3, r3, #25
 80021ec:	f003 0303 	and.w	r3, r3, #3
 80021f0:	3301      	adds	r3, #1
 80021f2:	005b      	lsls	r3, r3, #1
 80021f4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80021f6:	697a      	ldr	r2, [r7, #20]
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80021fe:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002200:	69bb      	ldr	r3, [r7, #24]
}
 8002202:	4618      	mov	r0, r3
 8002204:	3724      	adds	r7, #36	; 0x24
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr
 800220e:	bf00      	nop
 8002210:	40021000 	.word	0x40021000
 8002214:	08005ad4 	.word	0x08005ad4
 8002218:	00f42400 	.word	0x00f42400
 800221c:	007a1200 	.word	0x007a1200

08002220 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002224:	4b03      	ldr	r3, [pc, #12]	; (8002234 <HAL_RCC_GetHCLKFreq+0x14>)
 8002226:	681b      	ldr	r3, [r3, #0]
}
 8002228:	4618      	mov	r0, r3
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr
 8002232:	bf00      	nop
 8002234:	20000000 	.word	0x20000000

08002238 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800223c:	f7ff fff0 	bl	8002220 <HAL_RCC_GetHCLKFreq>
 8002240:	4602      	mov	r2, r0
 8002242:	4b06      	ldr	r3, [pc, #24]	; (800225c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	0a1b      	lsrs	r3, r3, #8
 8002248:	f003 0307 	and.w	r3, r3, #7
 800224c:	4904      	ldr	r1, [pc, #16]	; (8002260 <HAL_RCC_GetPCLK1Freq+0x28>)
 800224e:	5ccb      	ldrb	r3, [r1, r3]
 8002250:	f003 031f 	and.w	r3, r3, #31
 8002254:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002258:	4618      	mov	r0, r3
 800225a:	bd80      	pop	{r7, pc}
 800225c:	40021000 	.word	0x40021000
 8002260:	08005acc 	.word	0x08005acc

08002264 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002268:	f7ff ffda 	bl	8002220 <HAL_RCC_GetHCLKFreq>
 800226c:	4602      	mov	r2, r0
 800226e:	4b06      	ldr	r3, [pc, #24]	; (8002288 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	0adb      	lsrs	r3, r3, #11
 8002274:	f003 0307 	and.w	r3, r3, #7
 8002278:	4904      	ldr	r1, [pc, #16]	; (800228c <HAL_RCC_GetPCLK2Freq+0x28>)
 800227a:	5ccb      	ldrb	r3, [r1, r3]
 800227c:	f003 031f 	and.w	r3, r3, #31
 8002280:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002284:	4618      	mov	r0, r3
 8002286:	bd80      	pop	{r7, pc}
 8002288:	40021000 	.word	0x40021000
 800228c:	08005acc 	.word	0x08005acc

08002290 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b086      	sub	sp, #24
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002298:	2300      	movs	r3, #0
 800229a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800229c:	4b2a      	ldr	r3, [pc, #168]	; (8002348 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800229e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d003      	beq.n	80022b0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80022a8:	f7ff f9ee 	bl	8001688 <HAL_PWREx_GetVoltageRange>
 80022ac:	6178      	str	r0, [r7, #20]
 80022ae:	e014      	b.n	80022da <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80022b0:	4b25      	ldr	r3, [pc, #148]	; (8002348 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022b4:	4a24      	ldr	r2, [pc, #144]	; (8002348 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022ba:	6593      	str	r3, [r2, #88]	; 0x58
 80022bc:	4b22      	ldr	r3, [pc, #136]	; (8002348 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022c4:	60fb      	str	r3, [r7, #12]
 80022c6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80022c8:	f7ff f9de 	bl	8001688 <HAL_PWREx_GetVoltageRange>
 80022cc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80022ce:	4b1e      	ldr	r3, [pc, #120]	; (8002348 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022d2:	4a1d      	ldr	r2, [pc, #116]	; (8002348 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022d8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022e0:	d10b      	bne.n	80022fa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2b80      	cmp	r3, #128	; 0x80
 80022e6:	d919      	bls.n	800231c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2ba0      	cmp	r3, #160	; 0xa0
 80022ec:	d902      	bls.n	80022f4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80022ee:	2302      	movs	r3, #2
 80022f0:	613b      	str	r3, [r7, #16]
 80022f2:	e013      	b.n	800231c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80022f4:	2301      	movs	r3, #1
 80022f6:	613b      	str	r3, [r7, #16]
 80022f8:	e010      	b.n	800231c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2b80      	cmp	r3, #128	; 0x80
 80022fe:	d902      	bls.n	8002306 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002300:	2303      	movs	r3, #3
 8002302:	613b      	str	r3, [r7, #16]
 8002304:	e00a      	b.n	800231c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2b80      	cmp	r3, #128	; 0x80
 800230a:	d102      	bne.n	8002312 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800230c:	2302      	movs	r3, #2
 800230e:	613b      	str	r3, [r7, #16]
 8002310:	e004      	b.n	800231c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2b70      	cmp	r3, #112	; 0x70
 8002316:	d101      	bne.n	800231c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002318:	2301      	movs	r3, #1
 800231a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800231c:	4b0b      	ldr	r3, [pc, #44]	; (800234c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f023 0207 	bic.w	r2, r3, #7
 8002324:	4909      	ldr	r1, [pc, #36]	; (800234c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	4313      	orrs	r3, r2
 800232a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800232c:	4b07      	ldr	r3, [pc, #28]	; (800234c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 0307 	and.w	r3, r3, #7
 8002334:	693a      	ldr	r2, [r7, #16]
 8002336:	429a      	cmp	r2, r3
 8002338:	d001      	beq.n	800233e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e000      	b.n	8002340 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800233e:	2300      	movs	r3, #0
}
 8002340:	4618      	mov	r0, r3
 8002342:	3718      	adds	r7, #24
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}
 8002348:	40021000 	.word	0x40021000
 800234c:	40022000 	.word	0x40022000

08002350 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b086      	sub	sp, #24
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002358:	2300      	movs	r3, #0
 800235a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800235c:	2300      	movs	r3, #0
 800235e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002368:	2b00      	cmp	r3, #0
 800236a:	d041      	beq.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002370:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002374:	d02a      	beq.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002376:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800237a:	d824      	bhi.n	80023c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800237c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002380:	d008      	beq.n	8002394 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002382:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002386:	d81e      	bhi.n	80023c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002388:	2b00      	cmp	r3, #0
 800238a:	d00a      	beq.n	80023a2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800238c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002390:	d010      	beq.n	80023b4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002392:	e018      	b.n	80023c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002394:	4b86      	ldr	r3, [pc, #536]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	4a85      	ldr	r2, [pc, #532]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800239a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800239e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80023a0:	e015      	b.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	3304      	adds	r3, #4
 80023a6:	2100      	movs	r1, #0
 80023a8:	4618      	mov	r0, r3
 80023aa:	f000 fabb 	bl	8002924 <RCCEx_PLLSAI1_Config>
 80023ae:	4603      	mov	r3, r0
 80023b0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80023b2:	e00c      	b.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	3320      	adds	r3, #32
 80023b8:	2100      	movs	r1, #0
 80023ba:	4618      	mov	r0, r3
 80023bc:	f000 fba6 	bl	8002b0c <RCCEx_PLLSAI2_Config>
 80023c0:	4603      	mov	r3, r0
 80023c2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80023c4:	e003      	b.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	74fb      	strb	r3, [r7, #19]
      break;
 80023ca:	e000      	b.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80023cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80023ce:	7cfb      	ldrb	r3, [r7, #19]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d10b      	bne.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80023d4:	4b76      	ldr	r3, [pc, #472]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023da:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80023e2:	4973      	ldr	r1, [pc, #460]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023e4:	4313      	orrs	r3, r2
 80023e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80023ea:	e001      	b.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023ec:	7cfb      	ldrb	r3, [r7, #19]
 80023ee:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d041      	beq.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002400:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002404:	d02a      	beq.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002406:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800240a:	d824      	bhi.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800240c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002410:	d008      	beq.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002412:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002416:	d81e      	bhi.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002418:	2b00      	cmp	r3, #0
 800241a:	d00a      	beq.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800241c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002420:	d010      	beq.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002422:	e018      	b.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002424:	4b62      	ldr	r3, [pc, #392]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	4a61      	ldr	r2, [pc, #388]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800242a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800242e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002430:	e015      	b.n	800245e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	3304      	adds	r3, #4
 8002436:	2100      	movs	r1, #0
 8002438:	4618      	mov	r0, r3
 800243a:	f000 fa73 	bl	8002924 <RCCEx_PLLSAI1_Config>
 800243e:	4603      	mov	r3, r0
 8002440:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002442:	e00c      	b.n	800245e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	3320      	adds	r3, #32
 8002448:	2100      	movs	r1, #0
 800244a:	4618      	mov	r0, r3
 800244c:	f000 fb5e 	bl	8002b0c <RCCEx_PLLSAI2_Config>
 8002450:	4603      	mov	r3, r0
 8002452:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002454:	e003      	b.n	800245e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	74fb      	strb	r3, [r7, #19]
      break;
 800245a:	e000      	b.n	800245e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800245c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800245e:	7cfb      	ldrb	r3, [r7, #19]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d10b      	bne.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002464:	4b52      	ldr	r3, [pc, #328]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002466:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800246a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002472:	494f      	ldr	r1, [pc, #316]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002474:	4313      	orrs	r3, r2
 8002476:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800247a:	e001      	b.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800247c:	7cfb      	ldrb	r3, [r7, #19]
 800247e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002488:	2b00      	cmp	r3, #0
 800248a:	f000 80a0 	beq.w	80025ce <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800248e:	2300      	movs	r3, #0
 8002490:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002492:	4b47      	ldr	r3, [pc, #284]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002494:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002496:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800249a:	2b00      	cmp	r3, #0
 800249c:	d101      	bne.n	80024a2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800249e:	2301      	movs	r3, #1
 80024a0:	e000      	b.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80024a2:	2300      	movs	r3, #0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d00d      	beq.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024a8:	4b41      	ldr	r3, [pc, #260]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ac:	4a40      	ldr	r2, [pc, #256]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024b2:	6593      	str	r3, [r2, #88]	; 0x58
 80024b4:	4b3e      	ldr	r3, [pc, #248]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024bc:	60bb      	str	r3, [r7, #8]
 80024be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024c0:	2301      	movs	r3, #1
 80024c2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024c4:	4b3b      	ldr	r3, [pc, #236]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a3a      	ldr	r2, [pc, #232]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80024ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024ce:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80024d0:	f7fe fd62 	bl	8000f98 <HAL_GetTick>
 80024d4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80024d6:	e009      	b.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024d8:	f7fe fd5e 	bl	8000f98 <HAL_GetTick>
 80024dc:	4602      	mov	r2, r0
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	2b02      	cmp	r3, #2
 80024e4:	d902      	bls.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	74fb      	strb	r3, [r7, #19]
        break;
 80024ea:	e005      	b.n	80024f8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80024ec:	4b31      	ldr	r3, [pc, #196]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d0ef      	beq.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80024f8:	7cfb      	ldrb	r3, [r7, #19]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d15c      	bne.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80024fe:	4b2c      	ldr	r3, [pc, #176]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002500:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002504:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002508:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d01f      	beq.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002516:	697a      	ldr	r2, [r7, #20]
 8002518:	429a      	cmp	r2, r3
 800251a:	d019      	beq.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800251c:	4b24      	ldr	r3, [pc, #144]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800251e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002522:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002526:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002528:	4b21      	ldr	r3, [pc, #132]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800252a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800252e:	4a20      	ldr	r2, [pc, #128]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002530:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002534:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002538:	4b1d      	ldr	r3, [pc, #116]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800253a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800253e:	4a1c      	ldr	r2, [pc, #112]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002540:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002544:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002548:	4a19      	ldr	r2, [pc, #100]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	f003 0301 	and.w	r3, r3, #1
 8002556:	2b00      	cmp	r3, #0
 8002558:	d016      	beq.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800255a:	f7fe fd1d 	bl	8000f98 <HAL_GetTick>
 800255e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002560:	e00b      	b.n	800257a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002562:	f7fe fd19 	bl	8000f98 <HAL_GetTick>
 8002566:	4602      	mov	r2, r0
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	1ad3      	subs	r3, r2, r3
 800256c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002570:	4293      	cmp	r3, r2
 8002572:	d902      	bls.n	800257a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002574:	2303      	movs	r3, #3
 8002576:	74fb      	strb	r3, [r7, #19]
            break;
 8002578:	e006      	b.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800257a:	4b0d      	ldr	r3, [pc, #52]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800257c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002580:	f003 0302 	and.w	r3, r3, #2
 8002584:	2b00      	cmp	r3, #0
 8002586:	d0ec      	beq.n	8002562 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002588:	7cfb      	ldrb	r3, [r7, #19]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d10c      	bne.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800258e:	4b08      	ldr	r3, [pc, #32]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002590:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002594:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800259e:	4904      	ldr	r1, [pc, #16]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025a0:	4313      	orrs	r3, r2
 80025a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80025a6:	e009      	b.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80025a8:	7cfb      	ldrb	r3, [r7, #19]
 80025aa:	74bb      	strb	r3, [r7, #18]
 80025ac:	e006      	b.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80025ae:	bf00      	nop
 80025b0:	40021000 	.word	0x40021000
 80025b4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025b8:	7cfb      	ldrb	r3, [r7, #19]
 80025ba:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025bc:	7c7b      	ldrb	r3, [r7, #17]
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d105      	bne.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025c2:	4b9e      	ldr	r3, [pc, #632]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025c6:	4a9d      	ldr	r2, [pc, #628]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025cc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0301 	and.w	r3, r3, #1
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d00a      	beq.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80025da:	4b98      	ldr	r3, [pc, #608]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025e0:	f023 0203 	bic.w	r2, r3, #3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025e8:	4994      	ldr	r1, [pc, #592]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025ea:	4313      	orrs	r3, r2
 80025ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0302 	and.w	r3, r3, #2
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d00a      	beq.n	8002612 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80025fc:	4b8f      	ldr	r3, [pc, #572]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002602:	f023 020c 	bic.w	r2, r3, #12
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800260a:	498c      	ldr	r1, [pc, #560]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800260c:	4313      	orrs	r3, r2
 800260e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0304 	and.w	r3, r3, #4
 800261a:	2b00      	cmp	r3, #0
 800261c:	d00a      	beq.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800261e:	4b87      	ldr	r3, [pc, #540]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002620:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002624:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262c:	4983      	ldr	r1, [pc, #524]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800262e:	4313      	orrs	r3, r2
 8002630:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 0308 	and.w	r3, r3, #8
 800263c:	2b00      	cmp	r3, #0
 800263e:	d00a      	beq.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002640:	4b7e      	ldr	r3, [pc, #504]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002642:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002646:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800264e:	497b      	ldr	r1, [pc, #492]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002650:	4313      	orrs	r3, r2
 8002652:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0310 	and.w	r3, r3, #16
 800265e:	2b00      	cmp	r3, #0
 8002660:	d00a      	beq.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002662:	4b76      	ldr	r3, [pc, #472]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002664:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002668:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002670:	4972      	ldr	r1, [pc, #456]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002672:	4313      	orrs	r3, r2
 8002674:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0320 	and.w	r3, r3, #32
 8002680:	2b00      	cmp	r3, #0
 8002682:	d00a      	beq.n	800269a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002684:	4b6d      	ldr	r3, [pc, #436]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002686:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800268a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002692:	496a      	ldr	r1, [pc, #424]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002694:	4313      	orrs	r3, r2
 8002696:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d00a      	beq.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80026a6:	4b65      	ldr	r3, [pc, #404]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ac:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026b4:	4961      	ldr	r1, [pc, #388]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026b6:	4313      	orrs	r3, r2
 80026b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d00a      	beq.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80026c8:	4b5c      	ldr	r3, [pc, #368]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ce:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026d6:	4959      	ldr	r1, [pc, #356]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026d8:	4313      	orrs	r3, r2
 80026da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d00a      	beq.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80026ea:	4b54      	ldr	r3, [pc, #336]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026f0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026f8:	4950      	ldr	r1, [pc, #320]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026fa:	4313      	orrs	r3, r2
 80026fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002708:	2b00      	cmp	r3, #0
 800270a:	d00a      	beq.n	8002722 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800270c:	4b4b      	ldr	r3, [pc, #300]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800270e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002712:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800271a:	4948      	ldr	r1, [pc, #288]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800271c:	4313      	orrs	r3, r2
 800271e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800272a:	2b00      	cmp	r3, #0
 800272c:	d00a      	beq.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800272e:	4b43      	ldr	r3, [pc, #268]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002730:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002734:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800273c:	493f      	ldr	r1, [pc, #252]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800273e:	4313      	orrs	r3, r2
 8002740:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800274c:	2b00      	cmp	r3, #0
 800274e:	d028      	beq.n	80027a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002750:	4b3a      	ldr	r3, [pc, #232]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002752:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002756:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800275e:	4937      	ldr	r1, [pc, #220]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002760:	4313      	orrs	r3, r2
 8002762:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800276a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800276e:	d106      	bne.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002770:	4b32      	ldr	r3, [pc, #200]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	4a31      	ldr	r2, [pc, #196]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002776:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800277a:	60d3      	str	r3, [r2, #12]
 800277c:	e011      	b.n	80027a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002782:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002786:	d10c      	bne.n	80027a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	3304      	adds	r3, #4
 800278c:	2101      	movs	r1, #1
 800278e:	4618      	mov	r0, r3
 8002790:	f000 f8c8 	bl	8002924 <RCCEx_PLLSAI1_Config>
 8002794:	4603      	mov	r3, r0
 8002796:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002798:	7cfb      	ldrb	r3, [r7, #19]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d001      	beq.n	80027a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800279e:	7cfb      	ldrb	r3, [r7, #19]
 80027a0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d028      	beq.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80027ae:	4b23      	ldr	r3, [pc, #140]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027b4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027bc:	491f      	ldr	r1, [pc, #124]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027be:	4313      	orrs	r3, r2
 80027c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80027cc:	d106      	bne.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027ce:	4b1b      	ldr	r3, [pc, #108]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027d0:	68db      	ldr	r3, [r3, #12]
 80027d2:	4a1a      	ldr	r2, [pc, #104]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027d8:	60d3      	str	r3, [r2, #12]
 80027da:	e011      	b.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80027e4:	d10c      	bne.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	3304      	adds	r3, #4
 80027ea:	2101      	movs	r1, #1
 80027ec:	4618      	mov	r0, r3
 80027ee:	f000 f899 	bl	8002924 <RCCEx_PLLSAI1_Config>
 80027f2:	4603      	mov	r3, r0
 80027f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80027f6:	7cfb      	ldrb	r3, [r7, #19]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d001      	beq.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80027fc:	7cfb      	ldrb	r3, [r7, #19]
 80027fe:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002808:	2b00      	cmp	r3, #0
 800280a:	d02b      	beq.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800280c:	4b0b      	ldr	r3, [pc, #44]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800280e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002812:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800281a:	4908      	ldr	r1, [pc, #32]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800281c:	4313      	orrs	r3, r2
 800281e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002826:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800282a:	d109      	bne.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800282c:	4b03      	ldr	r3, [pc, #12]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	4a02      	ldr	r2, [pc, #8]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002832:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002836:	60d3      	str	r3, [r2, #12]
 8002838:	e014      	b.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800283a:	bf00      	nop
 800283c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002844:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002848:	d10c      	bne.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	3304      	adds	r3, #4
 800284e:	2101      	movs	r1, #1
 8002850:	4618      	mov	r0, r3
 8002852:	f000 f867 	bl	8002924 <RCCEx_PLLSAI1_Config>
 8002856:	4603      	mov	r3, r0
 8002858:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800285a:	7cfb      	ldrb	r3, [r7, #19]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d001      	beq.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002860:	7cfb      	ldrb	r3, [r7, #19]
 8002862:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800286c:	2b00      	cmp	r3, #0
 800286e:	d02f      	beq.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002870:	4b2b      	ldr	r3, [pc, #172]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002872:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002876:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800287e:	4928      	ldr	r1, [pc, #160]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002880:	4313      	orrs	r3, r2
 8002882:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800288a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800288e:	d10d      	bne.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	3304      	adds	r3, #4
 8002894:	2102      	movs	r1, #2
 8002896:	4618      	mov	r0, r3
 8002898:	f000 f844 	bl	8002924 <RCCEx_PLLSAI1_Config>
 800289c:	4603      	mov	r3, r0
 800289e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80028a0:	7cfb      	ldrb	r3, [r7, #19]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d014      	beq.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80028a6:	7cfb      	ldrb	r3, [r7, #19]
 80028a8:	74bb      	strb	r3, [r7, #18]
 80028aa:	e011      	b.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80028b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80028b4:	d10c      	bne.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	3320      	adds	r3, #32
 80028ba:	2102      	movs	r1, #2
 80028bc:	4618      	mov	r0, r3
 80028be:	f000 f925 	bl	8002b0c <RCCEx_PLLSAI2_Config>
 80028c2:	4603      	mov	r3, r0
 80028c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80028c6:	7cfb      	ldrb	r3, [r7, #19]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d001      	beq.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80028cc:	7cfb      	ldrb	r3, [r7, #19]
 80028ce:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d00a      	beq.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80028dc:	4b10      	ldr	r3, [pc, #64]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80028de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028e2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028ea:	490d      	ldr	r1, [pc, #52]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80028ec:	4313      	orrs	r3, r2
 80028ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d00b      	beq.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80028fe:	4b08      	ldr	r3, [pc, #32]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002900:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002904:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800290e:	4904      	ldr	r1, [pc, #16]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002910:	4313      	orrs	r3, r2
 8002912:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002916:	7cbb      	ldrb	r3, [r7, #18]
}
 8002918:	4618      	mov	r0, r3
 800291a:	3718      	adds	r7, #24
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}
 8002920:	40021000 	.word	0x40021000

08002924 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b084      	sub	sp, #16
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
 800292c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800292e:	2300      	movs	r3, #0
 8002930:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002932:	4b75      	ldr	r3, [pc, #468]	; (8002b08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002934:	68db      	ldr	r3, [r3, #12]
 8002936:	f003 0303 	and.w	r3, r3, #3
 800293a:	2b00      	cmp	r3, #0
 800293c:	d018      	beq.n	8002970 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800293e:	4b72      	ldr	r3, [pc, #456]	; (8002b08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002940:	68db      	ldr	r3, [r3, #12]
 8002942:	f003 0203 	and.w	r2, r3, #3
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	429a      	cmp	r2, r3
 800294c:	d10d      	bne.n	800296a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
       ||
 8002952:	2b00      	cmp	r3, #0
 8002954:	d009      	beq.n	800296a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002956:	4b6c      	ldr	r3, [pc, #432]	; (8002b08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002958:	68db      	ldr	r3, [r3, #12]
 800295a:	091b      	lsrs	r3, r3, #4
 800295c:	f003 0307 	and.w	r3, r3, #7
 8002960:	1c5a      	adds	r2, r3, #1
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	685b      	ldr	r3, [r3, #4]
       ||
 8002966:	429a      	cmp	r2, r3
 8002968:	d047      	beq.n	80029fa <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	73fb      	strb	r3, [r7, #15]
 800296e:	e044      	b.n	80029fa <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	2b03      	cmp	r3, #3
 8002976:	d018      	beq.n	80029aa <RCCEx_PLLSAI1_Config+0x86>
 8002978:	2b03      	cmp	r3, #3
 800297a:	d825      	bhi.n	80029c8 <RCCEx_PLLSAI1_Config+0xa4>
 800297c:	2b01      	cmp	r3, #1
 800297e:	d002      	beq.n	8002986 <RCCEx_PLLSAI1_Config+0x62>
 8002980:	2b02      	cmp	r3, #2
 8002982:	d009      	beq.n	8002998 <RCCEx_PLLSAI1_Config+0x74>
 8002984:	e020      	b.n	80029c8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002986:	4b60      	ldr	r3, [pc, #384]	; (8002b08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0302 	and.w	r3, r3, #2
 800298e:	2b00      	cmp	r3, #0
 8002990:	d11d      	bne.n	80029ce <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002996:	e01a      	b.n	80029ce <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002998:	4b5b      	ldr	r3, [pc, #364]	; (8002b08 <RCCEx_PLLSAI1_Config+0x1e4>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d116      	bne.n	80029d2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029a8:	e013      	b.n	80029d2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80029aa:	4b57      	ldr	r3, [pc, #348]	; (8002b08 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d10f      	bne.n	80029d6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80029b6:	4b54      	ldr	r3, [pc, #336]	; (8002b08 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d109      	bne.n	80029d6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80029c6:	e006      	b.n	80029d6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	73fb      	strb	r3, [r7, #15]
      break;
 80029cc:	e004      	b.n	80029d8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80029ce:	bf00      	nop
 80029d0:	e002      	b.n	80029d8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80029d2:	bf00      	nop
 80029d4:	e000      	b.n	80029d8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80029d6:	bf00      	nop
    }

    if(status == HAL_OK)
 80029d8:	7bfb      	ldrb	r3, [r7, #15]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d10d      	bne.n	80029fa <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80029de:	4b4a      	ldr	r3, [pc, #296]	; (8002b08 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029e0:	68db      	ldr	r3, [r3, #12]
 80029e2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6819      	ldr	r1, [r3, #0]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	3b01      	subs	r3, #1
 80029f0:	011b      	lsls	r3, r3, #4
 80029f2:	430b      	orrs	r3, r1
 80029f4:	4944      	ldr	r1, [pc, #272]	; (8002b08 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029f6:	4313      	orrs	r3, r2
 80029f8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80029fa:	7bfb      	ldrb	r3, [r7, #15]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d17d      	bne.n	8002afc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002a00:	4b41      	ldr	r3, [pc, #260]	; (8002b08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a40      	ldr	r2, [pc, #256]	; (8002b08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a06:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002a0a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a0c:	f7fe fac4 	bl	8000f98 <HAL_GetTick>
 8002a10:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002a12:	e009      	b.n	8002a28 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002a14:	f7fe fac0 	bl	8000f98 <HAL_GetTick>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	2b02      	cmp	r3, #2
 8002a20:	d902      	bls.n	8002a28 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	73fb      	strb	r3, [r7, #15]
        break;
 8002a26:	e005      	b.n	8002a34 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002a28:	4b37      	ldr	r3, [pc, #220]	; (8002b08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d1ef      	bne.n	8002a14 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002a34:	7bfb      	ldrb	r3, [r7, #15]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d160      	bne.n	8002afc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d111      	bne.n	8002a64 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a40:	4b31      	ldr	r3, [pc, #196]	; (8002b08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a42:	691b      	ldr	r3, [r3, #16]
 8002a44:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002a48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a4c:	687a      	ldr	r2, [r7, #4]
 8002a4e:	6892      	ldr	r2, [r2, #8]
 8002a50:	0211      	lsls	r1, r2, #8
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	68d2      	ldr	r2, [r2, #12]
 8002a56:	0912      	lsrs	r2, r2, #4
 8002a58:	0452      	lsls	r2, r2, #17
 8002a5a:	430a      	orrs	r2, r1
 8002a5c:	492a      	ldr	r1, [pc, #168]	; (8002b08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	610b      	str	r3, [r1, #16]
 8002a62:	e027      	b.n	8002ab4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d112      	bne.n	8002a90 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a6a:	4b27      	ldr	r3, [pc, #156]	; (8002b08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a6c:	691b      	ldr	r3, [r3, #16]
 8002a6e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002a72:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002a76:	687a      	ldr	r2, [r7, #4]
 8002a78:	6892      	ldr	r2, [r2, #8]
 8002a7a:	0211      	lsls	r1, r2, #8
 8002a7c:	687a      	ldr	r2, [r7, #4]
 8002a7e:	6912      	ldr	r2, [r2, #16]
 8002a80:	0852      	lsrs	r2, r2, #1
 8002a82:	3a01      	subs	r2, #1
 8002a84:	0552      	lsls	r2, r2, #21
 8002a86:	430a      	orrs	r2, r1
 8002a88:	491f      	ldr	r1, [pc, #124]	; (8002b08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	610b      	str	r3, [r1, #16]
 8002a8e:	e011      	b.n	8002ab4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a90:	4b1d      	ldr	r3, [pc, #116]	; (8002b08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a92:	691b      	ldr	r3, [r3, #16]
 8002a94:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002a98:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002a9c:	687a      	ldr	r2, [r7, #4]
 8002a9e:	6892      	ldr	r2, [r2, #8]
 8002aa0:	0211      	lsls	r1, r2, #8
 8002aa2:	687a      	ldr	r2, [r7, #4]
 8002aa4:	6952      	ldr	r2, [r2, #20]
 8002aa6:	0852      	lsrs	r2, r2, #1
 8002aa8:	3a01      	subs	r2, #1
 8002aaa:	0652      	lsls	r2, r2, #25
 8002aac:	430a      	orrs	r2, r1
 8002aae:	4916      	ldr	r1, [pc, #88]	; (8002b08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002ab4:	4b14      	ldr	r3, [pc, #80]	; (8002b08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a13      	ldr	r2, [pc, #76]	; (8002b08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002aba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002abe:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ac0:	f7fe fa6a 	bl	8000f98 <HAL_GetTick>
 8002ac4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002ac6:	e009      	b.n	8002adc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002ac8:	f7fe fa66 	bl	8000f98 <HAL_GetTick>
 8002acc:	4602      	mov	r2, r0
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	2b02      	cmp	r3, #2
 8002ad4:	d902      	bls.n	8002adc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002ad6:	2303      	movs	r3, #3
 8002ad8:	73fb      	strb	r3, [r7, #15]
          break;
 8002ada:	e005      	b.n	8002ae8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002adc:	4b0a      	ldr	r3, [pc, #40]	; (8002b08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d0ef      	beq.n	8002ac8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002ae8:	7bfb      	ldrb	r3, [r7, #15]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d106      	bne.n	8002afc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002aee:	4b06      	ldr	r3, [pc, #24]	; (8002b08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002af0:	691a      	ldr	r2, [r3, #16]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	699b      	ldr	r3, [r3, #24]
 8002af6:	4904      	ldr	r1, [pc, #16]	; (8002b08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002af8:	4313      	orrs	r3, r2
 8002afa:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002afc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3710      	adds	r7, #16
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	40021000 	.word	0x40021000

08002b0c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b084      	sub	sp, #16
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
 8002b14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002b16:	2300      	movs	r3, #0
 8002b18:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002b1a:	4b6a      	ldr	r3, [pc, #424]	; (8002cc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b1c:	68db      	ldr	r3, [r3, #12]
 8002b1e:	f003 0303 	and.w	r3, r3, #3
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d018      	beq.n	8002b58 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002b26:	4b67      	ldr	r3, [pc, #412]	; (8002cc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b28:	68db      	ldr	r3, [r3, #12]
 8002b2a:	f003 0203 	and.w	r2, r3, #3
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d10d      	bne.n	8002b52 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
       ||
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d009      	beq.n	8002b52 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002b3e:	4b61      	ldr	r3, [pc, #388]	; (8002cc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b40:	68db      	ldr	r3, [r3, #12]
 8002b42:	091b      	lsrs	r3, r3, #4
 8002b44:	f003 0307 	and.w	r3, r3, #7
 8002b48:	1c5a      	adds	r2, r3, #1
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	685b      	ldr	r3, [r3, #4]
       ||
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	d047      	beq.n	8002be2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	73fb      	strb	r3, [r7, #15]
 8002b56:	e044      	b.n	8002be2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	2b03      	cmp	r3, #3
 8002b5e:	d018      	beq.n	8002b92 <RCCEx_PLLSAI2_Config+0x86>
 8002b60:	2b03      	cmp	r3, #3
 8002b62:	d825      	bhi.n	8002bb0 <RCCEx_PLLSAI2_Config+0xa4>
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d002      	beq.n	8002b6e <RCCEx_PLLSAI2_Config+0x62>
 8002b68:	2b02      	cmp	r3, #2
 8002b6a:	d009      	beq.n	8002b80 <RCCEx_PLLSAI2_Config+0x74>
 8002b6c:	e020      	b.n	8002bb0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002b6e:	4b55      	ldr	r3, [pc, #340]	; (8002cc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 0302 	and.w	r3, r3, #2
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d11d      	bne.n	8002bb6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b7e:	e01a      	b.n	8002bb6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002b80:	4b50      	ldr	r3, [pc, #320]	; (8002cc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d116      	bne.n	8002bba <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b90:	e013      	b.n	8002bba <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002b92:	4b4c      	ldr	r3, [pc, #304]	; (8002cc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d10f      	bne.n	8002bbe <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002b9e:	4b49      	ldr	r3, [pc, #292]	; (8002cc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d109      	bne.n	8002bbe <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002bae:	e006      	b.n	8002bbe <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	73fb      	strb	r3, [r7, #15]
      break;
 8002bb4:	e004      	b.n	8002bc0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002bb6:	bf00      	nop
 8002bb8:	e002      	b.n	8002bc0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002bba:	bf00      	nop
 8002bbc:	e000      	b.n	8002bc0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002bbe:	bf00      	nop
    }

    if(status == HAL_OK)
 8002bc0:	7bfb      	ldrb	r3, [r7, #15]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d10d      	bne.n	8002be2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002bc6:	4b3f      	ldr	r3, [pc, #252]	; (8002cc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bc8:	68db      	ldr	r3, [r3, #12]
 8002bca:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6819      	ldr	r1, [r3, #0]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	3b01      	subs	r3, #1
 8002bd8:	011b      	lsls	r3, r3, #4
 8002bda:	430b      	orrs	r3, r1
 8002bdc:	4939      	ldr	r1, [pc, #228]	; (8002cc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bde:	4313      	orrs	r3, r2
 8002be0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002be2:	7bfb      	ldrb	r3, [r7, #15]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d167      	bne.n	8002cb8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002be8:	4b36      	ldr	r3, [pc, #216]	; (8002cc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a35      	ldr	r2, [pc, #212]	; (8002cc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bf2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bf4:	f7fe f9d0 	bl	8000f98 <HAL_GetTick>
 8002bf8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002bfa:	e009      	b.n	8002c10 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002bfc:	f7fe f9cc 	bl	8000f98 <HAL_GetTick>
 8002c00:	4602      	mov	r2, r0
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	2b02      	cmp	r3, #2
 8002c08:	d902      	bls.n	8002c10 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	73fb      	strb	r3, [r7, #15]
        break;
 8002c0e:	e005      	b.n	8002c1c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002c10:	4b2c      	ldr	r3, [pc, #176]	; (8002cc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d1ef      	bne.n	8002bfc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002c1c:	7bfb      	ldrb	r3, [r7, #15]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d14a      	bne.n	8002cb8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d111      	bne.n	8002c4c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002c28:	4b26      	ldr	r3, [pc, #152]	; (8002cc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c2a:	695b      	ldr	r3, [r3, #20]
 8002c2c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002c30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c34:	687a      	ldr	r2, [r7, #4]
 8002c36:	6892      	ldr	r2, [r2, #8]
 8002c38:	0211      	lsls	r1, r2, #8
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	68d2      	ldr	r2, [r2, #12]
 8002c3e:	0912      	lsrs	r2, r2, #4
 8002c40:	0452      	lsls	r2, r2, #17
 8002c42:	430a      	orrs	r2, r1
 8002c44:	491f      	ldr	r1, [pc, #124]	; (8002cc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c46:	4313      	orrs	r3, r2
 8002c48:	614b      	str	r3, [r1, #20]
 8002c4a:	e011      	b.n	8002c70 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002c4c:	4b1d      	ldr	r3, [pc, #116]	; (8002cc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c4e:	695b      	ldr	r3, [r3, #20]
 8002c50:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002c54:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002c58:	687a      	ldr	r2, [r7, #4]
 8002c5a:	6892      	ldr	r2, [r2, #8]
 8002c5c:	0211      	lsls	r1, r2, #8
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	6912      	ldr	r2, [r2, #16]
 8002c62:	0852      	lsrs	r2, r2, #1
 8002c64:	3a01      	subs	r2, #1
 8002c66:	0652      	lsls	r2, r2, #25
 8002c68:	430a      	orrs	r2, r1
 8002c6a:	4916      	ldr	r1, [pc, #88]	; (8002cc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002c70:	4b14      	ldr	r3, [pc, #80]	; (8002cc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a13      	ldr	r2, [pc, #76]	; (8002cc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c7a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c7c:	f7fe f98c 	bl	8000f98 <HAL_GetTick>
 8002c80:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002c82:	e009      	b.n	8002c98 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002c84:	f7fe f988 	bl	8000f98 <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	2b02      	cmp	r3, #2
 8002c90:	d902      	bls.n	8002c98 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002c92:	2303      	movs	r3, #3
 8002c94:	73fb      	strb	r3, [r7, #15]
          break;
 8002c96:	e005      	b.n	8002ca4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002c98:	4b0a      	ldr	r3, [pc, #40]	; (8002cc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d0ef      	beq.n	8002c84 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002ca4:	7bfb      	ldrb	r3, [r7, #15]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d106      	bne.n	8002cb8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002caa:	4b06      	ldr	r3, [pc, #24]	; (8002cc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cac:	695a      	ldr	r2, [r3, #20]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	695b      	ldr	r3, [r3, #20]
 8002cb2:	4904      	ldr	r1, [pc, #16]	; (8002cc4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002cb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3710      	adds	r7, #16
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	40021000 	.word	0x40021000

08002cc8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b082      	sub	sp, #8
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d101      	bne.n	8002cda <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e049      	b.n	8002d6e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d106      	bne.n	8002cf4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f7fd ff66 	bl	8000bc0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2202      	movs	r2, #2
 8002cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	3304      	adds	r3, #4
 8002d04:	4619      	mov	r1, r3
 8002d06:	4610      	mov	r0, r2
 8002d08:	f000 f836 	bl	8002d78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2201      	movs	r2, #1
 8002d10:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2201      	movs	r2, #1
 8002d18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2201      	movs	r2, #1
 8002d20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2201      	movs	r2, #1
 8002d28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2201      	movs	r2, #1
 8002d30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2201      	movs	r2, #1
 8002d38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2201      	movs	r2, #1
 8002d40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2201      	movs	r2, #1
 8002d48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2201      	movs	r2, #1
 8002d58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2201      	movs	r2, #1
 8002d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d6c:	2300      	movs	r3, #0
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3708      	adds	r7, #8
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
	...

08002d78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b085      	sub	sp, #20
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
 8002d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	4a40      	ldr	r2, [pc, #256]	; (8002e8c <TIM_Base_SetConfig+0x114>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d013      	beq.n	8002db8 <TIM_Base_SetConfig+0x40>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d96:	d00f      	beq.n	8002db8 <TIM_Base_SetConfig+0x40>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	4a3d      	ldr	r2, [pc, #244]	; (8002e90 <TIM_Base_SetConfig+0x118>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d00b      	beq.n	8002db8 <TIM_Base_SetConfig+0x40>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	4a3c      	ldr	r2, [pc, #240]	; (8002e94 <TIM_Base_SetConfig+0x11c>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d007      	beq.n	8002db8 <TIM_Base_SetConfig+0x40>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	4a3b      	ldr	r2, [pc, #236]	; (8002e98 <TIM_Base_SetConfig+0x120>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d003      	beq.n	8002db8 <TIM_Base_SetConfig+0x40>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	4a3a      	ldr	r2, [pc, #232]	; (8002e9c <TIM_Base_SetConfig+0x124>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d108      	bne.n	8002dca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dbe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	68fa      	ldr	r2, [r7, #12]
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	4a2f      	ldr	r2, [pc, #188]	; (8002e8c <TIM_Base_SetConfig+0x114>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d01f      	beq.n	8002e12 <TIM_Base_SetConfig+0x9a>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dd8:	d01b      	beq.n	8002e12 <TIM_Base_SetConfig+0x9a>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	4a2c      	ldr	r2, [pc, #176]	; (8002e90 <TIM_Base_SetConfig+0x118>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d017      	beq.n	8002e12 <TIM_Base_SetConfig+0x9a>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	4a2b      	ldr	r2, [pc, #172]	; (8002e94 <TIM_Base_SetConfig+0x11c>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d013      	beq.n	8002e12 <TIM_Base_SetConfig+0x9a>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	4a2a      	ldr	r2, [pc, #168]	; (8002e98 <TIM_Base_SetConfig+0x120>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d00f      	beq.n	8002e12 <TIM_Base_SetConfig+0x9a>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	4a29      	ldr	r2, [pc, #164]	; (8002e9c <TIM_Base_SetConfig+0x124>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d00b      	beq.n	8002e12 <TIM_Base_SetConfig+0x9a>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	4a28      	ldr	r2, [pc, #160]	; (8002ea0 <TIM_Base_SetConfig+0x128>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d007      	beq.n	8002e12 <TIM_Base_SetConfig+0x9a>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	4a27      	ldr	r2, [pc, #156]	; (8002ea4 <TIM_Base_SetConfig+0x12c>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d003      	beq.n	8002e12 <TIM_Base_SetConfig+0x9a>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	4a26      	ldr	r2, [pc, #152]	; (8002ea8 <TIM_Base_SetConfig+0x130>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d108      	bne.n	8002e24 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	68db      	ldr	r3, [r3, #12]
 8002e1e:	68fa      	ldr	r2, [r7, #12]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	695b      	ldr	r3, [r3, #20]
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	68fa      	ldr	r2, [r7, #12]
 8002e36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	689a      	ldr	r2, [r3, #8]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	4a10      	ldr	r2, [pc, #64]	; (8002e8c <TIM_Base_SetConfig+0x114>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d00f      	beq.n	8002e70 <TIM_Base_SetConfig+0xf8>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	4a12      	ldr	r2, [pc, #72]	; (8002e9c <TIM_Base_SetConfig+0x124>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d00b      	beq.n	8002e70 <TIM_Base_SetConfig+0xf8>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	4a11      	ldr	r2, [pc, #68]	; (8002ea0 <TIM_Base_SetConfig+0x128>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d007      	beq.n	8002e70 <TIM_Base_SetConfig+0xf8>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	4a10      	ldr	r2, [pc, #64]	; (8002ea4 <TIM_Base_SetConfig+0x12c>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d003      	beq.n	8002e70 <TIM_Base_SetConfig+0xf8>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	4a0f      	ldr	r2, [pc, #60]	; (8002ea8 <TIM_Base_SetConfig+0x130>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d103      	bne.n	8002e78 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	691a      	ldr	r2, [r3, #16]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	615a      	str	r2, [r3, #20]
}
 8002e7e:	bf00      	nop
 8002e80:	3714      	adds	r7, #20
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr
 8002e8a:	bf00      	nop
 8002e8c:	40012c00 	.word	0x40012c00
 8002e90:	40000400 	.word	0x40000400
 8002e94:	40000800 	.word	0x40000800
 8002e98:	40000c00 	.word	0x40000c00
 8002e9c:	40013400 	.word	0x40013400
 8002ea0:	40014000 	.word	0x40014000
 8002ea4:	40014400 	.word	0x40014400
 8002ea8:	40014800 	.word	0x40014800

08002eac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b085      	sub	sp, #20
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
 8002eb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d101      	bne.n	8002ec4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ec0:	2302      	movs	r3, #2
 8002ec2:	e068      	b.n	8002f96 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2202      	movs	r2, #2
 8002ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a2e      	ldr	r2, [pc, #184]	; (8002fa4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d004      	beq.n	8002ef8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a2d      	ldr	r2, [pc, #180]	; (8002fa8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d108      	bne.n	8002f0a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002efe:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	68fa      	ldr	r2, [r7, #12]
 8002f06:	4313      	orrs	r3, r2
 8002f08:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f10:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	68fa      	ldr	r2, [r7, #12]
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	68fa      	ldr	r2, [r7, #12]
 8002f22:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a1e      	ldr	r2, [pc, #120]	; (8002fa4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d01d      	beq.n	8002f6a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f36:	d018      	beq.n	8002f6a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a1b      	ldr	r2, [pc, #108]	; (8002fac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d013      	beq.n	8002f6a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a1a      	ldr	r2, [pc, #104]	; (8002fb0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d00e      	beq.n	8002f6a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a18      	ldr	r2, [pc, #96]	; (8002fb4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d009      	beq.n	8002f6a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a13      	ldr	r2, [pc, #76]	; (8002fa8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d004      	beq.n	8002f6a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a14      	ldr	r2, [pc, #80]	; (8002fb8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d10c      	bne.n	8002f84 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f70:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	68ba      	ldr	r2, [r7, #8]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	68ba      	ldr	r2, [r7, #8]
 8002f82:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2201      	movs	r2, #1
 8002f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f94:	2300      	movs	r3, #0
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3714      	adds	r7, #20
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr
 8002fa2:	bf00      	nop
 8002fa4:	40012c00 	.word	0x40012c00
 8002fa8:	40013400 	.word	0x40013400
 8002fac:	40000400 	.word	0x40000400
 8002fb0:	40000800 	.word	0x40000800
 8002fb4:	40000c00 	.word	0x40000c00
 8002fb8:	40014000 	.word	0x40014000

08002fbc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b082      	sub	sp, #8
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d101      	bne.n	8002fce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e040      	b.n	8003050 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d106      	bne.n	8002fe4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f7fd fe0e 	bl	8000c00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2224      	movs	r2, #36	; 0x24
 8002fe8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f022 0201 	bic.w	r2, r2, #1
 8002ff8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f000 fcf8 	bl	80039f0 <UART_SetConfig>
 8003000:	4603      	mov	r3, r0
 8003002:	2b01      	cmp	r3, #1
 8003004:	d101      	bne.n	800300a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e022      	b.n	8003050 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300e:	2b00      	cmp	r3, #0
 8003010:	d002      	beq.n	8003018 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f000 ffa4 	bl	8003f60 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	685a      	ldr	r2, [r3, #4]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003026:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	689a      	ldr	r2, [r3, #8]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003036:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f042 0201 	orr.w	r2, r2, #1
 8003046:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	f001 f82b 	bl	80040a4 <UART_CheckIdleState>
 800304e:	4603      	mov	r3, r0
}
 8003050:	4618      	mov	r0, r3
 8003052:	3708      	adds	r7, #8
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}

08003058 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b08a      	sub	sp, #40	; 0x28
 800305c:	af02      	add	r7, sp, #8
 800305e:	60f8      	str	r0, [r7, #12]
 8003060:	60b9      	str	r1, [r7, #8]
 8003062:	603b      	str	r3, [r7, #0]
 8003064:	4613      	mov	r3, r2
 8003066:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800306c:	2b20      	cmp	r3, #32
 800306e:	f040 8082 	bne.w	8003176 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d002      	beq.n	800307e <HAL_UART_Transmit+0x26>
 8003078:	88fb      	ldrh	r3, [r7, #6]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d101      	bne.n	8003082 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	e07a      	b.n	8003178 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003088:	2b01      	cmp	r3, #1
 800308a:	d101      	bne.n	8003090 <HAL_UART_Transmit+0x38>
 800308c:	2302      	movs	r3, #2
 800308e:	e073      	b.n	8003178 <HAL_UART_Transmit+0x120>
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2201      	movs	r2, #1
 8003094:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2200      	movs	r2, #0
 800309c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2221      	movs	r2, #33	; 0x21
 80030a4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80030a6:	f7fd ff77 	bl	8000f98 <HAL_GetTick>
 80030aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	88fa      	ldrh	r2, [r7, #6]
 80030b0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	88fa      	ldrh	r2, [r7, #6]
 80030b8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030c4:	d108      	bne.n	80030d8 <HAL_UART_Transmit+0x80>
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	691b      	ldr	r3, [r3, #16]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d104      	bne.n	80030d8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80030ce:	2300      	movs	r3, #0
 80030d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	61bb      	str	r3, [r7, #24]
 80030d6:	e003      	b.n	80030e0 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80030dc:	2300      	movs	r3, #0
 80030de:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2200      	movs	r2, #0
 80030e4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80030e8:	e02d      	b.n	8003146 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	9300      	str	r3, [sp, #0]
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	2200      	movs	r2, #0
 80030f2:	2180      	movs	r1, #128	; 0x80
 80030f4:	68f8      	ldr	r0, [r7, #12]
 80030f6:	f001 f81e 	bl	8004136 <UART_WaitOnFlagUntilTimeout>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d001      	beq.n	8003104 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003100:	2303      	movs	r3, #3
 8003102:	e039      	b.n	8003178 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003104:	69fb      	ldr	r3, [r7, #28]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d10b      	bne.n	8003122 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800310a:	69bb      	ldr	r3, [r7, #24]
 800310c:	881a      	ldrh	r2, [r3, #0]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003116:	b292      	uxth	r2, r2
 8003118:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800311a:	69bb      	ldr	r3, [r7, #24]
 800311c:	3302      	adds	r3, #2
 800311e:	61bb      	str	r3, [r7, #24]
 8003120:	e008      	b.n	8003134 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003122:	69fb      	ldr	r3, [r7, #28]
 8003124:	781a      	ldrb	r2, [r3, #0]
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	b292      	uxth	r2, r2
 800312c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800312e:	69fb      	ldr	r3, [r7, #28]
 8003130:	3301      	adds	r3, #1
 8003132:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800313a:	b29b      	uxth	r3, r3
 800313c:	3b01      	subs	r3, #1
 800313e:	b29a      	uxth	r2, r3
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800314c:	b29b      	uxth	r3, r3
 800314e:	2b00      	cmp	r3, #0
 8003150:	d1cb      	bne.n	80030ea <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	9300      	str	r3, [sp, #0]
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	2200      	movs	r2, #0
 800315a:	2140      	movs	r1, #64	; 0x40
 800315c:	68f8      	ldr	r0, [r7, #12]
 800315e:	f000 ffea 	bl	8004136 <UART_WaitOnFlagUntilTimeout>
 8003162:	4603      	mov	r3, r0
 8003164:	2b00      	cmp	r3, #0
 8003166:	d001      	beq.n	800316c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003168:	2303      	movs	r3, #3
 800316a:	e005      	b.n	8003178 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2220      	movs	r2, #32
 8003170:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003172:	2300      	movs	r3, #0
 8003174:	e000      	b.n	8003178 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003176:	2302      	movs	r3, #2
  }
}
 8003178:	4618      	mov	r0, r3
 800317a:	3720      	adds	r7, #32
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}

08003180 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b08a      	sub	sp, #40	; 0x28
 8003184:	af02      	add	r7, sp, #8
 8003186:	60f8      	str	r0, [r7, #12]
 8003188:	60b9      	str	r1, [r7, #8]
 800318a:	603b      	str	r3, [r7, #0]
 800318c:	4613      	mov	r3, r2
 800318e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003194:	2b20      	cmp	r3, #32
 8003196:	f040 80bf 	bne.w	8003318 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d002      	beq.n	80031a6 <HAL_UART_Receive+0x26>
 80031a0:	88fb      	ldrh	r3, [r7, #6]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d101      	bne.n	80031aa <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e0b7      	b.n	800331a <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d101      	bne.n	80031b8 <HAL_UART_Receive+0x38>
 80031b4:	2302      	movs	r3, #2
 80031b6:	e0b0      	b.n	800331a <HAL_UART_Receive+0x19a>
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2201      	movs	r2, #1
 80031bc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2200      	movs	r2, #0
 80031c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2222      	movs	r2, #34	; 0x22
 80031cc:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2200      	movs	r2, #0
 80031d2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80031d4:	f7fd fee0 	bl	8000f98 <HAL_GetTick>
 80031d8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	88fa      	ldrh	r2, [r7, #6]
 80031de:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	88fa      	ldrh	r2, [r7, #6]
 80031e6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031f2:	d10e      	bne.n	8003212 <HAL_UART_Receive+0x92>
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	691b      	ldr	r3, [r3, #16]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d105      	bne.n	8003208 <HAL_UART_Receive+0x88>
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003202:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003206:	e02d      	b.n	8003264 <HAL_UART_Receive+0xe4>
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	22ff      	movs	r2, #255	; 0xff
 800320c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003210:	e028      	b.n	8003264 <HAL_UART_Receive+0xe4>
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d10d      	bne.n	8003236 <HAL_UART_Receive+0xb6>
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	691b      	ldr	r3, [r3, #16]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d104      	bne.n	800322c <HAL_UART_Receive+0xac>
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	22ff      	movs	r2, #255	; 0xff
 8003226:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800322a:	e01b      	b.n	8003264 <HAL_UART_Receive+0xe4>
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	227f      	movs	r2, #127	; 0x7f
 8003230:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003234:	e016      	b.n	8003264 <HAL_UART_Receive+0xe4>
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800323e:	d10d      	bne.n	800325c <HAL_UART_Receive+0xdc>
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	691b      	ldr	r3, [r3, #16]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d104      	bne.n	8003252 <HAL_UART_Receive+0xd2>
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	227f      	movs	r2, #127	; 0x7f
 800324c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003250:	e008      	b.n	8003264 <HAL_UART_Receive+0xe4>
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	223f      	movs	r2, #63	; 0x3f
 8003256:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800325a:	e003      	b.n	8003264 <HAL_UART_Receive+0xe4>
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2200      	movs	r2, #0
 8003260:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800326a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003274:	d108      	bne.n	8003288 <HAL_UART_Receive+0x108>
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	691b      	ldr	r3, [r3, #16]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d104      	bne.n	8003288 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 800327e:	2300      	movs	r3, #0
 8003280:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	61bb      	str	r3, [r7, #24]
 8003286:	e003      	b.n	8003290 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800328c:	2300      	movs	r3, #0
 800328e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2200      	movs	r2, #0
 8003294:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003298:	e033      	b.n	8003302 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	9300      	str	r3, [sp, #0]
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	2200      	movs	r2, #0
 80032a2:	2120      	movs	r1, #32
 80032a4:	68f8      	ldr	r0, [r7, #12]
 80032a6:	f000 ff46 	bl	8004136 <UART_WaitOnFlagUntilTimeout>
 80032aa:	4603      	mov	r3, r0
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d001      	beq.n	80032b4 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 80032b0:	2303      	movs	r3, #3
 80032b2:	e032      	b.n	800331a <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 80032b4:	69fb      	ldr	r3, [r7, #28]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d10c      	bne.n	80032d4 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80032c0:	b29a      	uxth	r2, r3
 80032c2:	8a7b      	ldrh	r3, [r7, #18]
 80032c4:	4013      	ands	r3, r2
 80032c6:	b29a      	uxth	r2, r3
 80032c8:	69bb      	ldr	r3, [r7, #24]
 80032ca:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80032cc:	69bb      	ldr	r3, [r7, #24]
 80032ce:	3302      	adds	r3, #2
 80032d0:	61bb      	str	r3, [r7, #24]
 80032d2:	e00d      	b.n	80032f0 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80032da:	b29b      	uxth	r3, r3
 80032dc:	b2da      	uxtb	r2, r3
 80032de:	8a7b      	ldrh	r3, [r7, #18]
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	4013      	ands	r3, r2
 80032e4:	b2da      	uxtb	r2, r3
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	3301      	adds	r3, #1
 80032ee:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80032f6:	b29b      	uxth	r3, r3
 80032f8:	3b01      	subs	r3, #1
 80032fa:	b29a      	uxth	r2, r3
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003308:	b29b      	uxth	r3, r3
 800330a:	2b00      	cmp	r3, #0
 800330c:	d1c5      	bne.n	800329a <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2220      	movs	r2, #32
 8003312:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003314:	2300      	movs	r3, #0
 8003316:	e000      	b.n	800331a <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8003318:	2302      	movs	r3, #2
  }
}
 800331a:	4618      	mov	r0, r3
 800331c:	3720      	adds	r7, #32
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}
	...

08003324 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003324:	b480      	push	{r7}
 8003326:	b08b      	sub	sp, #44	; 0x2c
 8003328:	af00      	add	r7, sp, #0
 800332a:	60f8      	str	r0, [r7, #12]
 800332c:	60b9      	str	r1, [r7, #8]
 800332e:	4613      	mov	r3, r2
 8003330:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003336:	2b20      	cmp	r3, #32
 8003338:	d156      	bne.n	80033e8 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d002      	beq.n	8003346 <HAL_UART_Transmit_IT+0x22>
 8003340:	88fb      	ldrh	r3, [r7, #6]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d101      	bne.n	800334a <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	e04f      	b.n	80033ea <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003350:	2b01      	cmp	r3, #1
 8003352:	d101      	bne.n	8003358 <HAL_UART_Transmit_IT+0x34>
 8003354:	2302      	movs	r3, #2
 8003356:	e048      	b.n	80033ea <HAL_UART_Transmit_IT+0xc6>
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2201      	movs	r2, #1
 800335c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	68ba      	ldr	r2, [r7, #8]
 8003364:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	88fa      	ldrh	r2, [r7, #6]
 800336a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	88fa      	ldrh	r2, [r7, #6]
 8003372:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2200      	movs	r2, #0
 800337a:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2200      	movs	r2, #0
 8003380:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2221      	movs	r2, #33	; 0x21
 8003388:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003392:	d107      	bne.n	80033a4 <HAL_UART_Transmit_IT+0x80>
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	691b      	ldr	r3, [r3, #16]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d103      	bne.n	80033a4 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	4a16      	ldr	r2, [pc, #88]	; (80033f8 <HAL_UART_Transmit_IT+0xd4>)
 80033a0:	669a      	str	r2, [r3, #104]	; 0x68
 80033a2:	e002      	b.n	80033aa <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	4a15      	ldr	r2, [pc, #84]	; (80033fc <HAL_UART_Transmit_IT+0xd8>)
 80033a8:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2200      	movs	r2, #0
 80033ae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	e853 3f00 	ldrex	r3, [r3]
 80033be:	613b      	str	r3, [r7, #16]
   return(result);
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033c6:	627b      	str	r3, [r7, #36]	; 0x24
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	461a      	mov	r2, r3
 80033ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d0:	623b      	str	r3, [r7, #32]
 80033d2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033d4:	69f9      	ldr	r1, [r7, #28]
 80033d6:	6a3a      	ldr	r2, [r7, #32]
 80033d8:	e841 2300 	strex	r3, r2, [r1]
 80033dc:	61bb      	str	r3, [r7, #24]
   return(result);
 80033de:	69bb      	ldr	r3, [r7, #24]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d1e6      	bne.n	80033b2 <HAL_UART_Transmit_IT+0x8e>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 80033e4:	2300      	movs	r3, #0
 80033e6:	e000      	b.n	80033ea <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 80033e8:	2302      	movs	r3, #2
  }
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	372c      	adds	r7, #44	; 0x2c
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr
 80033f6:	bf00      	nop
 80033f8:	08004469 	.word	0x08004469
 80033fc:	080043b1 	.word	0x080043b1

08003400 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b0ba      	sub	sp, #232	; 0xe8
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	69db      	ldr	r3, [r3, #28]
 800340e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003426:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800342a:	f640 030f 	movw	r3, #2063	; 0x80f
 800342e:	4013      	ands	r3, r2
 8003430:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003434:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003438:	2b00      	cmp	r3, #0
 800343a:	d115      	bne.n	8003468 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800343c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003440:	f003 0320 	and.w	r3, r3, #32
 8003444:	2b00      	cmp	r3, #0
 8003446:	d00f      	beq.n	8003468 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003448:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800344c:	f003 0320 	and.w	r3, r3, #32
 8003450:	2b00      	cmp	r3, #0
 8003452:	d009      	beq.n	8003468 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003458:	2b00      	cmp	r3, #0
 800345a:	f000 82a6 	beq.w	80039aa <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	4798      	blx	r3
      }
      return;
 8003466:	e2a0      	b.n	80039aa <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003468:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800346c:	2b00      	cmp	r3, #0
 800346e:	f000 8117 	beq.w	80036a0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003472:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003476:	f003 0301 	and.w	r3, r3, #1
 800347a:	2b00      	cmp	r3, #0
 800347c:	d106      	bne.n	800348c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800347e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003482:	4b85      	ldr	r3, [pc, #532]	; (8003698 <HAL_UART_IRQHandler+0x298>)
 8003484:	4013      	ands	r3, r2
 8003486:	2b00      	cmp	r3, #0
 8003488:	f000 810a 	beq.w	80036a0 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800348c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003490:	f003 0301 	and.w	r3, r3, #1
 8003494:	2b00      	cmp	r3, #0
 8003496:	d011      	beq.n	80034bc <HAL_UART_IRQHandler+0xbc>
 8003498:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800349c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d00b      	beq.n	80034bc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	2201      	movs	r2, #1
 80034aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80034b2:	f043 0201 	orr.w	r2, r3, #1
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80034bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034c0:	f003 0302 	and.w	r3, r3, #2
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d011      	beq.n	80034ec <HAL_UART_IRQHandler+0xec>
 80034c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80034cc:	f003 0301 	and.w	r3, r3, #1
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d00b      	beq.n	80034ec <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	2202      	movs	r2, #2
 80034da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80034e2:	f043 0204 	orr.w	r2, r3, #4
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80034ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034f0:	f003 0304 	and.w	r3, r3, #4
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d011      	beq.n	800351c <HAL_UART_IRQHandler+0x11c>
 80034f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80034fc:	f003 0301 	and.w	r3, r3, #1
 8003500:	2b00      	cmp	r3, #0
 8003502:	d00b      	beq.n	800351c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	2204      	movs	r2, #4
 800350a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003512:	f043 0202 	orr.w	r2, r3, #2
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800351c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003520:	f003 0308 	and.w	r3, r3, #8
 8003524:	2b00      	cmp	r3, #0
 8003526:	d017      	beq.n	8003558 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003528:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800352c:	f003 0320 	and.w	r3, r3, #32
 8003530:	2b00      	cmp	r3, #0
 8003532:	d105      	bne.n	8003540 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003534:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003538:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800353c:	2b00      	cmp	r3, #0
 800353e:	d00b      	beq.n	8003558 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	2208      	movs	r2, #8
 8003546:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800354e:	f043 0208 	orr.w	r2, r3, #8
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003558:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800355c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003560:	2b00      	cmp	r3, #0
 8003562:	d012      	beq.n	800358a <HAL_UART_IRQHandler+0x18a>
 8003564:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003568:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800356c:	2b00      	cmp	r3, #0
 800356e:	d00c      	beq.n	800358a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003578:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003580:	f043 0220 	orr.w	r2, r3, #32
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003590:	2b00      	cmp	r3, #0
 8003592:	f000 820c 	beq.w	80039ae <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003596:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800359a:	f003 0320 	and.w	r3, r3, #32
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d00d      	beq.n	80035be <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80035a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035a6:	f003 0320 	and.w	r3, r3, #32
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d007      	beq.n	80035be <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d003      	beq.n	80035be <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035c4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035d2:	2b40      	cmp	r3, #64	; 0x40
 80035d4:	d005      	beq.n	80035e2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80035d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80035da:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d04f      	beq.n	8003682 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f000 fe6b 	bl	80042be <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035f2:	2b40      	cmp	r3, #64	; 0x40
 80035f4:	d141      	bne.n	800367a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	3308      	adds	r3, #8
 80035fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003600:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003604:	e853 3f00 	ldrex	r3, [r3]
 8003608:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800360c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003610:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003614:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	3308      	adds	r3, #8
 800361e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003622:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003626:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800362a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800362e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003632:	e841 2300 	strex	r3, r2, [r1]
 8003636:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800363a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800363e:	2b00      	cmp	r3, #0
 8003640:	d1d9      	bne.n	80035f6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003646:	2b00      	cmp	r3, #0
 8003648:	d013      	beq.n	8003672 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800364e:	4a13      	ldr	r2, [pc, #76]	; (800369c <HAL_UART_IRQHandler+0x29c>)
 8003650:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003656:	4618      	mov	r0, r3
 8003658:	f7fd fdf9 	bl	800124e <HAL_DMA_Abort_IT>
 800365c:	4603      	mov	r3, r0
 800365e:	2b00      	cmp	r3, #0
 8003660:	d017      	beq.n	8003692 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003668:	687a      	ldr	r2, [r7, #4]
 800366a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800366c:	4610      	mov	r0, r2
 800366e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003670:	e00f      	b.n	8003692 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f000 f9a6 	bl	80039c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003678:	e00b      	b.n	8003692 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f000 f9a2 	bl	80039c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003680:	e007      	b.n	8003692 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f000 f99e 	bl	80039c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2200      	movs	r2, #0
 800368c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003690:	e18d      	b.n	80039ae <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003692:	bf00      	nop
    return;
 8003694:	e18b      	b.n	80039ae <HAL_UART_IRQHandler+0x5ae>
 8003696:	bf00      	nop
 8003698:	04000120 	.word	0x04000120
 800369c:	08004385 	.word	0x08004385

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	f040 8146 	bne.w	8003936 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80036aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036ae:	f003 0310 	and.w	r3, r3, #16
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	f000 813f 	beq.w	8003936 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80036b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036bc:	f003 0310 	and.w	r3, r3, #16
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	f000 8138 	beq.w	8003936 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	2210      	movs	r2, #16
 80036cc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036d8:	2b40      	cmp	r3, #64	; 0x40
 80036da:	f040 80b4 	bne.w	8003846 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80036ea:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	f000 815f 	beq.w	80039b2 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80036fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80036fe:	429a      	cmp	r2, r3
 8003700:	f080 8157 	bcs.w	80039b2 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800370a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 0320 	and.w	r3, r3, #32
 800371a:	2b00      	cmp	r3, #0
 800371c:	f040 8085 	bne.w	800382a <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003728:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800372c:	e853 3f00 	ldrex	r3, [r3]
 8003730:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003734:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003738:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800373c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	461a      	mov	r2, r3
 8003746:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800374a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800374e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003752:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003756:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800375a:	e841 2300 	strex	r3, r2, [r1]
 800375e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003762:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003766:	2b00      	cmp	r3, #0
 8003768:	d1da      	bne.n	8003720 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	3308      	adds	r3, #8
 8003770:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003772:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003774:	e853 3f00 	ldrex	r3, [r3]
 8003778:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800377a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800377c:	f023 0301 	bic.w	r3, r3, #1
 8003780:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	3308      	adds	r3, #8
 800378a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800378e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003792:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003794:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003796:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800379a:	e841 2300 	strex	r3, r2, [r1]
 800379e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80037a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d1e1      	bne.n	800376a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	3308      	adds	r3, #8
 80037ac:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80037b0:	e853 3f00 	ldrex	r3, [r3]
 80037b4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80037b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	3308      	adds	r3, #8
 80037c6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80037ca:	66fa      	str	r2, [r7, #108]	; 0x6c
 80037cc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ce:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80037d0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80037d2:	e841 2300 	strex	r3, r2, [r1]
 80037d6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80037d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d1e3      	bne.n	80037a6 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2220      	movs	r2, #32
 80037e2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2200      	movs	r2, #0
 80037e8:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037f2:	e853 3f00 	ldrex	r3, [r3]
 80037f6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80037f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037fa:	f023 0310 	bic.w	r3, r3, #16
 80037fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	461a      	mov	r2, r3
 8003808:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800380c:	65bb      	str	r3, [r7, #88]	; 0x58
 800380e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003810:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003812:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003814:	e841 2300 	strex	r3, r2, [r1]
 8003818:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800381a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800381c:	2b00      	cmp	r3, #0
 800381e:	d1e4      	bne.n	80037ea <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003824:	4618      	mov	r0, r3
 8003826:	f7fd fcd4 	bl	80011d2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003836:	b29b      	uxth	r3, r3
 8003838:	1ad3      	subs	r3, r2, r3
 800383a:	b29b      	uxth	r3, r3
 800383c:	4619      	mov	r1, r3
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f000 f8ca 	bl	80039d8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003844:	e0b5      	b.n	80039b2 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003852:	b29b      	uxth	r3, r3
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003860:	b29b      	uxth	r3, r3
 8003862:	2b00      	cmp	r3, #0
 8003864:	f000 80a7 	beq.w	80039b6 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8003868:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800386c:	2b00      	cmp	r3, #0
 800386e:	f000 80a2 	beq.w	80039b6 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800387a:	e853 3f00 	ldrex	r3, [r3]
 800387e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003880:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003882:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003886:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	461a      	mov	r2, r3
 8003890:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003894:	647b      	str	r3, [r7, #68]	; 0x44
 8003896:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003898:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800389a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800389c:	e841 2300 	strex	r3, r2, [r1]
 80038a0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80038a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d1e4      	bne.n	8003872 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	3308      	adds	r3, #8
 80038ae:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b2:	e853 3f00 	ldrex	r3, [r3]
 80038b6:	623b      	str	r3, [r7, #32]
   return(result);
 80038b8:	6a3b      	ldr	r3, [r7, #32]
 80038ba:	f023 0301 	bic.w	r3, r3, #1
 80038be:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	3308      	adds	r3, #8
 80038c8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80038cc:	633a      	str	r2, [r7, #48]	; 0x30
 80038ce:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038d0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80038d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038d4:	e841 2300 	strex	r3, r2, [r1]
 80038d8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80038da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d1e3      	bne.n	80038a8 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2220      	movs	r2, #32
 80038e4:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2200      	movs	r2, #0
 80038ea:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2200      	movs	r2, #0
 80038f0:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	e853 3f00 	ldrex	r3, [r3]
 80038fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f023 0310 	bic.w	r3, r3, #16
 8003906:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	461a      	mov	r2, r3
 8003910:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003914:	61fb      	str	r3, [r7, #28]
 8003916:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003918:	69b9      	ldr	r1, [r7, #24]
 800391a:	69fa      	ldr	r2, [r7, #28]
 800391c:	e841 2300 	strex	r3, r2, [r1]
 8003920:	617b      	str	r3, [r7, #20]
   return(result);
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d1e4      	bne.n	80038f2 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003928:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800392c:	4619      	mov	r1, r3
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f000 f852 	bl	80039d8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003934:	e03f      	b.n	80039b6 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003936:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800393a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800393e:	2b00      	cmp	r3, #0
 8003940:	d00e      	beq.n	8003960 <HAL_UART_IRQHandler+0x560>
 8003942:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003946:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800394a:	2b00      	cmp	r3, #0
 800394c:	d008      	beq.n	8003960 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003956:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003958:	6878      	ldr	r0, [r7, #4]
 800395a:	f000 fe0f 	bl	800457c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800395e:	e02d      	b.n	80039bc <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003960:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003964:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003968:	2b00      	cmp	r3, #0
 800396a:	d00e      	beq.n	800398a <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800396c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003970:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003974:	2b00      	cmp	r3, #0
 8003976:	d008      	beq.n	800398a <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800397c:	2b00      	cmp	r3, #0
 800397e:	d01c      	beq.n	80039ba <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003984:	6878      	ldr	r0, [r7, #4]
 8003986:	4798      	blx	r3
    }
    return;
 8003988:	e017      	b.n	80039ba <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800398a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800398e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003992:	2b00      	cmp	r3, #0
 8003994:	d012      	beq.n	80039bc <HAL_UART_IRQHandler+0x5bc>
 8003996:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800399a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d00c      	beq.n	80039bc <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f000 fdc0 	bl	8004528 <UART_EndTransmit_IT>
    return;
 80039a8:	e008      	b.n	80039bc <HAL_UART_IRQHandler+0x5bc>
      return;
 80039aa:	bf00      	nop
 80039ac:	e006      	b.n	80039bc <HAL_UART_IRQHandler+0x5bc>
    return;
 80039ae:	bf00      	nop
 80039b0:	e004      	b.n	80039bc <HAL_UART_IRQHandler+0x5bc>
      return;
 80039b2:	bf00      	nop
 80039b4:	e002      	b.n	80039bc <HAL_UART_IRQHandler+0x5bc>
      return;
 80039b6:	bf00      	nop
 80039b8:	e000      	b.n	80039bc <HAL_UART_IRQHandler+0x5bc>
    return;
 80039ba:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80039bc:	37e8      	adds	r7, #232	; 0xe8
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	bf00      	nop

080039c4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b083      	sub	sp, #12
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80039cc:	bf00      	nop
 80039ce:	370c      	adds	r7, #12
 80039d0:	46bd      	mov	sp, r7
 80039d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d6:	4770      	bx	lr

080039d8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80039d8:	b480      	push	{r7}
 80039da:	b083      	sub	sp, #12
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
 80039e0:	460b      	mov	r3, r1
 80039e2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80039e4:	bf00      	nop
 80039e6:	370c      	adds	r7, #12
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr

080039f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039f4:	b08a      	sub	sp, #40	; 0x28
 80039f6:	af00      	add	r7, sp, #0
 80039f8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80039fa:	2300      	movs	r3, #0
 80039fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	689a      	ldr	r2, [r3, #8]
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	691b      	ldr	r3, [r3, #16]
 8003a08:	431a      	orrs	r2, r3
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	695b      	ldr	r3, [r3, #20]
 8003a0e:	431a      	orrs	r2, r3
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	69db      	ldr	r3, [r3, #28]
 8003a14:	4313      	orrs	r3, r2
 8003a16:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	4ba4      	ldr	r3, [pc, #656]	; (8003cb0 <UART_SetConfig+0x2c0>)
 8003a20:	4013      	ands	r3, r2
 8003a22:	68fa      	ldr	r2, [r7, #12]
 8003a24:	6812      	ldr	r2, [r2, #0]
 8003a26:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a28:	430b      	orrs	r3, r1
 8003a2a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	68da      	ldr	r2, [r3, #12]
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	430a      	orrs	r2, r1
 8003a40:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	699b      	ldr	r3, [r3, #24]
 8003a46:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a99      	ldr	r2, [pc, #612]	; (8003cb4 <UART_SetConfig+0x2c4>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d004      	beq.n	8003a5c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	6a1b      	ldr	r3, [r3, #32]
 8003a56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a6c:	430a      	orrs	r2, r1
 8003a6e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a90      	ldr	r2, [pc, #576]	; (8003cb8 <UART_SetConfig+0x2c8>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d126      	bne.n	8003ac8 <UART_SetConfig+0xd8>
 8003a7a:	4b90      	ldr	r3, [pc, #576]	; (8003cbc <UART_SetConfig+0x2cc>)
 8003a7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a80:	f003 0303 	and.w	r3, r3, #3
 8003a84:	2b03      	cmp	r3, #3
 8003a86:	d81b      	bhi.n	8003ac0 <UART_SetConfig+0xd0>
 8003a88:	a201      	add	r2, pc, #4	; (adr r2, 8003a90 <UART_SetConfig+0xa0>)
 8003a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a8e:	bf00      	nop
 8003a90:	08003aa1 	.word	0x08003aa1
 8003a94:	08003ab1 	.word	0x08003ab1
 8003a98:	08003aa9 	.word	0x08003aa9
 8003a9c:	08003ab9 	.word	0x08003ab9
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003aa6:	e116      	b.n	8003cd6 <UART_SetConfig+0x2e6>
 8003aa8:	2302      	movs	r3, #2
 8003aaa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003aae:	e112      	b.n	8003cd6 <UART_SetConfig+0x2e6>
 8003ab0:	2304      	movs	r3, #4
 8003ab2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ab6:	e10e      	b.n	8003cd6 <UART_SetConfig+0x2e6>
 8003ab8:	2308      	movs	r3, #8
 8003aba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003abe:	e10a      	b.n	8003cd6 <UART_SetConfig+0x2e6>
 8003ac0:	2310      	movs	r3, #16
 8003ac2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ac6:	e106      	b.n	8003cd6 <UART_SetConfig+0x2e6>
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a7c      	ldr	r2, [pc, #496]	; (8003cc0 <UART_SetConfig+0x2d0>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d138      	bne.n	8003b44 <UART_SetConfig+0x154>
 8003ad2:	4b7a      	ldr	r3, [pc, #488]	; (8003cbc <UART_SetConfig+0x2cc>)
 8003ad4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ad8:	f003 030c 	and.w	r3, r3, #12
 8003adc:	2b0c      	cmp	r3, #12
 8003ade:	d82d      	bhi.n	8003b3c <UART_SetConfig+0x14c>
 8003ae0:	a201      	add	r2, pc, #4	; (adr r2, 8003ae8 <UART_SetConfig+0xf8>)
 8003ae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ae6:	bf00      	nop
 8003ae8:	08003b1d 	.word	0x08003b1d
 8003aec:	08003b3d 	.word	0x08003b3d
 8003af0:	08003b3d 	.word	0x08003b3d
 8003af4:	08003b3d 	.word	0x08003b3d
 8003af8:	08003b2d 	.word	0x08003b2d
 8003afc:	08003b3d 	.word	0x08003b3d
 8003b00:	08003b3d 	.word	0x08003b3d
 8003b04:	08003b3d 	.word	0x08003b3d
 8003b08:	08003b25 	.word	0x08003b25
 8003b0c:	08003b3d 	.word	0x08003b3d
 8003b10:	08003b3d 	.word	0x08003b3d
 8003b14:	08003b3d 	.word	0x08003b3d
 8003b18:	08003b35 	.word	0x08003b35
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b22:	e0d8      	b.n	8003cd6 <UART_SetConfig+0x2e6>
 8003b24:	2302      	movs	r3, #2
 8003b26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b2a:	e0d4      	b.n	8003cd6 <UART_SetConfig+0x2e6>
 8003b2c:	2304      	movs	r3, #4
 8003b2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b32:	e0d0      	b.n	8003cd6 <UART_SetConfig+0x2e6>
 8003b34:	2308      	movs	r3, #8
 8003b36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b3a:	e0cc      	b.n	8003cd6 <UART_SetConfig+0x2e6>
 8003b3c:	2310      	movs	r3, #16
 8003b3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b42:	e0c8      	b.n	8003cd6 <UART_SetConfig+0x2e6>
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a5e      	ldr	r2, [pc, #376]	; (8003cc4 <UART_SetConfig+0x2d4>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d125      	bne.n	8003b9a <UART_SetConfig+0x1aa>
 8003b4e:	4b5b      	ldr	r3, [pc, #364]	; (8003cbc <UART_SetConfig+0x2cc>)
 8003b50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b54:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003b58:	2b30      	cmp	r3, #48	; 0x30
 8003b5a:	d016      	beq.n	8003b8a <UART_SetConfig+0x19a>
 8003b5c:	2b30      	cmp	r3, #48	; 0x30
 8003b5e:	d818      	bhi.n	8003b92 <UART_SetConfig+0x1a2>
 8003b60:	2b20      	cmp	r3, #32
 8003b62:	d00a      	beq.n	8003b7a <UART_SetConfig+0x18a>
 8003b64:	2b20      	cmp	r3, #32
 8003b66:	d814      	bhi.n	8003b92 <UART_SetConfig+0x1a2>
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d002      	beq.n	8003b72 <UART_SetConfig+0x182>
 8003b6c:	2b10      	cmp	r3, #16
 8003b6e:	d008      	beq.n	8003b82 <UART_SetConfig+0x192>
 8003b70:	e00f      	b.n	8003b92 <UART_SetConfig+0x1a2>
 8003b72:	2300      	movs	r3, #0
 8003b74:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b78:	e0ad      	b.n	8003cd6 <UART_SetConfig+0x2e6>
 8003b7a:	2302      	movs	r3, #2
 8003b7c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b80:	e0a9      	b.n	8003cd6 <UART_SetConfig+0x2e6>
 8003b82:	2304      	movs	r3, #4
 8003b84:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b88:	e0a5      	b.n	8003cd6 <UART_SetConfig+0x2e6>
 8003b8a:	2308      	movs	r3, #8
 8003b8c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b90:	e0a1      	b.n	8003cd6 <UART_SetConfig+0x2e6>
 8003b92:	2310      	movs	r3, #16
 8003b94:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b98:	e09d      	b.n	8003cd6 <UART_SetConfig+0x2e6>
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a4a      	ldr	r2, [pc, #296]	; (8003cc8 <UART_SetConfig+0x2d8>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d125      	bne.n	8003bf0 <UART_SetConfig+0x200>
 8003ba4:	4b45      	ldr	r3, [pc, #276]	; (8003cbc <UART_SetConfig+0x2cc>)
 8003ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003baa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003bae:	2bc0      	cmp	r3, #192	; 0xc0
 8003bb0:	d016      	beq.n	8003be0 <UART_SetConfig+0x1f0>
 8003bb2:	2bc0      	cmp	r3, #192	; 0xc0
 8003bb4:	d818      	bhi.n	8003be8 <UART_SetConfig+0x1f8>
 8003bb6:	2b80      	cmp	r3, #128	; 0x80
 8003bb8:	d00a      	beq.n	8003bd0 <UART_SetConfig+0x1e0>
 8003bba:	2b80      	cmp	r3, #128	; 0x80
 8003bbc:	d814      	bhi.n	8003be8 <UART_SetConfig+0x1f8>
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d002      	beq.n	8003bc8 <UART_SetConfig+0x1d8>
 8003bc2:	2b40      	cmp	r3, #64	; 0x40
 8003bc4:	d008      	beq.n	8003bd8 <UART_SetConfig+0x1e8>
 8003bc6:	e00f      	b.n	8003be8 <UART_SetConfig+0x1f8>
 8003bc8:	2300      	movs	r3, #0
 8003bca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bce:	e082      	b.n	8003cd6 <UART_SetConfig+0x2e6>
 8003bd0:	2302      	movs	r3, #2
 8003bd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bd6:	e07e      	b.n	8003cd6 <UART_SetConfig+0x2e6>
 8003bd8:	2304      	movs	r3, #4
 8003bda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bde:	e07a      	b.n	8003cd6 <UART_SetConfig+0x2e6>
 8003be0:	2308      	movs	r3, #8
 8003be2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003be6:	e076      	b.n	8003cd6 <UART_SetConfig+0x2e6>
 8003be8:	2310      	movs	r3, #16
 8003bea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bee:	e072      	b.n	8003cd6 <UART_SetConfig+0x2e6>
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a35      	ldr	r2, [pc, #212]	; (8003ccc <UART_SetConfig+0x2dc>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d12a      	bne.n	8003c50 <UART_SetConfig+0x260>
 8003bfa:	4b30      	ldr	r3, [pc, #192]	; (8003cbc <UART_SetConfig+0x2cc>)
 8003bfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c04:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c08:	d01a      	beq.n	8003c40 <UART_SetConfig+0x250>
 8003c0a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c0e:	d81b      	bhi.n	8003c48 <UART_SetConfig+0x258>
 8003c10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c14:	d00c      	beq.n	8003c30 <UART_SetConfig+0x240>
 8003c16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c1a:	d815      	bhi.n	8003c48 <UART_SetConfig+0x258>
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d003      	beq.n	8003c28 <UART_SetConfig+0x238>
 8003c20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c24:	d008      	beq.n	8003c38 <UART_SetConfig+0x248>
 8003c26:	e00f      	b.n	8003c48 <UART_SetConfig+0x258>
 8003c28:	2300      	movs	r3, #0
 8003c2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c2e:	e052      	b.n	8003cd6 <UART_SetConfig+0x2e6>
 8003c30:	2302      	movs	r3, #2
 8003c32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c36:	e04e      	b.n	8003cd6 <UART_SetConfig+0x2e6>
 8003c38:	2304      	movs	r3, #4
 8003c3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c3e:	e04a      	b.n	8003cd6 <UART_SetConfig+0x2e6>
 8003c40:	2308      	movs	r3, #8
 8003c42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c46:	e046      	b.n	8003cd6 <UART_SetConfig+0x2e6>
 8003c48:	2310      	movs	r3, #16
 8003c4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c4e:	e042      	b.n	8003cd6 <UART_SetConfig+0x2e6>
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a17      	ldr	r2, [pc, #92]	; (8003cb4 <UART_SetConfig+0x2c4>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d13a      	bne.n	8003cd0 <UART_SetConfig+0x2e0>
 8003c5a:	4b18      	ldr	r3, [pc, #96]	; (8003cbc <UART_SetConfig+0x2cc>)
 8003c5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c60:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003c64:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003c68:	d01a      	beq.n	8003ca0 <UART_SetConfig+0x2b0>
 8003c6a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003c6e:	d81b      	bhi.n	8003ca8 <UART_SetConfig+0x2b8>
 8003c70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c74:	d00c      	beq.n	8003c90 <UART_SetConfig+0x2a0>
 8003c76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c7a:	d815      	bhi.n	8003ca8 <UART_SetConfig+0x2b8>
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d003      	beq.n	8003c88 <UART_SetConfig+0x298>
 8003c80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c84:	d008      	beq.n	8003c98 <UART_SetConfig+0x2a8>
 8003c86:	e00f      	b.n	8003ca8 <UART_SetConfig+0x2b8>
 8003c88:	2300      	movs	r3, #0
 8003c8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c8e:	e022      	b.n	8003cd6 <UART_SetConfig+0x2e6>
 8003c90:	2302      	movs	r3, #2
 8003c92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c96:	e01e      	b.n	8003cd6 <UART_SetConfig+0x2e6>
 8003c98:	2304      	movs	r3, #4
 8003c9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c9e:	e01a      	b.n	8003cd6 <UART_SetConfig+0x2e6>
 8003ca0:	2308      	movs	r3, #8
 8003ca2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ca6:	e016      	b.n	8003cd6 <UART_SetConfig+0x2e6>
 8003ca8:	2310      	movs	r3, #16
 8003caa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cae:	e012      	b.n	8003cd6 <UART_SetConfig+0x2e6>
 8003cb0:	efff69f3 	.word	0xefff69f3
 8003cb4:	40008000 	.word	0x40008000
 8003cb8:	40013800 	.word	0x40013800
 8003cbc:	40021000 	.word	0x40021000
 8003cc0:	40004400 	.word	0x40004400
 8003cc4:	40004800 	.word	0x40004800
 8003cc8:	40004c00 	.word	0x40004c00
 8003ccc:	40005000 	.word	0x40005000
 8003cd0:	2310      	movs	r3, #16
 8003cd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a9f      	ldr	r2, [pc, #636]	; (8003f58 <UART_SetConfig+0x568>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d17a      	bne.n	8003dd6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003ce0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003ce4:	2b08      	cmp	r3, #8
 8003ce6:	d824      	bhi.n	8003d32 <UART_SetConfig+0x342>
 8003ce8:	a201      	add	r2, pc, #4	; (adr r2, 8003cf0 <UART_SetConfig+0x300>)
 8003cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cee:	bf00      	nop
 8003cf0:	08003d15 	.word	0x08003d15
 8003cf4:	08003d33 	.word	0x08003d33
 8003cf8:	08003d1d 	.word	0x08003d1d
 8003cfc:	08003d33 	.word	0x08003d33
 8003d00:	08003d23 	.word	0x08003d23
 8003d04:	08003d33 	.word	0x08003d33
 8003d08:	08003d33 	.word	0x08003d33
 8003d0c:	08003d33 	.word	0x08003d33
 8003d10:	08003d2b 	.word	0x08003d2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d14:	f7fe fa90 	bl	8002238 <HAL_RCC_GetPCLK1Freq>
 8003d18:	61f8      	str	r0, [r7, #28]
        break;
 8003d1a:	e010      	b.n	8003d3e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d1c:	4b8f      	ldr	r3, [pc, #572]	; (8003f5c <UART_SetConfig+0x56c>)
 8003d1e:	61fb      	str	r3, [r7, #28]
        break;
 8003d20:	e00d      	b.n	8003d3e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d22:	f7fe f9f1 	bl	8002108 <HAL_RCC_GetSysClockFreq>
 8003d26:	61f8      	str	r0, [r7, #28]
        break;
 8003d28:	e009      	b.n	8003d3e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d2e:	61fb      	str	r3, [r7, #28]
        break;
 8003d30:	e005      	b.n	8003d3e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003d32:	2300      	movs	r3, #0
 8003d34:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003d3c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	f000 80fb 	beq.w	8003f3c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	685a      	ldr	r2, [r3, #4]
 8003d4a:	4613      	mov	r3, r2
 8003d4c:	005b      	lsls	r3, r3, #1
 8003d4e:	4413      	add	r3, r2
 8003d50:	69fa      	ldr	r2, [r7, #28]
 8003d52:	429a      	cmp	r2, r3
 8003d54:	d305      	bcc.n	8003d62 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003d5c:	69fa      	ldr	r2, [r7, #28]
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d903      	bls.n	8003d6a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003d68:	e0e8      	b.n	8003f3c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003d6a:	69fb      	ldr	r3, [r7, #28]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	461c      	mov	r4, r3
 8003d70:	4615      	mov	r5, r2
 8003d72:	f04f 0200 	mov.w	r2, #0
 8003d76:	f04f 0300 	mov.w	r3, #0
 8003d7a:	022b      	lsls	r3, r5, #8
 8003d7c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003d80:	0222      	lsls	r2, r4, #8
 8003d82:	68f9      	ldr	r1, [r7, #12]
 8003d84:	6849      	ldr	r1, [r1, #4]
 8003d86:	0849      	lsrs	r1, r1, #1
 8003d88:	2000      	movs	r0, #0
 8003d8a:	4688      	mov	r8, r1
 8003d8c:	4681      	mov	r9, r0
 8003d8e:	eb12 0a08 	adds.w	sl, r2, r8
 8003d92:	eb43 0b09 	adc.w	fp, r3, r9
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	603b      	str	r3, [r7, #0]
 8003d9e:	607a      	str	r2, [r7, #4]
 8003da0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003da4:	4650      	mov	r0, sl
 8003da6:	4659      	mov	r1, fp
 8003da8:	f7fc fa7a 	bl	80002a0 <__aeabi_uldivmod>
 8003dac:	4602      	mov	r2, r0
 8003dae:	460b      	mov	r3, r1
 8003db0:	4613      	mov	r3, r2
 8003db2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003db4:	69bb      	ldr	r3, [r7, #24]
 8003db6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003dba:	d308      	bcc.n	8003dce <UART_SetConfig+0x3de>
 8003dbc:	69bb      	ldr	r3, [r7, #24]
 8003dbe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003dc2:	d204      	bcs.n	8003dce <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	69ba      	ldr	r2, [r7, #24]
 8003dca:	60da      	str	r2, [r3, #12]
 8003dcc:	e0b6      	b.n	8003f3c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003dd4:	e0b2      	b.n	8003f3c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	69db      	ldr	r3, [r3, #28]
 8003dda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dde:	d15e      	bne.n	8003e9e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003de0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003de4:	2b08      	cmp	r3, #8
 8003de6:	d828      	bhi.n	8003e3a <UART_SetConfig+0x44a>
 8003de8:	a201      	add	r2, pc, #4	; (adr r2, 8003df0 <UART_SetConfig+0x400>)
 8003dea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dee:	bf00      	nop
 8003df0:	08003e15 	.word	0x08003e15
 8003df4:	08003e1d 	.word	0x08003e1d
 8003df8:	08003e25 	.word	0x08003e25
 8003dfc:	08003e3b 	.word	0x08003e3b
 8003e00:	08003e2b 	.word	0x08003e2b
 8003e04:	08003e3b 	.word	0x08003e3b
 8003e08:	08003e3b 	.word	0x08003e3b
 8003e0c:	08003e3b 	.word	0x08003e3b
 8003e10:	08003e33 	.word	0x08003e33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e14:	f7fe fa10 	bl	8002238 <HAL_RCC_GetPCLK1Freq>
 8003e18:	61f8      	str	r0, [r7, #28]
        break;
 8003e1a:	e014      	b.n	8003e46 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e1c:	f7fe fa22 	bl	8002264 <HAL_RCC_GetPCLK2Freq>
 8003e20:	61f8      	str	r0, [r7, #28]
        break;
 8003e22:	e010      	b.n	8003e46 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e24:	4b4d      	ldr	r3, [pc, #308]	; (8003f5c <UART_SetConfig+0x56c>)
 8003e26:	61fb      	str	r3, [r7, #28]
        break;
 8003e28:	e00d      	b.n	8003e46 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e2a:	f7fe f96d 	bl	8002108 <HAL_RCC_GetSysClockFreq>
 8003e2e:	61f8      	str	r0, [r7, #28]
        break;
 8003e30:	e009      	b.n	8003e46 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e36:	61fb      	str	r3, [r7, #28]
        break;
 8003e38:	e005      	b.n	8003e46 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003e44:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003e46:	69fb      	ldr	r3, [r7, #28]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d077      	beq.n	8003f3c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003e4c:	69fb      	ldr	r3, [r7, #28]
 8003e4e:	005a      	lsls	r2, r3, #1
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	085b      	lsrs	r3, r3, #1
 8003e56:	441a      	add	r2, r3
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e60:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e62:	69bb      	ldr	r3, [r7, #24]
 8003e64:	2b0f      	cmp	r3, #15
 8003e66:	d916      	bls.n	8003e96 <UART_SetConfig+0x4a6>
 8003e68:	69bb      	ldr	r3, [r7, #24]
 8003e6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e6e:	d212      	bcs.n	8003e96 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003e70:	69bb      	ldr	r3, [r7, #24]
 8003e72:	b29b      	uxth	r3, r3
 8003e74:	f023 030f 	bic.w	r3, r3, #15
 8003e78:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003e7a:	69bb      	ldr	r3, [r7, #24]
 8003e7c:	085b      	lsrs	r3, r3, #1
 8003e7e:	b29b      	uxth	r3, r3
 8003e80:	f003 0307 	and.w	r3, r3, #7
 8003e84:	b29a      	uxth	r2, r3
 8003e86:	8afb      	ldrh	r3, [r7, #22]
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	8afa      	ldrh	r2, [r7, #22]
 8003e92:	60da      	str	r2, [r3, #12]
 8003e94:	e052      	b.n	8003f3c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003e9c:	e04e      	b.n	8003f3c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003e9e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003ea2:	2b08      	cmp	r3, #8
 8003ea4:	d827      	bhi.n	8003ef6 <UART_SetConfig+0x506>
 8003ea6:	a201      	add	r2, pc, #4	; (adr r2, 8003eac <UART_SetConfig+0x4bc>)
 8003ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eac:	08003ed1 	.word	0x08003ed1
 8003eb0:	08003ed9 	.word	0x08003ed9
 8003eb4:	08003ee1 	.word	0x08003ee1
 8003eb8:	08003ef7 	.word	0x08003ef7
 8003ebc:	08003ee7 	.word	0x08003ee7
 8003ec0:	08003ef7 	.word	0x08003ef7
 8003ec4:	08003ef7 	.word	0x08003ef7
 8003ec8:	08003ef7 	.word	0x08003ef7
 8003ecc:	08003eef 	.word	0x08003eef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ed0:	f7fe f9b2 	bl	8002238 <HAL_RCC_GetPCLK1Freq>
 8003ed4:	61f8      	str	r0, [r7, #28]
        break;
 8003ed6:	e014      	b.n	8003f02 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ed8:	f7fe f9c4 	bl	8002264 <HAL_RCC_GetPCLK2Freq>
 8003edc:	61f8      	str	r0, [r7, #28]
        break;
 8003ede:	e010      	b.n	8003f02 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ee0:	4b1e      	ldr	r3, [pc, #120]	; (8003f5c <UART_SetConfig+0x56c>)
 8003ee2:	61fb      	str	r3, [r7, #28]
        break;
 8003ee4:	e00d      	b.n	8003f02 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ee6:	f7fe f90f 	bl	8002108 <HAL_RCC_GetSysClockFreq>
 8003eea:	61f8      	str	r0, [r7, #28]
        break;
 8003eec:	e009      	b.n	8003f02 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003eee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ef2:	61fb      	str	r3, [r7, #28]
        break;
 8003ef4:	e005      	b.n	8003f02 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003f00:	bf00      	nop
    }

    if (pclk != 0U)
 8003f02:	69fb      	ldr	r3, [r7, #28]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d019      	beq.n	8003f3c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	085a      	lsrs	r2, r3, #1
 8003f0e:	69fb      	ldr	r3, [r7, #28]
 8003f10:	441a      	add	r2, r3
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f1a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f1c:	69bb      	ldr	r3, [r7, #24]
 8003f1e:	2b0f      	cmp	r3, #15
 8003f20:	d909      	bls.n	8003f36 <UART_SetConfig+0x546>
 8003f22:	69bb      	ldr	r3, [r7, #24]
 8003f24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f28:	d205      	bcs.n	8003f36 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003f2a:	69bb      	ldr	r3, [r7, #24]
 8003f2c:	b29a      	uxth	r2, r3
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	60da      	str	r2, [r3, #12]
 8003f34:	e002      	b.n	8003f3c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2200      	movs	r2, #0
 8003f46:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003f48:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	3728      	adds	r7, #40	; 0x28
 8003f50:	46bd      	mov	sp, r7
 8003f52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f56:	bf00      	nop
 8003f58:	40008000 	.word	0x40008000
 8003f5c:	00f42400 	.word	0x00f42400

08003f60 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b083      	sub	sp, #12
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f6c:	f003 0301 	and.w	r3, r3, #1
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d00a      	beq.n	8003f8a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	430a      	orrs	r2, r1
 8003f88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f8e:	f003 0302 	and.w	r3, r3, #2
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d00a      	beq.n	8003fac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	430a      	orrs	r2, r1
 8003faa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb0:	f003 0304 	and.w	r3, r3, #4
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d00a      	beq.n	8003fce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	430a      	orrs	r2, r1
 8003fcc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd2:	f003 0308 	and.w	r3, r3, #8
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d00a      	beq.n	8003ff0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	430a      	orrs	r2, r1
 8003fee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff4:	f003 0310 	and.w	r3, r3, #16
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d00a      	beq.n	8004012 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	430a      	orrs	r2, r1
 8004010:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004016:	f003 0320 	and.w	r3, r3, #32
 800401a:	2b00      	cmp	r3, #0
 800401c:	d00a      	beq.n	8004034 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	430a      	orrs	r2, r1
 8004032:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004038:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800403c:	2b00      	cmp	r3, #0
 800403e:	d01a      	beq.n	8004076 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	430a      	orrs	r2, r1
 8004054:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800405a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800405e:	d10a      	bne.n	8004076 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	430a      	orrs	r2, r1
 8004074:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800407a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800407e:	2b00      	cmp	r3, #0
 8004080:	d00a      	beq.n	8004098 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	430a      	orrs	r2, r1
 8004096:	605a      	str	r2, [r3, #4]
  }
}
 8004098:	bf00      	nop
 800409a:	370c      	adds	r7, #12
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr

080040a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b086      	sub	sp, #24
 80040a8:	af02      	add	r7, sp, #8
 80040aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2200      	movs	r2, #0
 80040b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80040b4:	f7fc ff70 	bl	8000f98 <HAL_GetTick>
 80040b8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f003 0308 	and.w	r3, r3, #8
 80040c4:	2b08      	cmp	r3, #8
 80040c6:	d10e      	bne.n	80040e6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80040cc:	9300      	str	r3, [sp, #0]
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2200      	movs	r2, #0
 80040d2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f000 f82d 	bl	8004136 <UART_WaitOnFlagUntilTimeout>
 80040dc:	4603      	mov	r3, r0
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d001      	beq.n	80040e6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040e2:	2303      	movs	r3, #3
 80040e4:	e023      	b.n	800412e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f003 0304 	and.w	r3, r3, #4
 80040f0:	2b04      	cmp	r3, #4
 80040f2:	d10e      	bne.n	8004112 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80040f8:	9300      	str	r3, [sp, #0]
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2200      	movs	r2, #0
 80040fe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f000 f817 	bl	8004136 <UART_WaitOnFlagUntilTimeout>
 8004108:	4603      	mov	r3, r0
 800410a:	2b00      	cmp	r3, #0
 800410c:	d001      	beq.n	8004112 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800410e:	2303      	movs	r3, #3
 8004110:	e00d      	b.n	800412e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2220      	movs	r2, #32
 8004116:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2220      	movs	r2, #32
 800411c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2200      	movs	r2, #0
 8004122:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2200      	movs	r2, #0
 8004128:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800412c:	2300      	movs	r3, #0
}
 800412e:	4618      	mov	r0, r3
 8004130:	3710      	adds	r7, #16
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}

08004136 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004136:	b580      	push	{r7, lr}
 8004138:	b09c      	sub	sp, #112	; 0x70
 800413a:	af00      	add	r7, sp, #0
 800413c:	60f8      	str	r0, [r7, #12]
 800413e:	60b9      	str	r1, [r7, #8]
 8004140:	603b      	str	r3, [r7, #0]
 8004142:	4613      	mov	r3, r2
 8004144:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004146:	e0a5      	b.n	8004294 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004148:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800414a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800414e:	f000 80a1 	beq.w	8004294 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004152:	f7fc ff21 	bl	8000f98 <HAL_GetTick>
 8004156:	4602      	mov	r2, r0
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	1ad3      	subs	r3, r2, r3
 800415c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800415e:	429a      	cmp	r2, r3
 8004160:	d302      	bcc.n	8004168 <UART_WaitOnFlagUntilTimeout+0x32>
 8004162:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004164:	2b00      	cmp	r3, #0
 8004166:	d13e      	bne.n	80041e6 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800416e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004170:	e853 3f00 	ldrex	r3, [r3]
 8004174:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004176:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004178:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800417c:	667b      	str	r3, [r7, #100]	; 0x64
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	461a      	mov	r2, r3
 8004184:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004186:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004188:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800418a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800418c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800418e:	e841 2300 	strex	r3, r2, [r1]
 8004192:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004194:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004196:	2b00      	cmp	r3, #0
 8004198:	d1e6      	bne.n	8004168 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	3308      	adds	r3, #8
 80041a0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041a4:	e853 3f00 	ldrex	r3, [r3]
 80041a8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80041aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041ac:	f023 0301 	bic.w	r3, r3, #1
 80041b0:	663b      	str	r3, [r7, #96]	; 0x60
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	3308      	adds	r3, #8
 80041b8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80041ba:	64ba      	str	r2, [r7, #72]	; 0x48
 80041bc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041be:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80041c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80041c2:	e841 2300 	strex	r3, r2, [r1]
 80041c6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80041c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d1e5      	bne.n	800419a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2220      	movs	r2, #32
 80041d2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2220      	movs	r2, #32
 80041d8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2200      	movs	r2, #0
 80041de:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80041e2:	2303      	movs	r3, #3
 80041e4:	e067      	b.n	80042b6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f003 0304 	and.w	r3, r3, #4
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d04f      	beq.n	8004294 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	69db      	ldr	r3, [r3, #28]
 80041fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004202:	d147      	bne.n	8004294 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800420c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004216:	e853 3f00 	ldrex	r3, [r3]
 800421a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800421c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800421e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004222:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	461a      	mov	r2, r3
 800422a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800422c:	637b      	str	r3, [r7, #52]	; 0x34
 800422e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004230:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004232:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004234:	e841 2300 	strex	r3, r2, [r1]
 8004238:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800423a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800423c:	2b00      	cmp	r3, #0
 800423e:	d1e6      	bne.n	800420e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	3308      	adds	r3, #8
 8004246:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	e853 3f00 	ldrex	r3, [r3]
 800424e:	613b      	str	r3, [r7, #16]
   return(result);
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	f023 0301 	bic.w	r3, r3, #1
 8004256:	66bb      	str	r3, [r7, #104]	; 0x68
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	3308      	adds	r3, #8
 800425e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004260:	623a      	str	r2, [r7, #32]
 8004262:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004264:	69f9      	ldr	r1, [r7, #28]
 8004266:	6a3a      	ldr	r2, [r7, #32]
 8004268:	e841 2300 	strex	r3, r2, [r1]
 800426c:	61bb      	str	r3, [r7, #24]
   return(result);
 800426e:	69bb      	ldr	r3, [r7, #24]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d1e5      	bne.n	8004240 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2220      	movs	r2, #32
 8004278:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2220      	movs	r2, #32
 800427e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2220      	movs	r2, #32
 8004284:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2200      	movs	r2, #0
 800428c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004290:	2303      	movs	r3, #3
 8004292:	e010      	b.n	80042b6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	69da      	ldr	r2, [r3, #28]
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	4013      	ands	r3, r2
 800429e:	68ba      	ldr	r2, [r7, #8]
 80042a0:	429a      	cmp	r2, r3
 80042a2:	bf0c      	ite	eq
 80042a4:	2301      	moveq	r3, #1
 80042a6:	2300      	movne	r3, #0
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	461a      	mov	r2, r3
 80042ac:	79fb      	ldrb	r3, [r7, #7]
 80042ae:	429a      	cmp	r2, r3
 80042b0:	f43f af4a 	beq.w	8004148 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80042b4:	2300      	movs	r3, #0
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	3770      	adds	r7, #112	; 0x70
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}

080042be <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80042be:	b480      	push	{r7}
 80042c0:	b095      	sub	sp, #84	; 0x54
 80042c2:	af00      	add	r7, sp, #0
 80042c4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042ce:	e853 3f00 	ldrex	r3, [r3]
 80042d2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80042d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042d6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80042da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	461a      	mov	r2, r3
 80042e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042e4:	643b      	str	r3, [r7, #64]	; 0x40
 80042e6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042e8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80042ea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80042ec:	e841 2300 	strex	r3, r2, [r1]
 80042f0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80042f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d1e6      	bne.n	80042c6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	3308      	adds	r3, #8
 80042fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004300:	6a3b      	ldr	r3, [r7, #32]
 8004302:	e853 3f00 	ldrex	r3, [r3]
 8004306:	61fb      	str	r3, [r7, #28]
   return(result);
 8004308:	69fb      	ldr	r3, [r7, #28]
 800430a:	f023 0301 	bic.w	r3, r3, #1
 800430e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	3308      	adds	r3, #8
 8004316:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004318:	62fa      	str	r2, [r7, #44]	; 0x2c
 800431a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800431c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800431e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004320:	e841 2300 	strex	r3, r2, [r1]
 8004324:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004328:	2b00      	cmp	r3, #0
 800432a:	d1e5      	bne.n	80042f8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004330:	2b01      	cmp	r3, #1
 8004332:	d118      	bne.n	8004366 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	e853 3f00 	ldrex	r3, [r3]
 8004340:	60bb      	str	r3, [r7, #8]
   return(result);
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	f023 0310 	bic.w	r3, r3, #16
 8004348:	647b      	str	r3, [r7, #68]	; 0x44
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	461a      	mov	r2, r3
 8004350:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004352:	61bb      	str	r3, [r7, #24]
 8004354:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004356:	6979      	ldr	r1, [r7, #20]
 8004358:	69ba      	ldr	r2, [r7, #24]
 800435a:	e841 2300 	strex	r3, r2, [r1]
 800435e:	613b      	str	r3, [r7, #16]
   return(result);
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d1e6      	bne.n	8004334 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2220      	movs	r2, #32
 800436a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2200      	movs	r2, #0
 8004370:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2200      	movs	r2, #0
 8004376:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004378:	bf00      	nop
 800437a:	3754      	adds	r7, #84	; 0x54
 800437c:	46bd      	mov	sp, r7
 800437e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004382:	4770      	bx	lr

08004384 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b084      	sub	sp, #16
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004390:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2200      	movs	r2, #0
 8004396:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2200      	movs	r2, #0
 800439e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80043a2:	68f8      	ldr	r0, [r7, #12]
 80043a4:	f7ff fb0e 	bl	80039c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80043a8:	bf00      	nop
 80043aa:	3710      	adds	r7, #16
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}

080043b0 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b08f      	sub	sp, #60	; 0x3c
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043bc:	2b21      	cmp	r3, #33	; 0x21
 80043be:	d14d      	bne.n	800445c <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80043c6:	b29b      	uxth	r3, r3
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d132      	bne.n	8004432 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043d2:	6a3b      	ldr	r3, [r7, #32]
 80043d4:	e853 3f00 	ldrex	r3, [r3]
 80043d8:	61fb      	str	r3, [r7, #28]
   return(result);
 80043da:	69fb      	ldr	r3, [r7, #28]
 80043dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043e0:	637b      	str	r3, [r7, #52]	; 0x34
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	461a      	mov	r2, r3
 80043e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043ec:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80043f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80043f2:	e841 2300 	strex	r3, r2, [r1]
 80043f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80043f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d1e6      	bne.n	80043cc <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	e853 3f00 	ldrex	r3, [r3]
 800440a:	60bb      	str	r3, [r7, #8]
   return(result);
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004412:	633b      	str	r3, [r7, #48]	; 0x30
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	461a      	mov	r2, r3
 800441a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800441c:	61bb      	str	r3, [r7, #24]
 800441e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004420:	6979      	ldr	r1, [r7, #20]
 8004422:	69ba      	ldr	r2, [r7, #24]
 8004424:	e841 2300 	strex	r3, r2, [r1]
 8004428:	613b      	str	r3, [r7, #16]
   return(result);
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d1e6      	bne.n	80043fe <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8004430:	e014      	b.n	800445c <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004436:	781a      	ldrb	r2, [r3, #0]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	b292      	uxth	r2, r2
 800443e:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004444:	1c5a      	adds	r2, r3, #1
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004450:	b29b      	uxth	r3, r3
 8004452:	3b01      	subs	r3, #1
 8004454:	b29a      	uxth	r2, r3
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800445c:	bf00      	nop
 800445e:	373c      	adds	r7, #60	; 0x3c
 8004460:	46bd      	mov	sp, r7
 8004462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004466:	4770      	bx	lr

08004468 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004468:	b480      	push	{r7}
 800446a:	b091      	sub	sp, #68	; 0x44
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004474:	2b21      	cmp	r3, #33	; 0x21
 8004476:	d151      	bne.n	800451c <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800447e:	b29b      	uxth	r3, r3
 8004480:	2b00      	cmp	r3, #0
 8004482:	d132      	bne.n	80044ea <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800448a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800448c:	e853 3f00 	ldrex	r3, [r3]
 8004490:	623b      	str	r3, [r7, #32]
   return(result);
 8004492:	6a3b      	ldr	r3, [r7, #32]
 8004494:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004498:	63bb      	str	r3, [r7, #56]	; 0x38
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	461a      	mov	r2, r3
 80044a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044a2:	633b      	str	r3, [r7, #48]	; 0x30
 80044a4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80044a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044aa:	e841 2300 	strex	r3, r2, [r1]
 80044ae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80044b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d1e6      	bne.n	8004484 <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	e853 3f00 	ldrex	r3, [r3]
 80044c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044ca:	637b      	str	r3, [r7, #52]	; 0x34
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	461a      	mov	r2, r3
 80044d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044d4:	61fb      	str	r3, [r7, #28]
 80044d6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044d8:	69b9      	ldr	r1, [r7, #24]
 80044da:	69fa      	ldr	r2, [r7, #28]
 80044dc:	e841 2300 	strex	r3, r2, [r1]
 80044e0:	617b      	str	r3, [r7, #20]
   return(result);
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d1e6      	bne.n	80044b6 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80044e8:	e018      	b.n	800451c <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044ee:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80044f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044f2:	881a      	ldrh	r2, [r3, #0]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80044fc:	b292      	uxth	r2, r2
 80044fe:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004504:	1c9a      	adds	r2, r3, #2
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004510:	b29b      	uxth	r3, r3
 8004512:	3b01      	subs	r3, #1
 8004514:	b29a      	uxth	r2, r3
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800451c:	bf00      	nop
 800451e:	3744      	adds	r7, #68	; 0x44
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr

08004528 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b088      	sub	sp, #32
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	e853 3f00 	ldrex	r3, [r3]
 800453c:	60bb      	str	r3, [r7, #8]
   return(result);
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004544:	61fb      	str	r3, [r7, #28]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	461a      	mov	r2, r3
 800454c:	69fb      	ldr	r3, [r7, #28]
 800454e:	61bb      	str	r3, [r7, #24]
 8004550:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004552:	6979      	ldr	r1, [r7, #20]
 8004554:	69ba      	ldr	r2, [r7, #24]
 8004556:	e841 2300 	strex	r3, r2, [r1]
 800455a:	613b      	str	r3, [r7, #16]
   return(result);
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d1e6      	bne.n	8004530 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2220      	movs	r2, #32
 8004566:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2200      	movs	r2, #0
 800456c:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f7fc f83a 	bl	80005e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004574:	bf00      	nop
 8004576:	3720      	adds	r7, #32
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}

0800457c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800457c:	b480      	push	{r7}
 800457e:	b083      	sub	sp, #12
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004584:	bf00      	nop
 8004586:	370c      	adds	r7, #12
 8004588:	46bd      	mov	sp, r7
 800458a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458e:	4770      	bx	lr

08004590 <__errno>:
 8004590:	4b01      	ldr	r3, [pc, #4]	; (8004598 <__errno+0x8>)
 8004592:	6818      	ldr	r0, [r3, #0]
 8004594:	4770      	bx	lr
 8004596:	bf00      	nop
 8004598:	2000000c 	.word	0x2000000c

0800459c <__libc_init_array>:
 800459c:	b570      	push	{r4, r5, r6, lr}
 800459e:	4d0d      	ldr	r5, [pc, #52]	; (80045d4 <__libc_init_array+0x38>)
 80045a0:	4c0d      	ldr	r4, [pc, #52]	; (80045d8 <__libc_init_array+0x3c>)
 80045a2:	1b64      	subs	r4, r4, r5
 80045a4:	10a4      	asrs	r4, r4, #2
 80045a6:	2600      	movs	r6, #0
 80045a8:	42a6      	cmp	r6, r4
 80045aa:	d109      	bne.n	80045c0 <__libc_init_array+0x24>
 80045ac:	4d0b      	ldr	r5, [pc, #44]	; (80045dc <__libc_init_array+0x40>)
 80045ae:	4c0c      	ldr	r4, [pc, #48]	; (80045e0 <__libc_init_array+0x44>)
 80045b0:	f001 fa20 	bl	80059f4 <_init>
 80045b4:	1b64      	subs	r4, r4, r5
 80045b6:	10a4      	asrs	r4, r4, #2
 80045b8:	2600      	movs	r6, #0
 80045ba:	42a6      	cmp	r6, r4
 80045bc:	d105      	bne.n	80045ca <__libc_init_array+0x2e>
 80045be:	bd70      	pop	{r4, r5, r6, pc}
 80045c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80045c4:	4798      	blx	r3
 80045c6:	3601      	adds	r6, #1
 80045c8:	e7ee      	b.n	80045a8 <__libc_init_array+0xc>
 80045ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80045ce:	4798      	blx	r3
 80045d0:	3601      	adds	r6, #1
 80045d2:	e7f2      	b.n	80045ba <__libc_init_array+0x1e>
 80045d4:	08005c90 	.word	0x08005c90
 80045d8:	08005c90 	.word	0x08005c90
 80045dc:	08005c90 	.word	0x08005c90
 80045e0:	08005c94 	.word	0x08005c94

080045e4 <memset>:
 80045e4:	4402      	add	r2, r0
 80045e6:	4603      	mov	r3, r0
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d100      	bne.n	80045ee <memset+0xa>
 80045ec:	4770      	bx	lr
 80045ee:	f803 1b01 	strb.w	r1, [r3], #1
 80045f2:	e7f9      	b.n	80045e8 <memset+0x4>

080045f4 <_puts_r>:
 80045f4:	b570      	push	{r4, r5, r6, lr}
 80045f6:	460e      	mov	r6, r1
 80045f8:	4605      	mov	r5, r0
 80045fa:	b118      	cbz	r0, 8004604 <_puts_r+0x10>
 80045fc:	6983      	ldr	r3, [r0, #24]
 80045fe:	b90b      	cbnz	r3, 8004604 <_puts_r+0x10>
 8004600:	f000 fadc 	bl	8004bbc <__sinit>
 8004604:	69ab      	ldr	r3, [r5, #24]
 8004606:	68ac      	ldr	r4, [r5, #8]
 8004608:	b913      	cbnz	r3, 8004610 <_puts_r+0x1c>
 800460a:	4628      	mov	r0, r5
 800460c:	f000 fad6 	bl	8004bbc <__sinit>
 8004610:	4b2c      	ldr	r3, [pc, #176]	; (80046c4 <_puts_r+0xd0>)
 8004612:	429c      	cmp	r4, r3
 8004614:	d120      	bne.n	8004658 <_puts_r+0x64>
 8004616:	686c      	ldr	r4, [r5, #4]
 8004618:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800461a:	07db      	lsls	r3, r3, #31
 800461c:	d405      	bmi.n	800462a <_puts_r+0x36>
 800461e:	89a3      	ldrh	r3, [r4, #12]
 8004620:	0598      	lsls	r0, r3, #22
 8004622:	d402      	bmi.n	800462a <_puts_r+0x36>
 8004624:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004626:	f000 fb67 	bl	8004cf8 <__retarget_lock_acquire_recursive>
 800462a:	89a3      	ldrh	r3, [r4, #12]
 800462c:	0719      	lsls	r1, r3, #28
 800462e:	d51d      	bpl.n	800466c <_puts_r+0x78>
 8004630:	6923      	ldr	r3, [r4, #16]
 8004632:	b1db      	cbz	r3, 800466c <_puts_r+0x78>
 8004634:	3e01      	subs	r6, #1
 8004636:	68a3      	ldr	r3, [r4, #8]
 8004638:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800463c:	3b01      	subs	r3, #1
 800463e:	60a3      	str	r3, [r4, #8]
 8004640:	bb39      	cbnz	r1, 8004692 <_puts_r+0x9e>
 8004642:	2b00      	cmp	r3, #0
 8004644:	da38      	bge.n	80046b8 <_puts_r+0xc4>
 8004646:	4622      	mov	r2, r4
 8004648:	210a      	movs	r1, #10
 800464a:	4628      	mov	r0, r5
 800464c:	f000 f8ba 	bl	80047c4 <__swbuf_r>
 8004650:	3001      	adds	r0, #1
 8004652:	d011      	beq.n	8004678 <_puts_r+0x84>
 8004654:	250a      	movs	r5, #10
 8004656:	e011      	b.n	800467c <_puts_r+0x88>
 8004658:	4b1b      	ldr	r3, [pc, #108]	; (80046c8 <_puts_r+0xd4>)
 800465a:	429c      	cmp	r4, r3
 800465c:	d101      	bne.n	8004662 <_puts_r+0x6e>
 800465e:	68ac      	ldr	r4, [r5, #8]
 8004660:	e7da      	b.n	8004618 <_puts_r+0x24>
 8004662:	4b1a      	ldr	r3, [pc, #104]	; (80046cc <_puts_r+0xd8>)
 8004664:	429c      	cmp	r4, r3
 8004666:	bf08      	it	eq
 8004668:	68ec      	ldreq	r4, [r5, #12]
 800466a:	e7d5      	b.n	8004618 <_puts_r+0x24>
 800466c:	4621      	mov	r1, r4
 800466e:	4628      	mov	r0, r5
 8004670:	f000 f90c 	bl	800488c <__swsetup_r>
 8004674:	2800      	cmp	r0, #0
 8004676:	d0dd      	beq.n	8004634 <_puts_r+0x40>
 8004678:	f04f 35ff 	mov.w	r5, #4294967295
 800467c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800467e:	07da      	lsls	r2, r3, #31
 8004680:	d405      	bmi.n	800468e <_puts_r+0x9a>
 8004682:	89a3      	ldrh	r3, [r4, #12]
 8004684:	059b      	lsls	r3, r3, #22
 8004686:	d402      	bmi.n	800468e <_puts_r+0x9a>
 8004688:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800468a:	f000 fb36 	bl	8004cfa <__retarget_lock_release_recursive>
 800468e:	4628      	mov	r0, r5
 8004690:	bd70      	pop	{r4, r5, r6, pc}
 8004692:	2b00      	cmp	r3, #0
 8004694:	da04      	bge.n	80046a0 <_puts_r+0xac>
 8004696:	69a2      	ldr	r2, [r4, #24]
 8004698:	429a      	cmp	r2, r3
 800469a:	dc06      	bgt.n	80046aa <_puts_r+0xb6>
 800469c:	290a      	cmp	r1, #10
 800469e:	d004      	beq.n	80046aa <_puts_r+0xb6>
 80046a0:	6823      	ldr	r3, [r4, #0]
 80046a2:	1c5a      	adds	r2, r3, #1
 80046a4:	6022      	str	r2, [r4, #0]
 80046a6:	7019      	strb	r1, [r3, #0]
 80046a8:	e7c5      	b.n	8004636 <_puts_r+0x42>
 80046aa:	4622      	mov	r2, r4
 80046ac:	4628      	mov	r0, r5
 80046ae:	f000 f889 	bl	80047c4 <__swbuf_r>
 80046b2:	3001      	adds	r0, #1
 80046b4:	d1bf      	bne.n	8004636 <_puts_r+0x42>
 80046b6:	e7df      	b.n	8004678 <_puts_r+0x84>
 80046b8:	6823      	ldr	r3, [r4, #0]
 80046ba:	250a      	movs	r5, #10
 80046bc:	1c5a      	adds	r2, r3, #1
 80046be:	6022      	str	r2, [r4, #0]
 80046c0:	701d      	strb	r5, [r3, #0]
 80046c2:	e7db      	b.n	800467c <_puts_r+0x88>
 80046c4:	08005b28 	.word	0x08005b28
 80046c8:	08005b48 	.word	0x08005b48
 80046cc:	08005b08 	.word	0x08005b08

080046d0 <puts>:
 80046d0:	4b02      	ldr	r3, [pc, #8]	; (80046dc <puts+0xc>)
 80046d2:	4601      	mov	r1, r0
 80046d4:	6818      	ldr	r0, [r3, #0]
 80046d6:	f7ff bf8d 	b.w	80045f4 <_puts_r>
 80046da:	bf00      	nop
 80046dc:	2000000c 	.word	0x2000000c

080046e0 <siscanf>:
 80046e0:	b40e      	push	{r1, r2, r3}
 80046e2:	b510      	push	{r4, lr}
 80046e4:	b09f      	sub	sp, #124	; 0x7c
 80046e6:	ac21      	add	r4, sp, #132	; 0x84
 80046e8:	f44f 7101 	mov.w	r1, #516	; 0x204
 80046ec:	f854 2b04 	ldr.w	r2, [r4], #4
 80046f0:	9201      	str	r2, [sp, #4]
 80046f2:	f8ad 101c 	strh.w	r1, [sp, #28]
 80046f6:	9004      	str	r0, [sp, #16]
 80046f8:	9008      	str	r0, [sp, #32]
 80046fa:	f7fb fd73 	bl	80001e4 <strlen>
 80046fe:	4b0c      	ldr	r3, [pc, #48]	; (8004730 <siscanf+0x50>)
 8004700:	9005      	str	r0, [sp, #20]
 8004702:	9009      	str	r0, [sp, #36]	; 0x24
 8004704:	930d      	str	r3, [sp, #52]	; 0x34
 8004706:	480b      	ldr	r0, [pc, #44]	; (8004734 <siscanf+0x54>)
 8004708:	9a01      	ldr	r2, [sp, #4]
 800470a:	6800      	ldr	r0, [r0, #0]
 800470c:	9403      	str	r4, [sp, #12]
 800470e:	2300      	movs	r3, #0
 8004710:	9311      	str	r3, [sp, #68]	; 0x44
 8004712:	9316      	str	r3, [sp, #88]	; 0x58
 8004714:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004718:	f8ad 301e 	strh.w	r3, [sp, #30]
 800471c:	a904      	add	r1, sp, #16
 800471e:	4623      	mov	r3, r4
 8004720:	f000 fc9e 	bl	8005060 <__ssvfiscanf_r>
 8004724:	b01f      	add	sp, #124	; 0x7c
 8004726:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800472a:	b003      	add	sp, #12
 800472c:	4770      	bx	lr
 800472e:	bf00      	nop
 8004730:	0800475b 	.word	0x0800475b
 8004734:	2000000c 	.word	0x2000000c

08004738 <__sread>:
 8004738:	b510      	push	{r4, lr}
 800473a:	460c      	mov	r4, r1
 800473c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004740:	f000 ff58 	bl	80055f4 <_read_r>
 8004744:	2800      	cmp	r0, #0
 8004746:	bfab      	itete	ge
 8004748:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800474a:	89a3      	ldrhlt	r3, [r4, #12]
 800474c:	181b      	addge	r3, r3, r0
 800474e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004752:	bfac      	ite	ge
 8004754:	6563      	strge	r3, [r4, #84]	; 0x54
 8004756:	81a3      	strhlt	r3, [r4, #12]
 8004758:	bd10      	pop	{r4, pc}

0800475a <__seofread>:
 800475a:	2000      	movs	r0, #0
 800475c:	4770      	bx	lr

0800475e <__swrite>:
 800475e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004762:	461f      	mov	r7, r3
 8004764:	898b      	ldrh	r3, [r1, #12]
 8004766:	05db      	lsls	r3, r3, #23
 8004768:	4605      	mov	r5, r0
 800476a:	460c      	mov	r4, r1
 800476c:	4616      	mov	r6, r2
 800476e:	d505      	bpl.n	800477c <__swrite+0x1e>
 8004770:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004774:	2302      	movs	r3, #2
 8004776:	2200      	movs	r2, #0
 8004778:	f000 fac0 	bl	8004cfc <_lseek_r>
 800477c:	89a3      	ldrh	r3, [r4, #12]
 800477e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004782:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004786:	81a3      	strh	r3, [r4, #12]
 8004788:	4632      	mov	r2, r6
 800478a:	463b      	mov	r3, r7
 800478c:	4628      	mov	r0, r5
 800478e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004792:	f000 b869 	b.w	8004868 <_write_r>

08004796 <__sseek>:
 8004796:	b510      	push	{r4, lr}
 8004798:	460c      	mov	r4, r1
 800479a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800479e:	f000 faad 	bl	8004cfc <_lseek_r>
 80047a2:	1c43      	adds	r3, r0, #1
 80047a4:	89a3      	ldrh	r3, [r4, #12]
 80047a6:	bf15      	itete	ne
 80047a8:	6560      	strne	r0, [r4, #84]	; 0x54
 80047aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80047ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80047b2:	81a3      	strheq	r3, [r4, #12]
 80047b4:	bf18      	it	ne
 80047b6:	81a3      	strhne	r3, [r4, #12]
 80047b8:	bd10      	pop	{r4, pc}

080047ba <__sclose>:
 80047ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047be:	f000 b8d3 	b.w	8004968 <_close_r>
	...

080047c4 <__swbuf_r>:
 80047c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047c6:	460e      	mov	r6, r1
 80047c8:	4614      	mov	r4, r2
 80047ca:	4605      	mov	r5, r0
 80047cc:	b118      	cbz	r0, 80047d6 <__swbuf_r+0x12>
 80047ce:	6983      	ldr	r3, [r0, #24]
 80047d0:	b90b      	cbnz	r3, 80047d6 <__swbuf_r+0x12>
 80047d2:	f000 f9f3 	bl	8004bbc <__sinit>
 80047d6:	4b21      	ldr	r3, [pc, #132]	; (800485c <__swbuf_r+0x98>)
 80047d8:	429c      	cmp	r4, r3
 80047da:	d12b      	bne.n	8004834 <__swbuf_r+0x70>
 80047dc:	686c      	ldr	r4, [r5, #4]
 80047de:	69a3      	ldr	r3, [r4, #24]
 80047e0:	60a3      	str	r3, [r4, #8]
 80047e2:	89a3      	ldrh	r3, [r4, #12]
 80047e4:	071a      	lsls	r2, r3, #28
 80047e6:	d52f      	bpl.n	8004848 <__swbuf_r+0x84>
 80047e8:	6923      	ldr	r3, [r4, #16]
 80047ea:	b36b      	cbz	r3, 8004848 <__swbuf_r+0x84>
 80047ec:	6923      	ldr	r3, [r4, #16]
 80047ee:	6820      	ldr	r0, [r4, #0]
 80047f0:	1ac0      	subs	r0, r0, r3
 80047f2:	6963      	ldr	r3, [r4, #20]
 80047f4:	b2f6      	uxtb	r6, r6
 80047f6:	4283      	cmp	r3, r0
 80047f8:	4637      	mov	r7, r6
 80047fa:	dc04      	bgt.n	8004806 <__swbuf_r+0x42>
 80047fc:	4621      	mov	r1, r4
 80047fe:	4628      	mov	r0, r5
 8004800:	f000 f948 	bl	8004a94 <_fflush_r>
 8004804:	bb30      	cbnz	r0, 8004854 <__swbuf_r+0x90>
 8004806:	68a3      	ldr	r3, [r4, #8]
 8004808:	3b01      	subs	r3, #1
 800480a:	60a3      	str	r3, [r4, #8]
 800480c:	6823      	ldr	r3, [r4, #0]
 800480e:	1c5a      	adds	r2, r3, #1
 8004810:	6022      	str	r2, [r4, #0]
 8004812:	701e      	strb	r6, [r3, #0]
 8004814:	6963      	ldr	r3, [r4, #20]
 8004816:	3001      	adds	r0, #1
 8004818:	4283      	cmp	r3, r0
 800481a:	d004      	beq.n	8004826 <__swbuf_r+0x62>
 800481c:	89a3      	ldrh	r3, [r4, #12]
 800481e:	07db      	lsls	r3, r3, #31
 8004820:	d506      	bpl.n	8004830 <__swbuf_r+0x6c>
 8004822:	2e0a      	cmp	r6, #10
 8004824:	d104      	bne.n	8004830 <__swbuf_r+0x6c>
 8004826:	4621      	mov	r1, r4
 8004828:	4628      	mov	r0, r5
 800482a:	f000 f933 	bl	8004a94 <_fflush_r>
 800482e:	b988      	cbnz	r0, 8004854 <__swbuf_r+0x90>
 8004830:	4638      	mov	r0, r7
 8004832:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004834:	4b0a      	ldr	r3, [pc, #40]	; (8004860 <__swbuf_r+0x9c>)
 8004836:	429c      	cmp	r4, r3
 8004838:	d101      	bne.n	800483e <__swbuf_r+0x7a>
 800483a:	68ac      	ldr	r4, [r5, #8]
 800483c:	e7cf      	b.n	80047de <__swbuf_r+0x1a>
 800483e:	4b09      	ldr	r3, [pc, #36]	; (8004864 <__swbuf_r+0xa0>)
 8004840:	429c      	cmp	r4, r3
 8004842:	bf08      	it	eq
 8004844:	68ec      	ldreq	r4, [r5, #12]
 8004846:	e7ca      	b.n	80047de <__swbuf_r+0x1a>
 8004848:	4621      	mov	r1, r4
 800484a:	4628      	mov	r0, r5
 800484c:	f000 f81e 	bl	800488c <__swsetup_r>
 8004850:	2800      	cmp	r0, #0
 8004852:	d0cb      	beq.n	80047ec <__swbuf_r+0x28>
 8004854:	f04f 37ff 	mov.w	r7, #4294967295
 8004858:	e7ea      	b.n	8004830 <__swbuf_r+0x6c>
 800485a:	bf00      	nop
 800485c:	08005b28 	.word	0x08005b28
 8004860:	08005b48 	.word	0x08005b48
 8004864:	08005b08 	.word	0x08005b08

08004868 <_write_r>:
 8004868:	b538      	push	{r3, r4, r5, lr}
 800486a:	4d07      	ldr	r5, [pc, #28]	; (8004888 <_write_r+0x20>)
 800486c:	4604      	mov	r4, r0
 800486e:	4608      	mov	r0, r1
 8004870:	4611      	mov	r1, r2
 8004872:	2200      	movs	r2, #0
 8004874:	602a      	str	r2, [r5, #0]
 8004876:	461a      	mov	r2, r3
 8004878:	f7fb ffba 	bl	80007f0 <_write>
 800487c:	1c43      	adds	r3, r0, #1
 800487e:	d102      	bne.n	8004886 <_write_r+0x1e>
 8004880:	682b      	ldr	r3, [r5, #0]
 8004882:	b103      	cbz	r3, 8004886 <_write_r+0x1e>
 8004884:	6023      	str	r3, [r4, #0]
 8004886:	bd38      	pop	{r3, r4, r5, pc}
 8004888:	200002c0 	.word	0x200002c0

0800488c <__swsetup_r>:
 800488c:	4b32      	ldr	r3, [pc, #200]	; (8004958 <__swsetup_r+0xcc>)
 800488e:	b570      	push	{r4, r5, r6, lr}
 8004890:	681d      	ldr	r5, [r3, #0]
 8004892:	4606      	mov	r6, r0
 8004894:	460c      	mov	r4, r1
 8004896:	b125      	cbz	r5, 80048a2 <__swsetup_r+0x16>
 8004898:	69ab      	ldr	r3, [r5, #24]
 800489a:	b913      	cbnz	r3, 80048a2 <__swsetup_r+0x16>
 800489c:	4628      	mov	r0, r5
 800489e:	f000 f98d 	bl	8004bbc <__sinit>
 80048a2:	4b2e      	ldr	r3, [pc, #184]	; (800495c <__swsetup_r+0xd0>)
 80048a4:	429c      	cmp	r4, r3
 80048a6:	d10f      	bne.n	80048c8 <__swsetup_r+0x3c>
 80048a8:	686c      	ldr	r4, [r5, #4]
 80048aa:	89a3      	ldrh	r3, [r4, #12]
 80048ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80048b0:	0719      	lsls	r1, r3, #28
 80048b2:	d42c      	bmi.n	800490e <__swsetup_r+0x82>
 80048b4:	06dd      	lsls	r5, r3, #27
 80048b6:	d411      	bmi.n	80048dc <__swsetup_r+0x50>
 80048b8:	2309      	movs	r3, #9
 80048ba:	6033      	str	r3, [r6, #0]
 80048bc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80048c0:	81a3      	strh	r3, [r4, #12]
 80048c2:	f04f 30ff 	mov.w	r0, #4294967295
 80048c6:	e03e      	b.n	8004946 <__swsetup_r+0xba>
 80048c8:	4b25      	ldr	r3, [pc, #148]	; (8004960 <__swsetup_r+0xd4>)
 80048ca:	429c      	cmp	r4, r3
 80048cc:	d101      	bne.n	80048d2 <__swsetup_r+0x46>
 80048ce:	68ac      	ldr	r4, [r5, #8]
 80048d0:	e7eb      	b.n	80048aa <__swsetup_r+0x1e>
 80048d2:	4b24      	ldr	r3, [pc, #144]	; (8004964 <__swsetup_r+0xd8>)
 80048d4:	429c      	cmp	r4, r3
 80048d6:	bf08      	it	eq
 80048d8:	68ec      	ldreq	r4, [r5, #12]
 80048da:	e7e6      	b.n	80048aa <__swsetup_r+0x1e>
 80048dc:	0758      	lsls	r0, r3, #29
 80048de:	d512      	bpl.n	8004906 <__swsetup_r+0x7a>
 80048e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80048e2:	b141      	cbz	r1, 80048f6 <__swsetup_r+0x6a>
 80048e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80048e8:	4299      	cmp	r1, r3
 80048ea:	d002      	beq.n	80048f2 <__swsetup_r+0x66>
 80048ec:	4630      	mov	r0, r6
 80048ee:	f000 fa7d 	bl	8004dec <_free_r>
 80048f2:	2300      	movs	r3, #0
 80048f4:	6363      	str	r3, [r4, #52]	; 0x34
 80048f6:	89a3      	ldrh	r3, [r4, #12]
 80048f8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80048fc:	81a3      	strh	r3, [r4, #12]
 80048fe:	2300      	movs	r3, #0
 8004900:	6063      	str	r3, [r4, #4]
 8004902:	6923      	ldr	r3, [r4, #16]
 8004904:	6023      	str	r3, [r4, #0]
 8004906:	89a3      	ldrh	r3, [r4, #12]
 8004908:	f043 0308 	orr.w	r3, r3, #8
 800490c:	81a3      	strh	r3, [r4, #12]
 800490e:	6923      	ldr	r3, [r4, #16]
 8004910:	b94b      	cbnz	r3, 8004926 <__swsetup_r+0x9a>
 8004912:	89a3      	ldrh	r3, [r4, #12]
 8004914:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004918:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800491c:	d003      	beq.n	8004926 <__swsetup_r+0x9a>
 800491e:	4621      	mov	r1, r4
 8004920:	4630      	mov	r0, r6
 8004922:	f000 fa23 	bl	8004d6c <__smakebuf_r>
 8004926:	89a0      	ldrh	r0, [r4, #12]
 8004928:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800492c:	f010 0301 	ands.w	r3, r0, #1
 8004930:	d00a      	beq.n	8004948 <__swsetup_r+0xbc>
 8004932:	2300      	movs	r3, #0
 8004934:	60a3      	str	r3, [r4, #8]
 8004936:	6963      	ldr	r3, [r4, #20]
 8004938:	425b      	negs	r3, r3
 800493a:	61a3      	str	r3, [r4, #24]
 800493c:	6923      	ldr	r3, [r4, #16]
 800493e:	b943      	cbnz	r3, 8004952 <__swsetup_r+0xc6>
 8004940:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004944:	d1ba      	bne.n	80048bc <__swsetup_r+0x30>
 8004946:	bd70      	pop	{r4, r5, r6, pc}
 8004948:	0781      	lsls	r1, r0, #30
 800494a:	bf58      	it	pl
 800494c:	6963      	ldrpl	r3, [r4, #20]
 800494e:	60a3      	str	r3, [r4, #8]
 8004950:	e7f4      	b.n	800493c <__swsetup_r+0xb0>
 8004952:	2000      	movs	r0, #0
 8004954:	e7f7      	b.n	8004946 <__swsetup_r+0xba>
 8004956:	bf00      	nop
 8004958:	2000000c 	.word	0x2000000c
 800495c:	08005b28 	.word	0x08005b28
 8004960:	08005b48 	.word	0x08005b48
 8004964:	08005b08 	.word	0x08005b08

08004968 <_close_r>:
 8004968:	b538      	push	{r3, r4, r5, lr}
 800496a:	4d06      	ldr	r5, [pc, #24]	; (8004984 <_close_r+0x1c>)
 800496c:	2300      	movs	r3, #0
 800496e:	4604      	mov	r4, r0
 8004970:	4608      	mov	r0, r1
 8004972:	602b      	str	r3, [r5, #0]
 8004974:	f7fc f9f9 	bl	8000d6a <_close>
 8004978:	1c43      	adds	r3, r0, #1
 800497a:	d102      	bne.n	8004982 <_close_r+0x1a>
 800497c:	682b      	ldr	r3, [r5, #0]
 800497e:	b103      	cbz	r3, 8004982 <_close_r+0x1a>
 8004980:	6023      	str	r3, [r4, #0]
 8004982:	bd38      	pop	{r3, r4, r5, pc}
 8004984:	200002c0 	.word	0x200002c0

08004988 <__sflush_r>:
 8004988:	898a      	ldrh	r2, [r1, #12]
 800498a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800498e:	4605      	mov	r5, r0
 8004990:	0710      	lsls	r0, r2, #28
 8004992:	460c      	mov	r4, r1
 8004994:	d458      	bmi.n	8004a48 <__sflush_r+0xc0>
 8004996:	684b      	ldr	r3, [r1, #4]
 8004998:	2b00      	cmp	r3, #0
 800499a:	dc05      	bgt.n	80049a8 <__sflush_r+0x20>
 800499c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800499e:	2b00      	cmp	r3, #0
 80049a0:	dc02      	bgt.n	80049a8 <__sflush_r+0x20>
 80049a2:	2000      	movs	r0, #0
 80049a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80049a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80049aa:	2e00      	cmp	r6, #0
 80049ac:	d0f9      	beq.n	80049a2 <__sflush_r+0x1a>
 80049ae:	2300      	movs	r3, #0
 80049b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80049b4:	682f      	ldr	r7, [r5, #0]
 80049b6:	602b      	str	r3, [r5, #0]
 80049b8:	d032      	beq.n	8004a20 <__sflush_r+0x98>
 80049ba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80049bc:	89a3      	ldrh	r3, [r4, #12]
 80049be:	075a      	lsls	r2, r3, #29
 80049c0:	d505      	bpl.n	80049ce <__sflush_r+0x46>
 80049c2:	6863      	ldr	r3, [r4, #4]
 80049c4:	1ac0      	subs	r0, r0, r3
 80049c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80049c8:	b10b      	cbz	r3, 80049ce <__sflush_r+0x46>
 80049ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80049cc:	1ac0      	subs	r0, r0, r3
 80049ce:	2300      	movs	r3, #0
 80049d0:	4602      	mov	r2, r0
 80049d2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80049d4:	6a21      	ldr	r1, [r4, #32]
 80049d6:	4628      	mov	r0, r5
 80049d8:	47b0      	blx	r6
 80049da:	1c43      	adds	r3, r0, #1
 80049dc:	89a3      	ldrh	r3, [r4, #12]
 80049de:	d106      	bne.n	80049ee <__sflush_r+0x66>
 80049e0:	6829      	ldr	r1, [r5, #0]
 80049e2:	291d      	cmp	r1, #29
 80049e4:	d82c      	bhi.n	8004a40 <__sflush_r+0xb8>
 80049e6:	4a2a      	ldr	r2, [pc, #168]	; (8004a90 <__sflush_r+0x108>)
 80049e8:	40ca      	lsrs	r2, r1
 80049ea:	07d6      	lsls	r6, r2, #31
 80049ec:	d528      	bpl.n	8004a40 <__sflush_r+0xb8>
 80049ee:	2200      	movs	r2, #0
 80049f0:	6062      	str	r2, [r4, #4]
 80049f2:	04d9      	lsls	r1, r3, #19
 80049f4:	6922      	ldr	r2, [r4, #16]
 80049f6:	6022      	str	r2, [r4, #0]
 80049f8:	d504      	bpl.n	8004a04 <__sflush_r+0x7c>
 80049fa:	1c42      	adds	r2, r0, #1
 80049fc:	d101      	bne.n	8004a02 <__sflush_r+0x7a>
 80049fe:	682b      	ldr	r3, [r5, #0]
 8004a00:	b903      	cbnz	r3, 8004a04 <__sflush_r+0x7c>
 8004a02:	6560      	str	r0, [r4, #84]	; 0x54
 8004a04:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004a06:	602f      	str	r7, [r5, #0]
 8004a08:	2900      	cmp	r1, #0
 8004a0a:	d0ca      	beq.n	80049a2 <__sflush_r+0x1a>
 8004a0c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004a10:	4299      	cmp	r1, r3
 8004a12:	d002      	beq.n	8004a1a <__sflush_r+0x92>
 8004a14:	4628      	mov	r0, r5
 8004a16:	f000 f9e9 	bl	8004dec <_free_r>
 8004a1a:	2000      	movs	r0, #0
 8004a1c:	6360      	str	r0, [r4, #52]	; 0x34
 8004a1e:	e7c1      	b.n	80049a4 <__sflush_r+0x1c>
 8004a20:	6a21      	ldr	r1, [r4, #32]
 8004a22:	2301      	movs	r3, #1
 8004a24:	4628      	mov	r0, r5
 8004a26:	47b0      	blx	r6
 8004a28:	1c41      	adds	r1, r0, #1
 8004a2a:	d1c7      	bne.n	80049bc <__sflush_r+0x34>
 8004a2c:	682b      	ldr	r3, [r5, #0]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d0c4      	beq.n	80049bc <__sflush_r+0x34>
 8004a32:	2b1d      	cmp	r3, #29
 8004a34:	d001      	beq.n	8004a3a <__sflush_r+0xb2>
 8004a36:	2b16      	cmp	r3, #22
 8004a38:	d101      	bne.n	8004a3e <__sflush_r+0xb6>
 8004a3a:	602f      	str	r7, [r5, #0]
 8004a3c:	e7b1      	b.n	80049a2 <__sflush_r+0x1a>
 8004a3e:	89a3      	ldrh	r3, [r4, #12]
 8004a40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a44:	81a3      	strh	r3, [r4, #12]
 8004a46:	e7ad      	b.n	80049a4 <__sflush_r+0x1c>
 8004a48:	690f      	ldr	r7, [r1, #16]
 8004a4a:	2f00      	cmp	r7, #0
 8004a4c:	d0a9      	beq.n	80049a2 <__sflush_r+0x1a>
 8004a4e:	0793      	lsls	r3, r2, #30
 8004a50:	680e      	ldr	r6, [r1, #0]
 8004a52:	bf08      	it	eq
 8004a54:	694b      	ldreq	r3, [r1, #20]
 8004a56:	600f      	str	r7, [r1, #0]
 8004a58:	bf18      	it	ne
 8004a5a:	2300      	movne	r3, #0
 8004a5c:	eba6 0807 	sub.w	r8, r6, r7
 8004a60:	608b      	str	r3, [r1, #8]
 8004a62:	f1b8 0f00 	cmp.w	r8, #0
 8004a66:	dd9c      	ble.n	80049a2 <__sflush_r+0x1a>
 8004a68:	6a21      	ldr	r1, [r4, #32]
 8004a6a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004a6c:	4643      	mov	r3, r8
 8004a6e:	463a      	mov	r2, r7
 8004a70:	4628      	mov	r0, r5
 8004a72:	47b0      	blx	r6
 8004a74:	2800      	cmp	r0, #0
 8004a76:	dc06      	bgt.n	8004a86 <__sflush_r+0xfe>
 8004a78:	89a3      	ldrh	r3, [r4, #12]
 8004a7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a7e:	81a3      	strh	r3, [r4, #12]
 8004a80:	f04f 30ff 	mov.w	r0, #4294967295
 8004a84:	e78e      	b.n	80049a4 <__sflush_r+0x1c>
 8004a86:	4407      	add	r7, r0
 8004a88:	eba8 0800 	sub.w	r8, r8, r0
 8004a8c:	e7e9      	b.n	8004a62 <__sflush_r+0xda>
 8004a8e:	bf00      	nop
 8004a90:	20400001 	.word	0x20400001

08004a94 <_fflush_r>:
 8004a94:	b538      	push	{r3, r4, r5, lr}
 8004a96:	690b      	ldr	r3, [r1, #16]
 8004a98:	4605      	mov	r5, r0
 8004a9a:	460c      	mov	r4, r1
 8004a9c:	b913      	cbnz	r3, 8004aa4 <_fflush_r+0x10>
 8004a9e:	2500      	movs	r5, #0
 8004aa0:	4628      	mov	r0, r5
 8004aa2:	bd38      	pop	{r3, r4, r5, pc}
 8004aa4:	b118      	cbz	r0, 8004aae <_fflush_r+0x1a>
 8004aa6:	6983      	ldr	r3, [r0, #24]
 8004aa8:	b90b      	cbnz	r3, 8004aae <_fflush_r+0x1a>
 8004aaa:	f000 f887 	bl	8004bbc <__sinit>
 8004aae:	4b14      	ldr	r3, [pc, #80]	; (8004b00 <_fflush_r+0x6c>)
 8004ab0:	429c      	cmp	r4, r3
 8004ab2:	d11b      	bne.n	8004aec <_fflush_r+0x58>
 8004ab4:	686c      	ldr	r4, [r5, #4]
 8004ab6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d0ef      	beq.n	8004a9e <_fflush_r+0xa>
 8004abe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004ac0:	07d0      	lsls	r0, r2, #31
 8004ac2:	d404      	bmi.n	8004ace <_fflush_r+0x3a>
 8004ac4:	0599      	lsls	r1, r3, #22
 8004ac6:	d402      	bmi.n	8004ace <_fflush_r+0x3a>
 8004ac8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004aca:	f000 f915 	bl	8004cf8 <__retarget_lock_acquire_recursive>
 8004ace:	4628      	mov	r0, r5
 8004ad0:	4621      	mov	r1, r4
 8004ad2:	f7ff ff59 	bl	8004988 <__sflush_r>
 8004ad6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004ad8:	07da      	lsls	r2, r3, #31
 8004ada:	4605      	mov	r5, r0
 8004adc:	d4e0      	bmi.n	8004aa0 <_fflush_r+0xc>
 8004ade:	89a3      	ldrh	r3, [r4, #12]
 8004ae0:	059b      	lsls	r3, r3, #22
 8004ae2:	d4dd      	bmi.n	8004aa0 <_fflush_r+0xc>
 8004ae4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004ae6:	f000 f908 	bl	8004cfa <__retarget_lock_release_recursive>
 8004aea:	e7d9      	b.n	8004aa0 <_fflush_r+0xc>
 8004aec:	4b05      	ldr	r3, [pc, #20]	; (8004b04 <_fflush_r+0x70>)
 8004aee:	429c      	cmp	r4, r3
 8004af0:	d101      	bne.n	8004af6 <_fflush_r+0x62>
 8004af2:	68ac      	ldr	r4, [r5, #8]
 8004af4:	e7df      	b.n	8004ab6 <_fflush_r+0x22>
 8004af6:	4b04      	ldr	r3, [pc, #16]	; (8004b08 <_fflush_r+0x74>)
 8004af8:	429c      	cmp	r4, r3
 8004afa:	bf08      	it	eq
 8004afc:	68ec      	ldreq	r4, [r5, #12]
 8004afe:	e7da      	b.n	8004ab6 <_fflush_r+0x22>
 8004b00:	08005b28 	.word	0x08005b28
 8004b04:	08005b48 	.word	0x08005b48
 8004b08:	08005b08 	.word	0x08005b08

08004b0c <std>:
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	b510      	push	{r4, lr}
 8004b10:	4604      	mov	r4, r0
 8004b12:	e9c0 3300 	strd	r3, r3, [r0]
 8004b16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004b1a:	6083      	str	r3, [r0, #8]
 8004b1c:	8181      	strh	r1, [r0, #12]
 8004b1e:	6643      	str	r3, [r0, #100]	; 0x64
 8004b20:	81c2      	strh	r2, [r0, #14]
 8004b22:	6183      	str	r3, [r0, #24]
 8004b24:	4619      	mov	r1, r3
 8004b26:	2208      	movs	r2, #8
 8004b28:	305c      	adds	r0, #92	; 0x5c
 8004b2a:	f7ff fd5b 	bl	80045e4 <memset>
 8004b2e:	4b05      	ldr	r3, [pc, #20]	; (8004b44 <std+0x38>)
 8004b30:	6263      	str	r3, [r4, #36]	; 0x24
 8004b32:	4b05      	ldr	r3, [pc, #20]	; (8004b48 <std+0x3c>)
 8004b34:	62a3      	str	r3, [r4, #40]	; 0x28
 8004b36:	4b05      	ldr	r3, [pc, #20]	; (8004b4c <std+0x40>)
 8004b38:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004b3a:	4b05      	ldr	r3, [pc, #20]	; (8004b50 <std+0x44>)
 8004b3c:	6224      	str	r4, [r4, #32]
 8004b3e:	6323      	str	r3, [r4, #48]	; 0x30
 8004b40:	bd10      	pop	{r4, pc}
 8004b42:	bf00      	nop
 8004b44:	08004739 	.word	0x08004739
 8004b48:	0800475f 	.word	0x0800475f
 8004b4c:	08004797 	.word	0x08004797
 8004b50:	080047bb 	.word	0x080047bb

08004b54 <_cleanup_r>:
 8004b54:	4901      	ldr	r1, [pc, #4]	; (8004b5c <_cleanup_r+0x8>)
 8004b56:	f000 b8af 	b.w	8004cb8 <_fwalk_reent>
 8004b5a:	bf00      	nop
 8004b5c:	08004a95 	.word	0x08004a95

08004b60 <__sfmoreglue>:
 8004b60:	b570      	push	{r4, r5, r6, lr}
 8004b62:	2268      	movs	r2, #104	; 0x68
 8004b64:	1e4d      	subs	r5, r1, #1
 8004b66:	4355      	muls	r5, r2
 8004b68:	460e      	mov	r6, r1
 8004b6a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004b6e:	f000 f9a9 	bl	8004ec4 <_malloc_r>
 8004b72:	4604      	mov	r4, r0
 8004b74:	b140      	cbz	r0, 8004b88 <__sfmoreglue+0x28>
 8004b76:	2100      	movs	r1, #0
 8004b78:	e9c0 1600 	strd	r1, r6, [r0]
 8004b7c:	300c      	adds	r0, #12
 8004b7e:	60a0      	str	r0, [r4, #8]
 8004b80:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004b84:	f7ff fd2e 	bl	80045e4 <memset>
 8004b88:	4620      	mov	r0, r4
 8004b8a:	bd70      	pop	{r4, r5, r6, pc}

08004b8c <__sfp_lock_acquire>:
 8004b8c:	4801      	ldr	r0, [pc, #4]	; (8004b94 <__sfp_lock_acquire+0x8>)
 8004b8e:	f000 b8b3 	b.w	8004cf8 <__retarget_lock_acquire_recursive>
 8004b92:	bf00      	nop
 8004b94:	200002b5 	.word	0x200002b5

08004b98 <__sfp_lock_release>:
 8004b98:	4801      	ldr	r0, [pc, #4]	; (8004ba0 <__sfp_lock_release+0x8>)
 8004b9a:	f000 b8ae 	b.w	8004cfa <__retarget_lock_release_recursive>
 8004b9e:	bf00      	nop
 8004ba0:	200002b5 	.word	0x200002b5

08004ba4 <__sinit_lock_acquire>:
 8004ba4:	4801      	ldr	r0, [pc, #4]	; (8004bac <__sinit_lock_acquire+0x8>)
 8004ba6:	f000 b8a7 	b.w	8004cf8 <__retarget_lock_acquire_recursive>
 8004baa:	bf00      	nop
 8004bac:	200002b6 	.word	0x200002b6

08004bb0 <__sinit_lock_release>:
 8004bb0:	4801      	ldr	r0, [pc, #4]	; (8004bb8 <__sinit_lock_release+0x8>)
 8004bb2:	f000 b8a2 	b.w	8004cfa <__retarget_lock_release_recursive>
 8004bb6:	bf00      	nop
 8004bb8:	200002b6 	.word	0x200002b6

08004bbc <__sinit>:
 8004bbc:	b510      	push	{r4, lr}
 8004bbe:	4604      	mov	r4, r0
 8004bc0:	f7ff fff0 	bl	8004ba4 <__sinit_lock_acquire>
 8004bc4:	69a3      	ldr	r3, [r4, #24]
 8004bc6:	b11b      	cbz	r3, 8004bd0 <__sinit+0x14>
 8004bc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004bcc:	f7ff bff0 	b.w	8004bb0 <__sinit_lock_release>
 8004bd0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004bd4:	6523      	str	r3, [r4, #80]	; 0x50
 8004bd6:	4b13      	ldr	r3, [pc, #76]	; (8004c24 <__sinit+0x68>)
 8004bd8:	4a13      	ldr	r2, [pc, #76]	; (8004c28 <__sinit+0x6c>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	62a2      	str	r2, [r4, #40]	; 0x28
 8004bde:	42a3      	cmp	r3, r4
 8004be0:	bf04      	itt	eq
 8004be2:	2301      	moveq	r3, #1
 8004be4:	61a3      	streq	r3, [r4, #24]
 8004be6:	4620      	mov	r0, r4
 8004be8:	f000 f820 	bl	8004c2c <__sfp>
 8004bec:	6060      	str	r0, [r4, #4]
 8004bee:	4620      	mov	r0, r4
 8004bf0:	f000 f81c 	bl	8004c2c <__sfp>
 8004bf4:	60a0      	str	r0, [r4, #8]
 8004bf6:	4620      	mov	r0, r4
 8004bf8:	f000 f818 	bl	8004c2c <__sfp>
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	60e0      	str	r0, [r4, #12]
 8004c00:	2104      	movs	r1, #4
 8004c02:	6860      	ldr	r0, [r4, #4]
 8004c04:	f7ff ff82 	bl	8004b0c <std>
 8004c08:	68a0      	ldr	r0, [r4, #8]
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	2109      	movs	r1, #9
 8004c0e:	f7ff ff7d 	bl	8004b0c <std>
 8004c12:	68e0      	ldr	r0, [r4, #12]
 8004c14:	2202      	movs	r2, #2
 8004c16:	2112      	movs	r1, #18
 8004c18:	f7ff ff78 	bl	8004b0c <std>
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	61a3      	str	r3, [r4, #24]
 8004c20:	e7d2      	b.n	8004bc8 <__sinit+0xc>
 8004c22:	bf00      	nop
 8004c24:	08005b04 	.word	0x08005b04
 8004c28:	08004b55 	.word	0x08004b55

08004c2c <__sfp>:
 8004c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c2e:	4607      	mov	r7, r0
 8004c30:	f7ff ffac 	bl	8004b8c <__sfp_lock_acquire>
 8004c34:	4b1e      	ldr	r3, [pc, #120]	; (8004cb0 <__sfp+0x84>)
 8004c36:	681e      	ldr	r6, [r3, #0]
 8004c38:	69b3      	ldr	r3, [r6, #24]
 8004c3a:	b913      	cbnz	r3, 8004c42 <__sfp+0x16>
 8004c3c:	4630      	mov	r0, r6
 8004c3e:	f7ff ffbd 	bl	8004bbc <__sinit>
 8004c42:	3648      	adds	r6, #72	; 0x48
 8004c44:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004c48:	3b01      	subs	r3, #1
 8004c4a:	d503      	bpl.n	8004c54 <__sfp+0x28>
 8004c4c:	6833      	ldr	r3, [r6, #0]
 8004c4e:	b30b      	cbz	r3, 8004c94 <__sfp+0x68>
 8004c50:	6836      	ldr	r6, [r6, #0]
 8004c52:	e7f7      	b.n	8004c44 <__sfp+0x18>
 8004c54:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004c58:	b9d5      	cbnz	r5, 8004c90 <__sfp+0x64>
 8004c5a:	4b16      	ldr	r3, [pc, #88]	; (8004cb4 <__sfp+0x88>)
 8004c5c:	60e3      	str	r3, [r4, #12]
 8004c5e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004c62:	6665      	str	r5, [r4, #100]	; 0x64
 8004c64:	f000 f847 	bl	8004cf6 <__retarget_lock_init_recursive>
 8004c68:	f7ff ff96 	bl	8004b98 <__sfp_lock_release>
 8004c6c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004c70:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004c74:	6025      	str	r5, [r4, #0]
 8004c76:	61a5      	str	r5, [r4, #24]
 8004c78:	2208      	movs	r2, #8
 8004c7a:	4629      	mov	r1, r5
 8004c7c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004c80:	f7ff fcb0 	bl	80045e4 <memset>
 8004c84:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004c88:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004c8c:	4620      	mov	r0, r4
 8004c8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c90:	3468      	adds	r4, #104	; 0x68
 8004c92:	e7d9      	b.n	8004c48 <__sfp+0x1c>
 8004c94:	2104      	movs	r1, #4
 8004c96:	4638      	mov	r0, r7
 8004c98:	f7ff ff62 	bl	8004b60 <__sfmoreglue>
 8004c9c:	4604      	mov	r4, r0
 8004c9e:	6030      	str	r0, [r6, #0]
 8004ca0:	2800      	cmp	r0, #0
 8004ca2:	d1d5      	bne.n	8004c50 <__sfp+0x24>
 8004ca4:	f7ff ff78 	bl	8004b98 <__sfp_lock_release>
 8004ca8:	230c      	movs	r3, #12
 8004caa:	603b      	str	r3, [r7, #0]
 8004cac:	e7ee      	b.n	8004c8c <__sfp+0x60>
 8004cae:	bf00      	nop
 8004cb0:	08005b04 	.word	0x08005b04
 8004cb4:	ffff0001 	.word	0xffff0001

08004cb8 <_fwalk_reent>:
 8004cb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004cbc:	4606      	mov	r6, r0
 8004cbe:	4688      	mov	r8, r1
 8004cc0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004cc4:	2700      	movs	r7, #0
 8004cc6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004cca:	f1b9 0901 	subs.w	r9, r9, #1
 8004cce:	d505      	bpl.n	8004cdc <_fwalk_reent+0x24>
 8004cd0:	6824      	ldr	r4, [r4, #0]
 8004cd2:	2c00      	cmp	r4, #0
 8004cd4:	d1f7      	bne.n	8004cc6 <_fwalk_reent+0xe>
 8004cd6:	4638      	mov	r0, r7
 8004cd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004cdc:	89ab      	ldrh	r3, [r5, #12]
 8004cde:	2b01      	cmp	r3, #1
 8004ce0:	d907      	bls.n	8004cf2 <_fwalk_reent+0x3a>
 8004ce2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004ce6:	3301      	adds	r3, #1
 8004ce8:	d003      	beq.n	8004cf2 <_fwalk_reent+0x3a>
 8004cea:	4629      	mov	r1, r5
 8004cec:	4630      	mov	r0, r6
 8004cee:	47c0      	blx	r8
 8004cf0:	4307      	orrs	r7, r0
 8004cf2:	3568      	adds	r5, #104	; 0x68
 8004cf4:	e7e9      	b.n	8004cca <_fwalk_reent+0x12>

08004cf6 <__retarget_lock_init_recursive>:
 8004cf6:	4770      	bx	lr

08004cf8 <__retarget_lock_acquire_recursive>:
 8004cf8:	4770      	bx	lr

08004cfa <__retarget_lock_release_recursive>:
 8004cfa:	4770      	bx	lr

08004cfc <_lseek_r>:
 8004cfc:	b538      	push	{r3, r4, r5, lr}
 8004cfe:	4d07      	ldr	r5, [pc, #28]	; (8004d1c <_lseek_r+0x20>)
 8004d00:	4604      	mov	r4, r0
 8004d02:	4608      	mov	r0, r1
 8004d04:	4611      	mov	r1, r2
 8004d06:	2200      	movs	r2, #0
 8004d08:	602a      	str	r2, [r5, #0]
 8004d0a:	461a      	mov	r2, r3
 8004d0c:	f7fc f854 	bl	8000db8 <_lseek>
 8004d10:	1c43      	adds	r3, r0, #1
 8004d12:	d102      	bne.n	8004d1a <_lseek_r+0x1e>
 8004d14:	682b      	ldr	r3, [r5, #0]
 8004d16:	b103      	cbz	r3, 8004d1a <_lseek_r+0x1e>
 8004d18:	6023      	str	r3, [r4, #0]
 8004d1a:	bd38      	pop	{r3, r4, r5, pc}
 8004d1c:	200002c0 	.word	0x200002c0

08004d20 <__swhatbuf_r>:
 8004d20:	b570      	push	{r4, r5, r6, lr}
 8004d22:	460e      	mov	r6, r1
 8004d24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d28:	2900      	cmp	r1, #0
 8004d2a:	b096      	sub	sp, #88	; 0x58
 8004d2c:	4614      	mov	r4, r2
 8004d2e:	461d      	mov	r5, r3
 8004d30:	da08      	bge.n	8004d44 <__swhatbuf_r+0x24>
 8004d32:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004d36:	2200      	movs	r2, #0
 8004d38:	602a      	str	r2, [r5, #0]
 8004d3a:	061a      	lsls	r2, r3, #24
 8004d3c:	d410      	bmi.n	8004d60 <__swhatbuf_r+0x40>
 8004d3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d42:	e00e      	b.n	8004d62 <__swhatbuf_r+0x42>
 8004d44:	466a      	mov	r2, sp
 8004d46:	f000 fde1 	bl	800590c <_fstat_r>
 8004d4a:	2800      	cmp	r0, #0
 8004d4c:	dbf1      	blt.n	8004d32 <__swhatbuf_r+0x12>
 8004d4e:	9a01      	ldr	r2, [sp, #4]
 8004d50:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004d54:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004d58:	425a      	negs	r2, r3
 8004d5a:	415a      	adcs	r2, r3
 8004d5c:	602a      	str	r2, [r5, #0]
 8004d5e:	e7ee      	b.n	8004d3e <__swhatbuf_r+0x1e>
 8004d60:	2340      	movs	r3, #64	; 0x40
 8004d62:	2000      	movs	r0, #0
 8004d64:	6023      	str	r3, [r4, #0]
 8004d66:	b016      	add	sp, #88	; 0x58
 8004d68:	bd70      	pop	{r4, r5, r6, pc}
	...

08004d6c <__smakebuf_r>:
 8004d6c:	898b      	ldrh	r3, [r1, #12]
 8004d6e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004d70:	079d      	lsls	r5, r3, #30
 8004d72:	4606      	mov	r6, r0
 8004d74:	460c      	mov	r4, r1
 8004d76:	d507      	bpl.n	8004d88 <__smakebuf_r+0x1c>
 8004d78:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004d7c:	6023      	str	r3, [r4, #0]
 8004d7e:	6123      	str	r3, [r4, #16]
 8004d80:	2301      	movs	r3, #1
 8004d82:	6163      	str	r3, [r4, #20]
 8004d84:	b002      	add	sp, #8
 8004d86:	bd70      	pop	{r4, r5, r6, pc}
 8004d88:	ab01      	add	r3, sp, #4
 8004d8a:	466a      	mov	r2, sp
 8004d8c:	f7ff ffc8 	bl	8004d20 <__swhatbuf_r>
 8004d90:	9900      	ldr	r1, [sp, #0]
 8004d92:	4605      	mov	r5, r0
 8004d94:	4630      	mov	r0, r6
 8004d96:	f000 f895 	bl	8004ec4 <_malloc_r>
 8004d9a:	b948      	cbnz	r0, 8004db0 <__smakebuf_r+0x44>
 8004d9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004da0:	059a      	lsls	r2, r3, #22
 8004da2:	d4ef      	bmi.n	8004d84 <__smakebuf_r+0x18>
 8004da4:	f023 0303 	bic.w	r3, r3, #3
 8004da8:	f043 0302 	orr.w	r3, r3, #2
 8004dac:	81a3      	strh	r3, [r4, #12]
 8004dae:	e7e3      	b.n	8004d78 <__smakebuf_r+0xc>
 8004db0:	4b0d      	ldr	r3, [pc, #52]	; (8004de8 <__smakebuf_r+0x7c>)
 8004db2:	62b3      	str	r3, [r6, #40]	; 0x28
 8004db4:	89a3      	ldrh	r3, [r4, #12]
 8004db6:	6020      	str	r0, [r4, #0]
 8004db8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dbc:	81a3      	strh	r3, [r4, #12]
 8004dbe:	9b00      	ldr	r3, [sp, #0]
 8004dc0:	6163      	str	r3, [r4, #20]
 8004dc2:	9b01      	ldr	r3, [sp, #4]
 8004dc4:	6120      	str	r0, [r4, #16]
 8004dc6:	b15b      	cbz	r3, 8004de0 <__smakebuf_r+0x74>
 8004dc8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004dcc:	4630      	mov	r0, r6
 8004dce:	f000 fdaf 	bl	8005930 <_isatty_r>
 8004dd2:	b128      	cbz	r0, 8004de0 <__smakebuf_r+0x74>
 8004dd4:	89a3      	ldrh	r3, [r4, #12]
 8004dd6:	f023 0303 	bic.w	r3, r3, #3
 8004dda:	f043 0301 	orr.w	r3, r3, #1
 8004dde:	81a3      	strh	r3, [r4, #12]
 8004de0:	89a0      	ldrh	r0, [r4, #12]
 8004de2:	4305      	orrs	r5, r0
 8004de4:	81a5      	strh	r5, [r4, #12]
 8004de6:	e7cd      	b.n	8004d84 <__smakebuf_r+0x18>
 8004de8:	08004b55 	.word	0x08004b55

08004dec <_free_r>:
 8004dec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004dee:	2900      	cmp	r1, #0
 8004df0:	d044      	beq.n	8004e7c <_free_r+0x90>
 8004df2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004df6:	9001      	str	r0, [sp, #4]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	f1a1 0404 	sub.w	r4, r1, #4
 8004dfe:	bfb8      	it	lt
 8004e00:	18e4      	addlt	r4, r4, r3
 8004e02:	f000 fdb3 	bl	800596c <__malloc_lock>
 8004e06:	4a1e      	ldr	r2, [pc, #120]	; (8004e80 <_free_r+0x94>)
 8004e08:	9801      	ldr	r0, [sp, #4]
 8004e0a:	6813      	ldr	r3, [r2, #0]
 8004e0c:	b933      	cbnz	r3, 8004e1c <_free_r+0x30>
 8004e0e:	6063      	str	r3, [r4, #4]
 8004e10:	6014      	str	r4, [r2, #0]
 8004e12:	b003      	add	sp, #12
 8004e14:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004e18:	f000 bdae 	b.w	8005978 <__malloc_unlock>
 8004e1c:	42a3      	cmp	r3, r4
 8004e1e:	d908      	bls.n	8004e32 <_free_r+0x46>
 8004e20:	6825      	ldr	r5, [r4, #0]
 8004e22:	1961      	adds	r1, r4, r5
 8004e24:	428b      	cmp	r3, r1
 8004e26:	bf01      	itttt	eq
 8004e28:	6819      	ldreq	r1, [r3, #0]
 8004e2a:	685b      	ldreq	r3, [r3, #4]
 8004e2c:	1949      	addeq	r1, r1, r5
 8004e2e:	6021      	streq	r1, [r4, #0]
 8004e30:	e7ed      	b.n	8004e0e <_free_r+0x22>
 8004e32:	461a      	mov	r2, r3
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	b10b      	cbz	r3, 8004e3c <_free_r+0x50>
 8004e38:	42a3      	cmp	r3, r4
 8004e3a:	d9fa      	bls.n	8004e32 <_free_r+0x46>
 8004e3c:	6811      	ldr	r1, [r2, #0]
 8004e3e:	1855      	adds	r5, r2, r1
 8004e40:	42a5      	cmp	r5, r4
 8004e42:	d10b      	bne.n	8004e5c <_free_r+0x70>
 8004e44:	6824      	ldr	r4, [r4, #0]
 8004e46:	4421      	add	r1, r4
 8004e48:	1854      	adds	r4, r2, r1
 8004e4a:	42a3      	cmp	r3, r4
 8004e4c:	6011      	str	r1, [r2, #0]
 8004e4e:	d1e0      	bne.n	8004e12 <_free_r+0x26>
 8004e50:	681c      	ldr	r4, [r3, #0]
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	6053      	str	r3, [r2, #4]
 8004e56:	4421      	add	r1, r4
 8004e58:	6011      	str	r1, [r2, #0]
 8004e5a:	e7da      	b.n	8004e12 <_free_r+0x26>
 8004e5c:	d902      	bls.n	8004e64 <_free_r+0x78>
 8004e5e:	230c      	movs	r3, #12
 8004e60:	6003      	str	r3, [r0, #0]
 8004e62:	e7d6      	b.n	8004e12 <_free_r+0x26>
 8004e64:	6825      	ldr	r5, [r4, #0]
 8004e66:	1961      	adds	r1, r4, r5
 8004e68:	428b      	cmp	r3, r1
 8004e6a:	bf04      	itt	eq
 8004e6c:	6819      	ldreq	r1, [r3, #0]
 8004e6e:	685b      	ldreq	r3, [r3, #4]
 8004e70:	6063      	str	r3, [r4, #4]
 8004e72:	bf04      	itt	eq
 8004e74:	1949      	addeq	r1, r1, r5
 8004e76:	6021      	streq	r1, [r4, #0]
 8004e78:	6054      	str	r4, [r2, #4]
 8004e7a:	e7ca      	b.n	8004e12 <_free_r+0x26>
 8004e7c:	b003      	add	sp, #12
 8004e7e:	bd30      	pop	{r4, r5, pc}
 8004e80:	200002b8 	.word	0x200002b8

08004e84 <sbrk_aligned>:
 8004e84:	b570      	push	{r4, r5, r6, lr}
 8004e86:	4e0e      	ldr	r6, [pc, #56]	; (8004ec0 <sbrk_aligned+0x3c>)
 8004e88:	460c      	mov	r4, r1
 8004e8a:	6831      	ldr	r1, [r6, #0]
 8004e8c:	4605      	mov	r5, r0
 8004e8e:	b911      	cbnz	r1, 8004e96 <sbrk_aligned+0x12>
 8004e90:	f000 fbc2 	bl	8005618 <_sbrk_r>
 8004e94:	6030      	str	r0, [r6, #0]
 8004e96:	4621      	mov	r1, r4
 8004e98:	4628      	mov	r0, r5
 8004e9a:	f000 fbbd 	bl	8005618 <_sbrk_r>
 8004e9e:	1c43      	adds	r3, r0, #1
 8004ea0:	d00a      	beq.n	8004eb8 <sbrk_aligned+0x34>
 8004ea2:	1cc4      	adds	r4, r0, #3
 8004ea4:	f024 0403 	bic.w	r4, r4, #3
 8004ea8:	42a0      	cmp	r0, r4
 8004eaa:	d007      	beq.n	8004ebc <sbrk_aligned+0x38>
 8004eac:	1a21      	subs	r1, r4, r0
 8004eae:	4628      	mov	r0, r5
 8004eb0:	f000 fbb2 	bl	8005618 <_sbrk_r>
 8004eb4:	3001      	adds	r0, #1
 8004eb6:	d101      	bne.n	8004ebc <sbrk_aligned+0x38>
 8004eb8:	f04f 34ff 	mov.w	r4, #4294967295
 8004ebc:	4620      	mov	r0, r4
 8004ebe:	bd70      	pop	{r4, r5, r6, pc}
 8004ec0:	200002bc 	.word	0x200002bc

08004ec4 <_malloc_r>:
 8004ec4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ec8:	1ccd      	adds	r5, r1, #3
 8004eca:	f025 0503 	bic.w	r5, r5, #3
 8004ece:	3508      	adds	r5, #8
 8004ed0:	2d0c      	cmp	r5, #12
 8004ed2:	bf38      	it	cc
 8004ed4:	250c      	movcc	r5, #12
 8004ed6:	2d00      	cmp	r5, #0
 8004ed8:	4607      	mov	r7, r0
 8004eda:	db01      	blt.n	8004ee0 <_malloc_r+0x1c>
 8004edc:	42a9      	cmp	r1, r5
 8004ede:	d905      	bls.n	8004eec <_malloc_r+0x28>
 8004ee0:	230c      	movs	r3, #12
 8004ee2:	603b      	str	r3, [r7, #0]
 8004ee4:	2600      	movs	r6, #0
 8004ee6:	4630      	mov	r0, r6
 8004ee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004eec:	4e2e      	ldr	r6, [pc, #184]	; (8004fa8 <_malloc_r+0xe4>)
 8004eee:	f000 fd3d 	bl	800596c <__malloc_lock>
 8004ef2:	6833      	ldr	r3, [r6, #0]
 8004ef4:	461c      	mov	r4, r3
 8004ef6:	bb34      	cbnz	r4, 8004f46 <_malloc_r+0x82>
 8004ef8:	4629      	mov	r1, r5
 8004efa:	4638      	mov	r0, r7
 8004efc:	f7ff ffc2 	bl	8004e84 <sbrk_aligned>
 8004f00:	1c43      	adds	r3, r0, #1
 8004f02:	4604      	mov	r4, r0
 8004f04:	d14d      	bne.n	8004fa2 <_malloc_r+0xde>
 8004f06:	6834      	ldr	r4, [r6, #0]
 8004f08:	4626      	mov	r6, r4
 8004f0a:	2e00      	cmp	r6, #0
 8004f0c:	d140      	bne.n	8004f90 <_malloc_r+0xcc>
 8004f0e:	6823      	ldr	r3, [r4, #0]
 8004f10:	4631      	mov	r1, r6
 8004f12:	4638      	mov	r0, r7
 8004f14:	eb04 0803 	add.w	r8, r4, r3
 8004f18:	f000 fb7e 	bl	8005618 <_sbrk_r>
 8004f1c:	4580      	cmp	r8, r0
 8004f1e:	d13a      	bne.n	8004f96 <_malloc_r+0xd2>
 8004f20:	6821      	ldr	r1, [r4, #0]
 8004f22:	3503      	adds	r5, #3
 8004f24:	1a6d      	subs	r5, r5, r1
 8004f26:	f025 0503 	bic.w	r5, r5, #3
 8004f2a:	3508      	adds	r5, #8
 8004f2c:	2d0c      	cmp	r5, #12
 8004f2e:	bf38      	it	cc
 8004f30:	250c      	movcc	r5, #12
 8004f32:	4629      	mov	r1, r5
 8004f34:	4638      	mov	r0, r7
 8004f36:	f7ff ffa5 	bl	8004e84 <sbrk_aligned>
 8004f3a:	3001      	adds	r0, #1
 8004f3c:	d02b      	beq.n	8004f96 <_malloc_r+0xd2>
 8004f3e:	6823      	ldr	r3, [r4, #0]
 8004f40:	442b      	add	r3, r5
 8004f42:	6023      	str	r3, [r4, #0]
 8004f44:	e00e      	b.n	8004f64 <_malloc_r+0xa0>
 8004f46:	6822      	ldr	r2, [r4, #0]
 8004f48:	1b52      	subs	r2, r2, r5
 8004f4a:	d41e      	bmi.n	8004f8a <_malloc_r+0xc6>
 8004f4c:	2a0b      	cmp	r2, #11
 8004f4e:	d916      	bls.n	8004f7e <_malloc_r+0xba>
 8004f50:	1961      	adds	r1, r4, r5
 8004f52:	42a3      	cmp	r3, r4
 8004f54:	6025      	str	r5, [r4, #0]
 8004f56:	bf18      	it	ne
 8004f58:	6059      	strne	r1, [r3, #4]
 8004f5a:	6863      	ldr	r3, [r4, #4]
 8004f5c:	bf08      	it	eq
 8004f5e:	6031      	streq	r1, [r6, #0]
 8004f60:	5162      	str	r2, [r4, r5]
 8004f62:	604b      	str	r3, [r1, #4]
 8004f64:	4638      	mov	r0, r7
 8004f66:	f104 060b 	add.w	r6, r4, #11
 8004f6a:	f000 fd05 	bl	8005978 <__malloc_unlock>
 8004f6e:	f026 0607 	bic.w	r6, r6, #7
 8004f72:	1d23      	adds	r3, r4, #4
 8004f74:	1af2      	subs	r2, r6, r3
 8004f76:	d0b6      	beq.n	8004ee6 <_malloc_r+0x22>
 8004f78:	1b9b      	subs	r3, r3, r6
 8004f7a:	50a3      	str	r3, [r4, r2]
 8004f7c:	e7b3      	b.n	8004ee6 <_malloc_r+0x22>
 8004f7e:	6862      	ldr	r2, [r4, #4]
 8004f80:	42a3      	cmp	r3, r4
 8004f82:	bf0c      	ite	eq
 8004f84:	6032      	streq	r2, [r6, #0]
 8004f86:	605a      	strne	r2, [r3, #4]
 8004f88:	e7ec      	b.n	8004f64 <_malloc_r+0xa0>
 8004f8a:	4623      	mov	r3, r4
 8004f8c:	6864      	ldr	r4, [r4, #4]
 8004f8e:	e7b2      	b.n	8004ef6 <_malloc_r+0x32>
 8004f90:	4634      	mov	r4, r6
 8004f92:	6876      	ldr	r6, [r6, #4]
 8004f94:	e7b9      	b.n	8004f0a <_malloc_r+0x46>
 8004f96:	230c      	movs	r3, #12
 8004f98:	603b      	str	r3, [r7, #0]
 8004f9a:	4638      	mov	r0, r7
 8004f9c:	f000 fcec 	bl	8005978 <__malloc_unlock>
 8004fa0:	e7a1      	b.n	8004ee6 <_malloc_r+0x22>
 8004fa2:	6025      	str	r5, [r4, #0]
 8004fa4:	e7de      	b.n	8004f64 <_malloc_r+0xa0>
 8004fa6:	bf00      	nop
 8004fa8:	200002b8 	.word	0x200002b8

08004fac <_sungetc_r>:
 8004fac:	b538      	push	{r3, r4, r5, lr}
 8004fae:	1c4b      	adds	r3, r1, #1
 8004fb0:	4614      	mov	r4, r2
 8004fb2:	d103      	bne.n	8004fbc <_sungetc_r+0x10>
 8004fb4:	f04f 35ff 	mov.w	r5, #4294967295
 8004fb8:	4628      	mov	r0, r5
 8004fba:	bd38      	pop	{r3, r4, r5, pc}
 8004fbc:	8993      	ldrh	r3, [r2, #12]
 8004fbe:	f023 0320 	bic.w	r3, r3, #32
 8004fc2:	8193      	strh	r3, [r2, #12]
 8004fc4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004fc6:	6852      	ldr	r2, [r2, #4]
 8004fc8:	b2cd      	uxtb	r5, r1
 8004fca:	b18b      	cbz	r3, 8004ff0 <_sungetc_r+0x44>
 8004fcc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	dd08      	ble.n	8004fe4 <_sungetc_r+0x38>
 8004fd2:	6823      	ldr	r3, [r4, #0]
 8004fd4:	1e5a      	subs	r2, r3, #1
 8004fd6:	6022      	str	r2, [r4, #0]
 8004fd8:	f803 5c01 	strb.w	r5, [r3, #-1]
 8004fdc:	6863      	ldr	r3, [r4, #4]
 8004fde:	3301      	adds	r3, #1
 8004fe0:	6063      	str	r3, [r4, #4]
 8004fe2:	e7e9      	b.n	8004fb8 <_sungetc_r+0xc>
 8004fe4:	4621      	mov	r1, r4
 8004fe6:	f000 fc57 	bl	8005898 <__submore>
 8004fea:	2800      	cmp	r0, #0
 8004fec:	d0f1      	beq.n	8004fd2 <_sungetc_r+0x26>
 8004fee:	e7e1      	b.n	8004fb4 <_sungetc_r+0x8>
 8004ff0:	6921      	ldr	r1, [r4, #16]
 8004ff2:	6823      	ldr	r3, [r4, #0]
 8004ff4:	b151      	cbz	r1, 800500c <_sungetc_r+0x60>
 8004ff6:	4299      	cmp	r1, r3
 8004ff8:	d208      	bcs.n	800500c <_sungetc_r+0x60>
 8004ffa:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8004ffe:	42a9      	cmp	r1, r5
 8005000:	d104      	bne.n	800500c <_sungetc_r+0x60>
 8005002:	3b01      	subs	r3, #1
 8005004:	3201      	adds	r2, #1
 8005006:	6023      	str	r3, [r4, #0]
 8005008:	6062      	str	r2, [r4, #4]
 800500a:	e7d5      	b.n	8004fb8 <_sungetc_r+0xc>
 800500c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8005010:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005014:	6363      	str	r3, [r4, #52]	; 0x34
 8005016:	2303      	movs	r3, #3
 8005018:	63a3      	str	r3, [r4, #56]	; 0x38
 800501a:	4623      	mov	r3, r4
 800501c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8005020:	6023      	str	r3, [r4, #0]
 8005022:	2301      	movs	r3, #1
 8005024:	e7dc      	b.n	8004fe0 <_sungetc_r+0x34>

08005026 <__ssrefill_r>:
 8005026:	b510      	push	{r4, lr}
 8005028:	460c      	mov	r4, r1
 800502a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800502c:	b169      	cbz	r1, 800504a <__ssrefill_r+0x24>
 800502e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005032:	4299      	cmp	r1, r3
 8005034:	d001      	beq.n	800503a <__ssrefill_r+0x14>
 8005036:	f7ff fed9 	bl	8004dec <_free_r>
 800503a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800503c:	6063      	str	r3, [r4, #4]
 800503e:	2000      	movs	r0, #0
 8005040:	6360      	str	r0, [r4, #52]	; 0x34
 8005042:	b113      	cbz	r3, 800504a <__ssrefill_r+0x24>
 8005044:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005046:	6023      	str	r3, [r4, #0]
 8005048:	bd10      	pop	{r4, pc}
 800504a:	6923      	ldr	r3, [r4, #16]
 800504c:	6023      	str	r3, [r4, #0]
 800504e:	2300      	movs	r3, #0
 8005050:	6063      	str	r3, [r4, #4]
 8005052:	89a3      	ldrh	r3, [r4, #12]
 8005054:	f043 0320 	orr.w	r3, r3, #32
 8005058:	81a3      	strh	r3, [r4, #12]
 800505a:	f04f 30ff 	mov.w	r0, #4294967295
 800505e:	e7f3      	b.n	8005048 <__ssrefill_r+0x22>

08005060 <__ssvfiscanf_r>:
 8005060:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005064:	460c      	mov	r4, r1
 8005066:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800506a:	2100      	movs	r1, #0
 800506c:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8005070:	49a6      	ldr	r1, [pc, #664]	; (800530c <__ssvfiscanf_r+0x2ac>)
 8005072:	91a0      	str	r1, [sp, #640]	; 0x280
 8005074:	f10d 0804 	add.w	r8, sp, #4
 8005078:	49a5      	ldr	r1, [pc, #660]	; (8005310 <__ssvfiscanf_r+0x2b0>)
 800507a:	4fa6      	ldr	r7, [pc, #664]	; (8005314 <__ssvfiscanf_r+0x2b4>)
 800507c:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8005318 <__ssvfiscanf_r+0x2b8>
 8005080:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8005084:	4606      	mov	r6, r0
 8005086:	91a1      	str	r1, [sp, #644]	; 0x284
 8005088:	9300      	str	r3, [sp, #0]
 800508a:	7813      	ldrb	r3, [r2, #0]
 800508c:	2b00      	cmp	r3, #0
 800508e:	f000 815a 	beq.w	8005346 <__ssvfiscanf_r+0x2e6>
 8005092:	5dd9      	ldrb	r1, [r3, r7]
 8005094:	f011 0108 	ands.w	r1, r1, #8
 8005098:	f102 0501 	add.w	r5, r2, #1
 800509c:	d019      	beq.n	80050d2 <__ssvfiscanf_r+0x72>
 800509e:	6863      	ldr	r3, [r4, #4]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	dd0f      	ble.n	80050c4 <__ssvfiscanf_r+0x64>
 80050a4:	6823      	ldr	r3, [r4, #0]
 80050a6:	781a      	ldrb	r2, [r3, #0]
 80050a8:	5cba      	ldrb	r2, [r7, r2]
 80050aa:	0712      	lsls	r2, r2, #28
 80050ac:	d401      	bmi.n	80050b2 <__ssvfiscanf_r+0x52>
 80050ae:	462a      	mov	r2, r5
 80050b0:	e7eb      	b.n	800508a <__ssvfiscanf_r+0x2a>
 80050b2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80050b4:	3201      	adds	r2, #1
 80050b6:	9245      	str	r2, [sp, #276]	; 0x114
 80050b8:	6862      	ldr	r2, [r4, #4]
 80050ba:	3301      	adds	r3, #1
 80050bc:	3a01      	subs	r2, #1
 80050be:	6062      	str	r2, [r4, #4]
 80050c0:	6023      	str	r3, [r4, #0]
 80050c2:	e7ec      	b.n	800509e <__ssvfiscanf_r+0x3e>
 80050c4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80050c6:	4621      	mov	r1, r4
 80050c8:	4630      	mov	r0, r6
 80050ca:	4798      	blx	r3
 80050cc:	2800      	cmp	r0, #0
 80050ce:	d0e9      	beq.n	80050a4 <__ssvfiscanf_r+0x44>
 80050d0:	e7ed      	b.n	80050ae <__ssvfiscanf_r+0x4e>
 80050d2:	2b25      	cmp	r3, #37	; 0x25
 80050d4:	d012      	beq.n	80050fc <__ssvfiscanf_r+0x9c>
 80050d6:	469a      	mov	sl, r3
 80050d8:	6863      	ldr	r3, [r4, #4]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	f340 8091 	ble.w	8005202 <__ssvfiscanf_r+0x1a2>
 80050e0:	6822      	ldr	r2, [r4, #0]
 80050e2:	7813      	ldrb	r3, [r2, #0]
 80050e4:	4553      	cmp	r3, sl
 80050e6:	f040 812e 	bne.w	8005346 <__ssvfiscanf_r+0x2e6>
 80050ea:	6863      	ldr	r3, [r4, #4]
 80050ec:	3b01      	subs	r3, #1
 80050ee:	6063      	str	r3, [r4, #4]
 80050f0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80050f2:	3201      	adds	r2, #1
 80050f4:	3301      	adds	r3, #1
 80050f6:	6022      	str	r2, [r4, #0]
 80050f8:	9345      	str	r3, [sp, #276]	; 0x114
 80050fa:	e7d8      	b.n	80050ae <__ssvfiscanf_r+0x4e>
 80050fc:	9141      	str	r1, [sp, #260]	; 0x104
 80050fe:	9143      	str	r1, [sp, #268]	; 0x10c
 8005100:	7853      	ldrb	r3, [r2, #1]
 8005102:	2b2a      	cmp	r3, #42	; 0x2a
 8005104:	bf02      	ittt	eq
 8005106:	2310      	moveq	r3, #16
 8005108:	1c95      	addeq	r5, r2, #2
 800510a:	9341      	streq	r3, [sp, #260]	; 0x104
 800510c:	220a      	movs	r2, #10
 800510e:	46aa      	mov	sl, r5
 8005110:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8005114:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8005118:	2b09      	cmp	r3, #9
 800511a:	d91d      	bls.n	8005158 <__ssvfiscanf_r+0xf8>
 800511c:	487e      	ldr	r0, [pc, #504]	; (8005318 <__ssvfiscanf_r+0x2b8>)
 800511e:	2203      	movs	r2, #3
 8005120:	f7fb f86e 	bl	8000200 <memchr>
 8005124:	b140      	cbz	r0, 8005138 <__ssvfiscanf_r+0xd8>
 8005126:	2301      	movs	r3, #1
 8005128:	eba0 0009 	sub.w	r0, r0, r9
 800512c:	fa03 f000 	lsl.w	r0, r3, r0
 8005130:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005132:	4318      	orrs	r0, r3
 8005134:	9041      	str	r0, [sp, #260]	; 0x104
 8005136:	4655      	mov	r5, sl
 8005138:	f815 3b01 	ldrb.w	r3, [r5], #1
 800513c:	2b78      	cmp	r3, #120	; 0x78
 800513e:	d806      	bhi.n	800514e <__ssvfiscanf_r+0xee>
 8005140:	2b57      	cmp	r3, #87	; 0x57
 8005142:	d810      	bhi.n	8005166 <__ssvfiscanf_r+0x106>
 8005144:	2b25      	cmp	r3, #37	; 0x25
 8005146:	d0c6      	beq.n	80050d6 <__ssvfiscanf_r+0x76>
 8005148:	d856      	bhi.n	80051f8 <__ssvfiscanf_r+0x198>
 800514a:	2b00      	cmp	r3, #0
 800514c:	d064      	beq.n	8005218 <__ssvfiscanf_r+0x1b8>
 800514e:	2303      	movs	r3, #3
 8005150:	9347      	str	r3, [sp, #284]	; 0x11c
 8005152:	230a      	movs	r3, #10
 8005154:	9342      	str	r3, [sp, #264]	; 0x108
 8005156:	e071      	b.n	800523c <__ssvfiscanf_r+0x1dc>
 8005158:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800515a:	fb02 1103 	mla	r1, r2, r3, r1
 800515e:	3930      	subs	r1, #48	; 0x30
 8005160:	9143      	str	r1, [sp, #268]	; 0x10c
 8005162:	4655      	mov	r5, sl
 8005164:	e7d3      	b.n	800510e <__ssvfiscanf_r+0xae>
 8005166:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800516a:	2a20      	cmp	r2, #32
 800516c:	d8ef      	bhi.n	800514e <__ssvfiscanf_r+0xee>
 800516e:	a101      	add	r1, pc, #4	; (adr r1, 8005174 <__ssvfiscanf_r+0x114>)
 8005170:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005174:	08005227 	.word	0x08005227
 8005178:	0800514f 	.word	0x0800514f
 800517c:	0800514f 	.word	0x0800514f
 8005180:	08005285 	.word	0x08005285
 8005184:	0800514f 	.word	0x0800514f
 8005188:	0800514f 	.word	0x0800514f
 800518c:	0800514f 	.word	0x0800514f
 8005190:	0800514f 	.word	0x0800514f
 8005194:	0800514f 	.word	0x0800514f
 8005198:	0800514f 	.word	0x0800514f
 800519c:	0800514f 	.word	0x0800514f
 80051a0:	0800529b 	.word	0x0800529b
 80051a4:	08005271 	.word	0x08005271
 80051a8:	080051ff 	.word	0x080051ff
 80051ac:	080051ff 	.word	0x080051ff
 80051b0:	080051ff 	.word	0x080051ff
 80051b4:	0800514f 	.word	0x0800514f
 80051b8:	08005275 	.word	0x08005275
 80051bc:	0800514f 	.word	0x0800514f
 80051c0:	0800514f 	.word	0x0800514f
 80051c4:	0800514f 	.word	0x0800514f
 80051c8:	0800514f 	.word	0x0800514f
 80051cc:	080052ab 	.word	0x080052ab
 80051d0:	0800527d 	.word	0x0800527d
 80051d4:	0800521f 	.word	0x0800521f
 80051d8:	0800514f 	.word	0x0800514f
 80051dc:	0800514f 	.word	0x0800514f
 80051e0:	080052a7 	.word	0x080052a7
 80051e4:	0800514f 	.word	0x0800514f
 80051e8:	08005271 	.word	0x08005271
 80051ec:	0800514f 	.word	0x0800514f
 80051f0:	0800514f 	.word	0x0800514f
 80051f4:	08005227 	.word	0x08005227
 80051f8:	3b45      	subs	r3, #69	; 0x45
 80051fa:	2b02      	cmp	r3, #2
 80051fc:	d8a7      	bhi.n	800514e <__ssvfiscanf_r+0xee>
 80051fe:	2305      	movs	r3, #5
 8005200:	e01b      	b.n	800523a <__ssvfiscanf_r+0x1da>
 8005202:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005204:	4621      	mov	r1, r4
 8005206:	4630      	mov	r0, r6
 8005208:	4798      	blx	r3
 800520a:	2800      	cmp	r0, #0
 800520c:	f43f af68 	beq.w	80050e0 <__ssvfiscanf_r+0x80>
 8005210:	9844      	ldr	r0, [sp, #272]	; 0x110
 8005212:	2800      	cmp	r0, #0
 8005214:	f040 808d 	bne.w	8005332 <__ssvfiscanf_r+0x2d2>
 8005218:	f04f 30ff 	mov.w	r0, #4294967295
 800521c:	e08f      	b.n	800533e <__ssvfiscanf_r+0x2de>
 800521e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8005220:	f042 0220 	orr.w	r2, r2, #32
 8005224:	9241      	str	r2, [sp, #260]	; 0x104
 8005226:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8005228:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800522c:	9241      	str	r2, [sp, #260]	; 0x104
 800522e:	2210      	movs	r2, #16
 8005230:	2b6f      	cmp	r3, #111	; 0x6f
 8005232:	9242      	str	r2, [sp, #264]	; 0x108
 8005234:	bf34      	ite	cc
 8005236:	2303      	movcc	r3, #3
 8005238:	2304      	movcs	r3, #4
 800523a:	9347      	str	r3, [sp, #284]	; 0x11c
 800523c:	6863      	ldr	r3, [r4, #4]
 800523e:	2b00      	cmp	r3, #0
 8005240:	dd42      	ble.n	80052c8 <__ssvfiscanf_r+0x268>
 8005242:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005244:	0659      	lsls	r1, r3, #25
 8005246:	d404      	bmi.n	8005252 <__ssvfiscanf_r+0x1f2>
 8005248:	6823      	ldr	r3, [r4, #0]
 800524a:	781a      	ldrb	r2, [r3, #0]
 800524c:	5cba      	ldrb	r2, [r7, r2]
 800524e:	0712      	lsls	r2, r2, #28
 8005250:	d441      	bmi.n	80052d6 <__ssvfiscanf_r+0x276>
 8005252:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8005254:	2b02      	cmp	r3, #2
 8005256:	dc50      	bgt.n	80052fa <__ssvfiscanf_r+0x29a>
 8005258:	466b      	mov	r3, sp
 800525a:	4622      	mov	r2, r4
 800525c:	a941      	add	r1, sp, #260	; 0x104
 800525e:	4630      	mov	r0, r6
 8005260:	f000 f876 	bl	8005350 <_scanf_chars>
 8005264:	2801      	cmp	r0, #1
 8005266:	d06e      	beq.n	8005346 <__ssvfiscanf_r+0x2e6>
 8005268:	2802      	cmp	r0, #2
 800526a:	f47f af20 	bne.w	80050ae <__ssvfiscanf_r+0x4e>
 800526e:	e7cf      	b.n	8005210 <__ssvfiscanf_r+0x1b0>
 8005270:	220a      	movs	r2, #10
 8005272:	e7dd      	b.n	8005230 <__ssvfiscanf_r+0x1d0>
 8005274:	2300      	movs	r3, #0
 8005276:	9342      	str	r3, [sp, #264]	; 0x108
 8005278:	2303      	movs	r3, #3
 800527a:	e7de      	b.n	800523a <__ssvfiscanf_r+0x1da>
 800527c:	2308      	movs	r3, #8
 800527e:	9342      	str	r3, [sp, #264]	; 0x108
 8005280:	2304      	movs	r3, #4
 8005282:	e7da      	b.n	800523a <__ssvfiscanf_r+0x1da>
 8005284:	4629      	mov	r1, r5
 8005286:	4640      	mov	r0, r8
 8005288:	f000 f9d6 	bl	8005638 <__sccl>
 800528c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800528e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005292:	9341      	str	r3, [sp, #260]	; 0x104
 8005294:	4605      	mov	r5, r0
 8005296:	2301      	movs	r3, #1
 8005298:	e7cf      	b.n	800523a <__ssvfiscanf_r+0x1da>
 800529a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800529c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80052a0:	9341      	str	r3, [sp, #260]	; 0x104
 80052a2:	2300      	movs	r3, #0
 80052a4:	e7c9      	b.n	800523a <__ssvfiscanf_r+0x1da>
 80052a6:	2302      	movs	r3, #2
 80052a8:	e7c7      	b.n	800523a <__ssvfiscanf_r+0x1da>
 80052aa:	9841      	ldr	r0, [sp, #260]	; 0x104
 80052ac:	06c3      	lsls	r3, r0, #27
 80052ae:	f53f aefe 	bmi.w	80050ae <__ssvfiscanf_r+0x4e>
 80052b2:	9b00      	ldr	r3, [sp, #0]
 80052b4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80052b6:	1d19      	adds	r1, r3, #4
 80052b8:	9100      	str	r1, [sp, #0]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f010 0f01 	tst.w	r0, #1
 80052c0:	bf14      	ite	ne
 80052c2:	801a      	strhne	r2, [r3, #0]
 80052c4:	601a      	streq	r2, [r3, #0]
 80052c6:	e6f2      	b.n	80050ae <__ssvfiscanf_r+0x4e>
 80052c8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80052ca:	4621      	mov	r1, r4
 80052cc:	4630      	mov	r0, r6
 80052ce:	4798      	blx	r3
 80052d0:	2800      	cmp	r0, #0
 80052d2:	d0b6      	beq.n	8005242 <__ssvfiscanf_r+0x1e2>
 80052d4:	e79c      	b.n	8005210 <__ssvfiscanf_r+0x1b0>
 80052d6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80052d8:	3201      	adds	r2, #1
 80052da:	9245      	str	r2, [sp, #276]	; 0x114
 80052dc:	6862      	ldr	r2, [r4, #4]
 80052de:	3a01      	subs	r2, #1
 80052e0:	2a00      	cmp	r2, #0
 80052e2:	6062      	str	r2, [r4, #4]
 80052e4:	dd02      	ble.n	80052ec <__ssvfiscanf_r+0x28c>
 80052e6:	3301      	adds	r3, #1
 80052e8:	6023      	str	r3, [r4, #0]
 80052ea:	e7ad      	b.n	8005248 <__ssvfiscanf_r+0x1e8>
 80052ec:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80052ee:	4621      	mov	r1, r4
 80052f0:	4630      	mov	r0, r6
 80052f2:	4798      	blx	r3
 80052f4:	2800      	cmp	r0, #0
 80052f6:	d0a7      	beq.n	8005248 <__ssvfiscanf_r+0x1e8>
 80052f8:	e78a      	b.n	8005210 <__ssvfiscanf_r+0x1b0>
 80052fa:	2b04      	cmp	r3, #4
 80052fc:	dc0e      	bgt.n	800531c <__ssvfiscanf_r+0x2bc>
 80052fe:	466b      	mov	r3, sp
 8005300:	4622      	mov	r2, r4
 8005302:	a941      	add	r1, sp, #260	; 0x104
 8005304:	4630      	mov	r0, r6
 8005306:	f000 f87d 	bl	8005404 <_scanf_i>
 800530a:	e7ab      	b.n	8005264 <__ssvfiscanf_r+0x204>
 800530c:	08004fad 	.word	0x08004fad
 8005310:	08005027 	.word	0x08005027
 8005314:	08005b88 	.word	0x08005b88
 8005318:	08005b68 	.word	0x08005b68
 800531c:	4b0b      	ldr	r3, [pc, #44]	; (800534c <__ssvfiscanf_r+0x2ec>)
 800531e:	2b00      	cmp	r3, #0
 8005320:	f43f aec5 	beq.w	80050ae <__ssvfiscanf_r+0x4e>
 8005324:	466b      	mov	r3, sp
 8005326:	4622      	mov	r2, r4
 8005328:	a941      	add	r1, sp, #260	; 0x104
 800532a:	4630      	mov	r0, r6
 800532c:	f3af 8000 	nop.w
 8005330:	e798      	b.n	8005264 <__ssvfiscanf_r+0x204>
 8005332:	89a3      	ldrh	r3, [r4, #12]
 8005334:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005338:	bf18      	it	ne
 800533a:	f04f 30ff 	movne.w	r0, #4294967295
 800533e:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8005342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005346:	9844      	ldr	r0, [sp, #272]	; 0x110
 8005348:	e7f9      	b.n	800533e <__ssvfiscanf_r+0x2de>
 800534a:	bf00      	nop
 800534c:	00000000 	.word	0x00000000

08005350 <_scanf_chars>:
 8005350:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005354:	4615      	mov	r5, r2
 8005356:	688a      	ldr	r2, [r1, #8]
 8005358:	4680      	mov	r8, r0
 800535a:	460c      	mov	r4, r1
 800535c:	b932      	cbnz	r2, 800536c <_scanf_chars+0x1c>
 800535e:	698a      	ldr	r2, [r1, #24]
 8005360:	2a00      	cmp	r2, #0
 8005362:	bf0c      	ite	eq
 8005364:	2201      	moveq	r2, #1
 8005366:	f04f 32ff 	movne.w	r2, #4294967295
 800536a:	608a      	str	r2, [r1, #8]
 800536c:	6822      	ldr	r2, [r4, #0]
 800536e:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8005400 <_scanf_chars+0xb0>
 8005372:	06d1      	lsls	r1, r2, #27
 8005374:	bf5f      	itttt	pl
 8005376:	681a      	ldrpl	r2, [r3, #0]
 8005378:	1d11      	addpl	r1, r2, #4
 800537a:	6019      	strpl	r1, [r3, #0]
 800537c:	6816      	ldrpl	r6, [r2, #0]
 800537e:	2700      	movs	r7, #0
 8005380:	69a0      	ldr	r0, [r4, #24]
 8005382:	b188      	cbz	r0, 80053a8 <_scanf_chars+0x58>
 8005384:	2801      	cmp	r0, #1
 8005386:	d107      	bne.n	8005398 <_scanf_chars+0x48>
 8005388:	682a      	ldr	r2, [r5, #0]
 800538a:	7811      	ldrb	r1, [r2, #0]
 800538c:	6962      	ldr	r2, [r4, #20]
 800538e:	5c52      	ldrb	r2, [r2, r1]
 8005390:	b952      	cbnz	r2, 80053a8 <_scanf_chars+0x58>
 8005392:	2f00      	cmp	r7, #0
 8005394:	d031      	beq.n	80053fa <_scanf_chars+0xaa>
 8005396:	e022      	b.n	80053de <_scanf_chars+0x8e>
 8005398:	2802      	cmp	r0, #2
 800539a:	d120      	bne.n	80053de <_scanf_chars+0x8e>
 800539c:	682b      	ldr	r3, [r5, #0]
 800539e:	781b      	ldrb	r3, [r3, #0]
 80053a0:	f813 3009 	ldrb.w	r3, [r3, r9]
 80053a4:	071b      	lsls	r3, r3, #28
 80053a6:	d41a      	bmi.n	80053de <_scanf_chars+0x8e>
 80053a8:	6823      	ldr	r3, [r4, #0]
 80053aa:	06da      	lsls	r2, r3, #27
 80053ac:	bf5e      	ittt	pl
 80053ae:	682b      	ldrpl	r3, [r5, #0]
 80053b0:	781b      	ldrbpl	r3, [r3, #0]
 80053b2:	f806 3b01 	strbpl.w	r3, [r6], #1
 80053b6:	682a      	ldr	r2, [r5, #0]
 80053b8:	686b      	ldr	r3, [r5, #4]
 80053ba:	3201      	adds	r2, #1
 80053bc:	602a      	str	r2, [r5, #0]
 80053be:	68a2      	ldr	r2, [r4, #8]
 80053c0:	3b01      	subs	r3, #1
 80053c2:	3a01      	subs	r2, #1
 80053c4:	606b      	str	r3, [r5, #4]
 80053c6:	3701      	adds	r7, #1
 80053c8:	60a2      	str	r2, [r4, #8]
 80053ca:	b142      	cbz	r2, 80053de <_scanf_chars+0x8e>
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	dcd7      	bgt.n	8005380 <_scanf_chars+0x30>
 80053d0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80053d4:	4629      	mov	r1, r5
 80053d6:	4640      	mov	r0, r8
 80053d8:	4798      	blx	r3
 80053da:	2800      	cmp	r0, #0
 80053dc:	d0d0      	beq.n	8005380 <_scanf_chars+0x30>
 80053de:	6823      	ldr	r3, [r4, #0]
 80053e0:	f013 0310 	ands.w	r3, r3, #16
 80053e4:	d105      	bne.n	80053f2 <_scanf_chars+0xa2>
 80053e6:	68e2      	ldr	r2, [r4, #12]
 80053e8:	3201      	adds	r2, #1
 80053ea:	60e2      	str	r2, [r4, #12]
 80053ec:	69a2      	ldr	r2, [r4, #24]
 80053ee:	b102      	cbz	r2, 80053f2 <_scanf_chars+0xa2>
 80053f0:	7033      	strb	r3, [r6, #0]
 80053f2:	6923      	ldr	r3, [r4, #16]
 80053f4:	443b      	add	r3, r7
 80053f6:	6123      	str	r3, [r4, #16]
 80053f8:	2000      	movs	r0, #0
 80053fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80053fe:	bf00      	nop
 8005400:	08005b88 	.word	0x08005b88

08005404 <_scanf_i>:
 8005404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005408:	4698      	mov	r8, r3
 800540a:	4b76      	ldr	r3, [pc, #472]	; (80055e4 <_scanf_i+0x1e0>)
 800540c:	460c      	mov	r4, r1
 800540e:	4682      	mov	sl, r0
 8005410:	4616      	mov	r6, r2
 8005412:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005416:	b087      	sub	sp, #28
 8005418:	ab03      	add	r3, sp, #12
 800541a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800541e:	4b72      	ldr	r3, [pc, #456]	; (80055e8 <_scanf_i+0x1e4>)
 8005420:	69a1      	ldr	r1, [r4, #24]
 8005422:	4a72      	ldr	r2, [pc, #456]	; (80055ec <_scanf_i+0x1e8>)
 8005424:	2903      	cmp	r1, #3
 8005426:	bf18      	it	ne
 8005428:	461a      	movne	r2, r3
 800542a:	68a3      	ldr	r3, [r4, #8]
 800542c:	9201      	str	r2, [sp, #4]
 800542e:	1e5a      	subs	r2, r3, #1
 8005430:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005434:	bf88      	it	hi
 8005436:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800543a:	4627      	mov	r7, r4
 800543c:	bf82      	ittt	hi
 800543e:	eb03 0905 	addhi.w	r9, r3, r5
 8005442:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005446:	60a3      	strhi	r3, [r4, #8]
 8005448:	f857 3b1c 	ldr.w	r3, [r7], #28
 800544c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8005450:	bf98      	it	ls
 8005452:	f04f 0900 	movls.w	r9, #0
 8005456:	6023      	str	r3, [r4, #0]
 8005458:	463d      	mov	r5, r7
 800545a:	f04f 0b00 	mov.w	fp, #0
 800545e:	6831      	ldr	r1, [r6, #0]
 8005460:	ab03      	add	r3, sp, #12
 8005462:	7809      	ldrb	r1, [r1, #0]
 8005464:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8005468:	2202      	movs	r2, #2
 800546a:	f7fa fec9 	bl	8000200 <memchr>
 800546e:	b328      	cbz	r0, 80054bc <_scanf_i+0xb8>
 8005470:	f1bb 0f01 	cmp.w	fp, #1
 8005474:	d159      	bne.n	800552a <_scanf_i+0x126>
 8005476:	6862      	ldr	r2, [r4, #4]
 8005478:	b92a      	cbnz	r2, 8005486 <_scanf_i+0x82>
 800547a:	6822      	ldr	r2, [r4, #0]
 800547c:	2308      	movs	r3, #8
 800547e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005482:	6063      	str	r3, [r4, #4]
 8005484:	6022      	str	r2, [r4, #0]
 8005486:	6822      	ldr	r2, [r4, #0]
 8005488:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800548c:	6022      	str	r2, [r4, #0]
 800548e:	68a2      	ldr	r2, [r4, #8]
 8005490:	1e51      	subs	r1, r2, #1
 8005492:	60a1      	str	r1, [r4, #8]
 8005494:	b192      	cbz	r2, 80054bc <_scanf_i+0xb8>
 8005496:	6832      	ldr	r2, [r6, #0]
 8005498:	1c51      	adds	r1, r2, #1
 800549a:	6031      	str	r1, [r6, #0]
 800549c:	7812      	ldrb	r2, [r2, #0]
 800549e:	f805 2b01 	strb.w	r2, [r5], #1
 80054a2:	6872      	ldr	r2, [r6, #4]
 80054a4:	3a01      	subs	r2, #1
 80054a6:	2a00      	cmp	r2, #0
 80054a8:	6072      	str	r2, [r6, #4]
 80054aa:	dc07      	bgt.n	80054bc <_scanf_i+0xb8>
 80054ac:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80054b0:	4631      	mov	r1, r6
 80054b2:	4650      	mov	r0, sl
 80054b4:	4790      	blx	r2
 80054b6:	2800      	cmp	r0, #0
 80054b8:	f040 8085 	bne.w	80055c6 <_scanf_i+0x1c2>
 80054bc:	f10b 0b01 	add.w	fp, fp, #1
 80054c0:	f1bb 0f03 	cmp.w	fp, #3
 80054c4:	d1cb      	bne.n	800545e <_scanf_i+0x5a>
 80054c6:	6863      	ldr	r3, [r4, #4]
 80054c8:	b90b      	cbnz	r3, 80054ce <_scanf_i+0xca>
 80054ca:	230a      	movs	r3, #10
 80054cc:	6063      	str	r3, [r4, #4]
 80054ce:	6863      	ldr	r3, [r4, #4]
 80054d0:	4947      	ldr	r1, [pc, #284]	; (80055f0 <_scanf_i+0x1ec>)
 80054d2:	6960      	ldr	r0, [r4, #20]
 80054d4:	1ac9      	subs	r1, r1, r3
 80054d6:	f000 f8af 	bl	8005638 <__sccl>
 80054da:	f04f 0b00 	mov.w	fp, #0
 80054de:	68a3      	ldr	r3, [r4, #8]
 80054e0:	6822      	ldr	r2, [r4, #0]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d03d      	beq.n	8005562 <_scanf_i+0x15e>
 80054e6:	6831      	ldr	r1, [r6, #0]
 80054e8:	6960      	ldr	r0, [r4, #20]
 80054ea:	f891 c000 	ldrb.w	ip, [r1]
 80054ee:	f810 000c 	ldrb.w	r0, [r0, ip]
 80054f2:	2800      	cmp	r0, #0
 80054f4:	d035      	beq.n	8005562 <_scanf_i+0x15e>
 80054f6:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80054fa:	d124      	bne.n	8005546 <_scanf_i+0x142>
 80054fc:	0510      	lsls	r0, r2, #20
 80054fe:	d522      	bpl.n	8005546 <_scanf_i+0x142>
 8005500:	f10b 0b01 	add.w	fp, fp, #1
 8005504:	f1b9 0f00 	cmp.w	r9, #0
 8005508:	d003      	beq.n	8005512 <_scanf_i+0x10e>
 800550a:	3301      	adds	r3, #1
 800550c:	f109 39ff 	add.w	r9, r9, #4294967295
 8005510:	60a3      	str	r3, [r4, #8]
 8005512:	6873      	ldr	r3, [r6, #4]
 8005514:	3b01      	subs	r3, #1
 8005516:	2b00      	cmp	r3, #0
 8005518:	6073      	str	r3, [r6, #4]
 800551a:	dd1b      	ble.n	8005554 <_scanf_i+0x150>
 800551c:	6833      	ldr	r3, [r6, #0]
 800551e:	3301      	adds	r3, #1
 8005520:	6033      	str	r3, [r6, #0]
 8005522:	68a3      	ldr	r3, [r4, #8]
 8005524:	3b01      	subs	r3, #1
 8005526:	60a3      	str	r3, [r4, #8]
 8005528:	e7d9      	b.n	80054de <_scanf_i+0xda>
 800552a:	f1bb 0f02 	cmp.w	fp, #2
 800552e:	d1ae      	bne.n	800548e <_scanf_i+0x8a>
 8005530:	6822      	ldr	r2, [r4, #0]
 8005532:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8005536:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800553a:	d1bf      	bne.n	80054bc <_scanf_i+0xb8>
 800553c:	2310      	movs	r3, #16
 800553e:	6063      	str	r3, [r4, #4]
 8005540:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005544:	e7a2      	b.n	800548c <_scanf_i+0x88>
 8005546:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800554a:	6022      	str	r2, [r4, #0]
 800554c:	780b      	ldrb	r3, [r1, #0]
 800554e:	f805 3b01 	strb.w	r3, [r5], #1
 8005552:	e7de      	b.n	8005512 <_scanf_i+0x10e>
 8005554:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005558:	4631      	mov	r1, r6
 800555a:	4650      	mov	r0, sl
 800555c:	4798      	blx	r3
 800555e:	2800      	cmp	r0, #0
 8005560:	d0df      	beq.n	8005522 <_scanf_i+0x11e>
 8005562:	6823      	ldr	r3, [r4, #0]
 8005564:	05db      	lsls	r3, r3, #23
 8005566:	d50d      	bpl.n	8005584 <_scanf_i+0x180>
 8005568:	42bd      	cmp	r5, r7
 800556a:	d909      	bls.n	8005580 <_scanf_i+0x17c>
 800556c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8005570:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005574:	4632      	mov	r2, r6
 8005576:	4650      	mov	r0, sl
 8005578:	4798      	blx	r3
 800557a:	f105 39ff 	add.w	r9, r5, #4294967295
 800557e:	464d      	mov	r5, r9
 8005580:	42bd      	cmp	r5, r7
 8005582:	d02d      	beq.n	80055e0 <_scanf_i+0x1dc>
 8005584:	6822      	ldr	r2, [r4, #0]
 8005586:	f012 0210 	ands.w	r2, r2, #16
 800558a:	d113      	bne.n	80055b4 <_scanf_i+0x1b0>
 800558c:	702a      	strb	r2, [r5, #0]
 800558e:	6863      	ldr	r3, [r4, #4]
 8005590:	9e01      	ldr	r6, [sp, #4]
 8005592:	4639      	mov	r1, r7
 8005594:	4650      	mov	r0, sl
 8005596:	47b0      	blx	r6
 8005598:	6821      	ldr	r1, [r4, #0]
 800559a:	f8d8 3000 	ldr.w	r3, [r8]
 800559e:	f011 0f20 	tst.w	r1, #32
 80055a2:	d013      	beq.n	80055cc <_scanf_i+0x1c8>
 80055a4:	1d1a      	adds	r2, r3, #4
 80055a6:	f8c8 2000 	str.w	r2, [r8]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	6018      	str	r0, [r3, #0]
 80055ae:	68e3      	ldr	r3, [r4, #12]
 80055b0:	3301      	adds	r3, #1
 80055b2:	60e3      	str	r3, [r4, #12]
 80055b4:	1bed      	subs	r5, r5, r7
 80055b6:	44ab      	add	fp, r5
 80055b8:	6925      	ldr	r5, [r4, #16]
 80055ba:	445d      	add	r5, fp
 80055bc:	6125      	str	r5, [r4, #16]
 80055be:	2000      	movs	r0, #0
 80055c0:	b007      	add	sp, #28
 80055c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055c6:	f04f 0b00 	mov.w	fp, #0
 80055ca:	e7ca      	b.n	8005562 <_scanf_i+0x15e>
 80055cc:	1d1a      	adds	r2, r3, #4
 80055ce:	f8c8 2000 	str.w	r2, [r8]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f011 0f01 	tst.w	r1, #1
 80055d8:	bf14      	ite	ne
 80055da:	8018      	strhne	r0, [r3, #0]
 80055dc:	6018      	streq	r0, [r3, #0]
 80055de:	e7e6      	b.n	80055ae <_scanf_i+0x1aa>
 80055e0:	2001      	movs	r0, #1
 80055e2:	e7ed      	b.n	80055c0 <_scanf_i+0x1bc>
 80055e4:	08005ab0 	.word	0x08005ab0
 80055e8:	08005895 	.word	0x08005895
 80055ec:	080057ad 	.word	0x080057ad
 80055f0:	08005b85 	.word	0x08005b85

080055f4 <_read_r>:
 80055f4:	b538      	push	{r3, r4, r5, lr}
 80055f6:	4d07      	ldr	r5, [pc, #28]	; (8005614 <_read_r+0x20>)
 80055f8:	4604      	mov	r4, r0
 80055fa:	4608      	mov	r0, r1
 80055fc:	4611      	mov	r1, r2
 80055fe:	2200      	movs	r2, #0
 8005600:	602a      	str	r2, [r5, #0]
 8005602:	461a      	mov	r2, r3
 8005604:	f7fb fb94 	bl	8000d30 <_read>
 8005608:	1c43      	adds	r3, r0, #1
 800560a:	d102      	bne.n	8005612 <_read_r+0x1e>
 800560c:	682b      	ldr	r3, [r5, #0]
 800560e:	b103      	cbz	r3, 8005612 <_read_r+0x1e>
 8005610:	6023      	str	r3, [r4, #0]
 8005612:	bd38      	pop	{r3, r4, r5, pc}
 8005614:	200002c0 	.word	0x200002c0

08005618 <_sbrk_r>:
 8005618:	b538      	push	{r3, r4, r5, lr}
 800561a:	4d06      	ldr	r5, [pc, #24]	; (8005634 <_sbrk_r+0x1c>)
 800561c:	2300      	movs	r3, #0
 800561e:	4604      	mov	r4, r0
 8005620:	4608      	mov	r0, r1
 8005622:	602b      	str	r3, [r5, #0]
 8005624:	f7fb fbd6 	bl	8000dd4 <_sbrk>
 8005628:	1c43      	adds	r3, r0, #1
 800562a:	d102      	bne.n	8005632 <_sbrk_r+0x1a>
 800562c:	682b      	ldr	r3, [r5, #0]
 800562e:	b103      	cbz	r3, 8005632 <_sbrk_r+0x1a>
 8005630:	6023      	str	r3, [r4, #0]
 8005632:	bd38      	pop	{r3, r4, r5, pc}
 8005634:	200002c0 	.word	0x200002c0

08005638 <__sccl>:
 8005638:	b570      	push	{r4, r5, r6, lr}
 800563a:	780b      	ldrb	r3, [r1, #0]
 800563c:	4604      	mov	r4, r0
 800563e:	2b5e      	cmp	r3, #94	; 0x5e
 8005640:	bf0b      	itete	eq
 8005642:	784b      	ldrbeq	r3, [r1, #1]
 8005644:	1c48      	addne	r0, r1, #1
 8005646:	1c88      	addeq	r0, r1, #2
 8005648:	2200      	movne	r2, #0
 800564a:	bf08      	it	eq
 800564c:	2201      	moveq	r2, #1
 800564e:	1e61      	subs	r1, r4, #1
 8005650:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8005654:	f801 2f01 	strb.w	r2, [r1, #1]!
 8005658:	42a9      	cmp	r1, r5
 800565a:	d1fb      	bne.n	8005654 <__sccl+0x1c>
 800565c:	b90b      	cbnz	r3, 8005662 <__sccl+0x2a>
 800565e:	3801      	subs	r0, #1
 8005660:	bd70      	pop	{r4, r5, r6, pc}
 8005662:	f082 0201 	eor.w	r2, r2, #1
 8005666:	54e2      	strb	r2, [r4, r3]
 8005668:	4605      	mov	r5, r0
 800566a:	4628      	mov	r0, r5
 800566c:	f810 1b01 	ldrb.w	r1, [r0], #1
 8005670:	292d      	cmp	r1, #45	; 0x2d
 8005672:	d006      	beq.n	8005682 <__sccl+0x4a>
 8005674:	295d      	cmp	r1, #93	; 0x5d
 8005676:	d0f3      	beq.n	8005660 <__sccl+0x28>
 8005678:	b909      	cbnz	r1, 800567e <__sccl+0x46>
 800567a:	4628      	mov	r0, r5
 800567c:	e7f0      	b.n	8005660 <__sccl+0x28>
 800567e:	460b      	mov	r3, r1
 8005680:	e7f1      	b.n	8005666 <__sccl+0x2e>
 8005682:	786e      	ldrb	r6, [r5, #1]
 8005684:	2e5d      	cmp	r6, #93	; 0x5d
 8005686:	d0fa      	beq.n	800567e <__sccl+0x46>
 8005688:	42b3      	cmp	r3, r6
 800568a:	dcf8      	bgt.n	800567e <__sccl+0x46>
 800568c:	3502      	adds	r5, #2
 800568e:	4619      	mov	r1, r3
 8005690:	3101      	adds	r1, #1
 8005692:	428e      	cmp	r6, r1
 8005694:	5462      	strb	r2, [r4, r1]
 8005696:	dcfb      	bgt.n	8005690 <__sccl+0x58>
 8005698:	1af1      	subs	r1, r6, r3
 800569a:	3901      	subs	r1, #1
 800569c:	1c58      	adds	r0, r3, #1
 800569e:	42b3      	cmp	r3, r6
 80056a0:	bfa8      	it	ge
 80056a2:	2100      	movge	r1, #0
 80056a4:	1843      	adds	r3, r0, r1
 80056a6:	e7e0      	b.n	800566a <__sccl+0x32>

080056a8 <_strtol_l.constprop.0>:
 80056a8:	2b01      	cmp	r3, #1
 80056aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056ae:	d001      	beq.n	80056b4 <_strtol_l.constprop.0+0xc>
 80056b0:	2b24      	cmp	r3, #36	; 0x24
 80056b2:	d906      	bls.n	80056c2 <_strtol_l.constprop.0+0x1a>
 80056b4:	f7fe ff6c 	bl	8004590 <__errno>
 80056b8:	2316      	movs	r3, #22
 80056ba:	6003      	str	r3, [r0, #0]
 80056bc:	2000      	movs	r0, #0
 80056be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056c2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80057a8 <_strtol_l.constprop.0+0x100>
 80056c6:	460d      	mov	r5, r1
 80056c8:	462e      	mov	r6, r5
 80056ca:	f815 4b01 	ldrb.w	r4, [r5], #1
 80056ce:	f814 700c 	ldrb.w	r7, [r4, ip]
 80056d2:	f017 0708 	ands.w	r7, r7, #8
 80056d6:	d1f7      	bne.n	80056c8 <_strtol_l.constprop.0+0x20>
 80056d8:	2c2d      	cmp	r4, #45	; 0x2d
 80056da:	d132      	bne.n	8005742 <_strtol_l.constprop.0+0x9a>
 80056dc:	782c      	ldrb	r4, [r5, #0]
 80056de:	2701      	movs	r7, #1
 80056e0:	1cb5      	adds	r5, r6, #2
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d05b      	beq.n	800579e <_strtol_l.constprop.0+0xf6>
 80056e6:	2b10      	cmp	r3, #16
 80056e8:	d109      	bne.n	80056fe <_strtol_l.constprop.0+0x56>
 80056ea:	2c30      	cmp	r4, #48	; 0x30
 80056ec:	d107      	bne.n	80056fe <_strtol_l.constprop.0+0x56>
 80056ee:	782c      	ldrb	r4, [r5, #0]
 80056f0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80056f4:	2c58      	cmp	r4, #88	; 0x58
 80056f6:	d14d      	bne.n	8005794 <_strtol_l.constprop.0+0xec>
 80056f8:	786c      	ldrb	r4, [r5, #1]
 80056fa:	2310      	movs	r3, #16
 80056fc:	3502      	adds	r5, #2
 80056fe:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8005702:	f108 38ff 	add.w	r8, r8, #4294967295
 8005706:	f04f 0c00 	mov.w	ip, #0
 800570a:	fbb8 f9f3 	udiv	r9, r8, r3
 800570e:	4666      	mov	r6, ip
 8005710:	fb03 8a19 	mls	sl, r3, r9, r8
 8005714:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8005718:	f1be 0f09 	cmp.w	lr, #9
 800571c:	d816      	bhi.n	800574c <_strtol_l.constprop.0+0xa4>
 800571e:	4674      	mov	r4, lr
 8005720:	42a3      	cmp	r3, r4
 8005722:	dd24      	ble.n	800576e <_strtol_l.constprop.0+0xc6>
 8005724:	f1bc 0f00 	cmp.w	ip, #0
 8005728:	db1e      	blt.n	8005768 <_strtol_l.constprop.0+0xc0>
 800572a:	45b1      	cmp	r9, r6
 800572c:	d31c      	bcc.n	8005768 <_strtol_l.constprop.0+0xc0>
 800572e:	d101      	bne.n	8005734 <_strtol_l.constprop.0+0x8c>
 8005730:	45a2      	cmp	sl, r4
 8005732:	db19      	blt.n	8005768 <_strtol_l.constprop.0+0xc0>
 8005734:	fb06 4603 	mla	r6, r6, r3, r4
 8005738:	f04f 0c01 	mov.w	ip, #1
 800573c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005740:	e7e8      	b.n	8005714 <_strtol_l.constprop.0+0x6c>
 8005742:	2c2b      	cmp	r4, #43	; 0x2b
 8005744:	bf04      	itt	eq
 8005746:	782c      	ldrbeq	r4, [r5, #0]
 8005748:	1cb5      	addeq	r5, r6, #2
 800574a:	e7ca      	b.n	80056e2 <_strtol_l.constprop.0+0x3a>
 800574c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8005750:	f1be 0f19 	cmp.w	lr, #25
 8005754:	d801      	bhi.n	800575a <_strtol_l.constprop.0+0xb2>
 8005756:	3c37      	subs	r4, #55	; 0x37
 8005758:	e7e2      	b.n	8005720 <_strtol_l.constprop.0+0x78>
 800575a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800575e:	f1be 0f19 	cmp.w	lr, #25
 8005762:	d804      	bhi.n	800576e <_strtol_l.constprop.0+0xc6>
 8005764:	3c57      	subs	r4, #87	; 0x57
 8005766:	e7db      	b.n	8005720 <_strtol_l.constprop.0+0x78>
 8005768:	f04f 3cff 	mov.w	ip, #4294967295
 800576c:	e7e6      	b.n	800573c <_strtol_l.constprop.0+0x94>
 800576e:	f1bc 0f00 	cmp.w	ip, #0
 8005772:	da05      	bge.n	8005780 <_strtol_l.constprop.0+0xd8>
 8005774:	2322      	movs	r3, #34	; 0x22
 8005776:	6003      	str	r3, [r0, #0]
 8005778:	4646      	mov	r6, r8
 800577a:	b942      	cbnz	r2, 800578e <_strtol_l.constprop.0+0xe6>
 800577c:	4630      	mov	r0, r6
 800577e:	e79e      	b.n	80056be <_strtol_l.constprop.0+0x16>
 8005780:	b107      	cbz	r7, 8005784 <_strtol_l.constprop.0+0xdc>
 8005782:	4276      	negs	r6, r6
 8005784:	2a00      	cmp	r2, #0
 8005786:	d0f9      	beq.n	800577c <_strtol_l.constprop.0+0xd4>
 8005788:	f1bc 0f00 	cmp.w	ip, #0
 800578c:	d000      	beq.n	8005790 <_strtol_l.constprop.0+0xe8>
 800578e:	1e69      	subs	r1, r5, #1
 8005790:	6011      	str	r1, [r2, #0]
 8005792:	e7f3      	b.n	800577c <_strtol_l.constprop.0+0xd4>
 8005794:	2430      	movs	r4, #48	; 0x30
 8005796:	2b00      	cmp	r3, #0
 8005798:	d1b1      	bne.n	80056fe <_strtol_l.constprop.0+0x56>
 800579a:	2308      	movs	r3, #8
 800579c:	e7af      	b.n	80056fe <_strtol_l.constprop.0+0x56>
 800579e:	2c30      	cmp	r4, #48	; 0x30
 80057a0:	d0a5      	beq.n	80056ee <_strtol_l.constprop.0+0x46>
 80057a2:	230a      	movs	r3, #10
 80057a4:	e7ab      	b.n	80056fe <_strtol_l.constprop.0+0x56>
 80057a6:	bf00      	nop
 80057a8:	08005b88 	.word	0x08005b88

080057ac <_strtol_r>:
 80057ac:	f7ff bf7c 	b.w	80056a8 <_strtol_l.constprop.0>

080057b0 <_strtoul_l.constprop.0>:
 80057b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80057b4:	4f36      	ldr	r7, [pc, #216]	; (8005890 <_strtoul_l.constprop.0+0xe0>)
 80057b6:	4686      	mov	lr, r0
 80057b8:	460d      	mov	r5, r1
 80057ba:	4628      	mov	r0, r5
 80057bc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80057c0:	5de6      	ldrb	r6, [r4, r7]
 80057c2:	f016 0608 	ands.w	r6, r6, #8
 80057c6:	d1f8      	bne.n	80057ba <_strtoul_l.constprop.0+0xa>
 80057c8:	2c2d      	cmp	r4, #45	; 0x2d
 80057ca:	d12f      	bne.n	800582c <_strtoul_l.constprop.0+0x7c>
 80057cc:	782c      	ldrb	r4, [r5, #0]
 80057ce:	2601      	movs	r6, #1
 80057d0:	1c85      	adds	r5, r0, #2
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d057      	beq.n	8005886 <_strtoul_l.constprop.0+0xd6>
 80057d6:	2b10      	cmp	r3, #16
 80057d8:	d109      	bne.n	80057ee <_strtoul_l.constprop.0+0x3e>
 80057da:	2c30      	cmp	r4, #48	; 0x30
 80057dc:	d107      	bne.n	80057ee <_strtoul_l.constprop.0+0x3e>
 80057de:	7828      	ldrb	r0, [r5, #0]
 80057e0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80057e4:	2858      	cmp	r0, #88	; 0x58
 80057e6:	d149      	bne.n	800587c <_strtoul_l.constprop.0+0xcc>
 80057e8:	786c      	ldrb	r4, [r5, #1]
 80057ea:	2310      	movs	r3, #16
 80057ec:	3502      	adds	r5, #2
 80057ee:	f04f 38ff 	mov.w	r8, #4294967295
 80057f2:	2700      	movs	r7, #0
 80057f4:	fbb8 f8f3 	udiv	r8, r8, r3
 80057f8:	fb03 f908 	mul.w	r9, r3, r8
 80057fc:	ea6f 0909 	mvn.w	r9, r9
 8005800:	4638      	mov	r0, r7
 8005802:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8005806:	f1bc 0f09 	cmp.w	ip, #9
 800580a:	d814      	bhi.n	8005836 <_strtoul_l.constprop.0+0x86>
 800580c:	4664      	mov	r4, ip
 800580e:	42a3      	cmp	r3, r4
 8005810:	dd22      	ble.n	8005858 <_strtoul_l.constprop.0+0xa8>
 8005812:	2f00      	cmp	r7, #0
 8005814:	db1d      	blt.n	8005852 <_strtoul_l.constprop.0+0xa2>
 8005816:	4580      	cmp	r8, r0
 8005818:	d31b      	bcc.n	8005852 <_strtoul_l.constprop.0+0xa2>
 800581a:	d101      	bne.n	8005820 <_strtoul_l.constprop.0+0x70>
 800581c:	45a1      	cmp	r9, r4
 800581e:	db18      	blt.n	8005852 <_strtoul_l.constprop.0+0xa2>
 8005820:	fb00 4003 	mla	r0, r0, r3, r4
 8005824:	2701      	movs	r7, #1
 8005826:	f815 4b01 	ldrb.w	r4, [r5], #1
 800582a:	e7ea      	b.n	8005802 <_strtoul_l.constprop.0+0x52>
 800582c:	2c2b      	cmp	r4, #43	; 0x2b
 800582e:	bf04      	itt	eq
 8005830:	782c      	ldrbeq	r4, [r5, #0]
 8005832:	1c85      	addeq	r5, r0, #2
 8005834:	e7cd      	b.n	80057d2 <_strtoul_l.constprop.0+0x22>
 8005836:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800583a:	f1bc 0f19 	cmp.w	ip, #25
 800583e:	d801      	bhi.n	8005844 <_strtoul_l.constprop.0+0x94>
 8005840:	3c37      	subs	r4, #55	; 0x37
 8005842:	e7e4      	b.n	800580e <_strtoul_l.constprop.0+0x5e>
 8005844:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8005848:	f1bc 0f19 	cmp.w	ip, #25
 800584c:	d804      	bhi.n	8005858 <_strtoul_l.constprop.0+0xa8>
 800584e:	3c57      	subs	r4, #87	; 0x57
 8005850:	e7dd      	b.n	800580e <_strtoul_l.constprop.0+0x5e>
 8005852:	f04f 37ff 	mov.w	r7, #4294967295
 8005856:	e7e6      	b.n	8005826 <_strtoul_l.constprop.0+0x76>
 8005858:	2f00      	cmp	r7, #0
 800585a:	da07      	bge.n	800586c <_strtoul_l.constprop.0+0xbc>
 800585c:	2322      	movs	r3, #34	; 0x22
 800585e:	f8ce 3000 	str.w	r3, [lr]
 8005862:	f04f 30ff 	mov.w	r0, #4294967295
 8005866:	b932      	cbnz	r2, 8005876 <_strtoul_l.constprop.0+0xc6>
 8005868:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800586c:	b106      	cbz	r6, 8005870 <_strtoul_l.constprop.0+0xc0>
 800586e:	4240      	negs	r0, r0
 8005870:	2a00      	cmp	r2, #0
 8005872:	d0f9      	beq.n	8005868 <_strtoul_l.constprop.0+0xb8>
 8005874:	b107      	cbz	r7, 8005878 <_strtoul_l.constprop.0+0xc8>
 8005876:	1e69      	subs	r1, r5, #1
 8005878:	6011      	str	r1, [r2, #0]
 800587a:	e7f5      	b.n	8005868 <_strtoul_l.constprop.0+0xb8>
 800587c:	2430      	movs	r4, #48	; 0x30
 800587e:	2b00      	cmp	r3, #0
 8005880:	d1b5      	bne.n	80057ee <_strtoul_l.constprop.0+0x3e>
 8005882:	2308      	movs	r3, #8
 8005884:	e7b3      	b.n	80057ee <_strtoul_l.constprop.0+0x3e>
 8005886:	2c30      	cmp	r4, #48	; 0x30
 8005888:	d0a9      	beq.n	80057de <_strtoul_l.constprop.0+0x2e>
 800588a:	230a      	movs	r3, #10
 800588c:	e7af      	b.n	80057ee <_strtoul_l.constprop.0+0x3e>
 800588e:	bf00      	nop
 8005890:	08005b88 	.word	0x08005b88

08005894 <_strtoul_r>:
 8005894:	f7ff bf8c 	b.w	80057b0 <_strtoul_l.constprop.0>

08005898 <__submore>:
 8005898:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800589c:	460c      	mov	r4, r1
 800589e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80058a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80058a4:	4299      	cmp	r1, r3
 80058a6:	d11d      	bne.n	80058e4 <__submore+0x4c>
 80058a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80058ac:	f7ff fb0a 	bl	8004ec4 <_malloc_r>
 80058b0:	b918      	cbnz	r0, 80058ba <__submore+0x22>
 80058b2:	f04f 30ff 	mov.w	r0, #4294967295
 80058b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80058ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80058be:	63a3      	str	r3, [r4, #56]	; 0x38
 80058c0:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80058c4:	6360      	str	r0, [r4, #52]	; 0x34
 80058c6:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80058ca:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80058ce:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80058d2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80058d6:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80058da:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80058de:	6020      	str	r0, [r4, #0]
 80058e0:	2000      	movs	r0, #0
 80058e2:	e7e8      	b.n	80058b6 <__submore+0x1e>
 80058e4:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80058e6:	0077      	lsls	r7, r6, #1
 80058e8:	463a      	mov	r2, r7
 80058ea:	f000 f84b 	bl	8005984 <_realloc_r>
 80058ee:	4605      	mov	r5, r0
 80058f0:	2800      	cmp	r0, #0
 80058f2:	d0de      	beq.n	80058b2 <__submore+0x1a>
 80058f4:	eb00 0806 	add.w	r8, r0, r6
 80058f8:	4601      	mov	r1, r0
 80058fa:	4632      	mov	r2, r6
 80058fc:	4640      	mov	r0, r8
 80058fe:	f000 f827 	bl	8005950 <memcpy>
 8005902:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8005906:	f8c4 8000 	str.w	r8, [r4]
 800590a:	e7e9      	b.n	80058e0 <__submore+0x48>

0800590c <_fstat_r>:
 800590c:	b538      	push	{r3, r4, r5, lr}
 800590e:	4d07      	ldr	r5, [pc, #28]	; (800592c <_fstat_r+0x20>)
 8005910:	2300      	movs	r3, #0
 8005912:	4604      	mov	r4, r0
 8005914:	4608      	mov	r0, r1
 8005916:	4611      	mov	r1, r2
 8005918:	602b      	str	r3, [r5, #0]
 800591a:	f7fb fa32 	bl	8000d82 <_fstat>
 800591e:	1c43      	adds	r3, r0, #1
 8005920:	d102      	bne.n	8005928 <_fstat_r+0x1c>
 8005922:	682b      	ldr	r3, [r5, #0]
 8005924:	b103      	cbz	r3, 8005928 <_fstat_r+0x1c>
 8005926:	6023      	str	r3, [r4, #0]
 8005928:	bd38      	pop	{r3, r4, r5, pc}
 800592a:	bf00      	nop
 800592c:	200002c0 	.word	0x200002c0

08005930 <_isatty_r>:
 8005930:	b538      	push	{r3, r4, r5, lr}
 8005932:	4d06      	ldr	r5, [pc, #24]	; (800594c <_isatty_r+0x1c>)
 8005934:	2300      	movs	r3, #0
 8005936:	4604      	mov	r4, r0
 8005938:	4608      	mov	r0, r1
 800593a:	602b      	str	r3, [r5, #0]
 800593c:	f7fb fa31 	bl	8000da2 <_isatty>
 8005940:	1c43      	adds	r3, r0, #1
 8005942:	d102      	bne.n	800594a <_isatty_r+0x1a>
 8005944:	682b      	ldr	r3, [r5, #0]
 8005946:	b103      	cbz	r3, 800594a <_isatty_r+0x1a>
 8005948:	6023      	str	r3, [r4, #0]
 800594a:	bd38      	pop	{r3, r4, r5, pc}
 800594c:	200002c0 	.word	0x200002c0

08005950 <memcpy>:
 8005950:	440a      	add	r2, r1
 8005952:	4291      	cmp	r1, r2
 8005954:	f100 33ff 	add.w	r3, r0, #4294967295
 8005958:	d100      	bne.n	800595c <memcpy+0xc>
 800595a:	4770      	bx	lr
 800595c:	b510      	push	{r4, lr}
 800595e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005962:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005966:	4291      	cmp	r1, r2
 8005968:	d1f9      	bne.n	800595e <memcpy+0xe>
 800596a:	bd10      	pop	{r4, pc}

0800596c <__malloc_lock>:
 800596c:	4801      	ldr	r0, [pc, #4]	; (8005974 <__malloc_lock+0x8>)
 800596e:	f7ff b9c3 	b.w	8004cf8 <__retarget_lock_acquire_recursive>
 8005972:	bf00      	nop
 8005974:	200002b4 	.word	0x200002b4

08005978 <__malloc_unlock>:
 8005978:	4801      	ldr	r0, [pc, #4]	; (8005980 <__malloc_unlock+0x8>)
 800597a:	f7ff b9be 	b.w	8004cfa <__retarget_lock_release_recursive>
 800597e:	bf00      	nop
 8005980:	200002b4 	.word	0x200002b4

08005984 <_realloc_r>:
 8005984:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005988:	4680      	mov	r8, r0
 800598a:	4614      	mov	r4, r2
 800598c:	460e      	mov	r6, r1
 800598e:	b921      	cbnz	r1, 800599a <_realloc_r+0x16>
 8005990:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005994:	4611      	mov	r1, r2
 8005996:	f7ff ba95 	b.w	8004ec4 <_malloc_r>
 800599a:	b92a      	cbnz	r2, 80059a8 <_realloc_r+0x24>
 800599c:	f7ff fa26 	bl	8004dec <_free_r>
 80059a0:	4625      	mov	r5, r4
 80059a2:	4628      	mov	r0, r5
 80059a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80059a8:	f000 f81b 	bl	80059e2 <_malloc_usable_size_r>
 80059ac:	4284      	cmp	r4, r0
 80059ae:	4607      	mov	r7, r0
 80059b0:	d802      	bhi.n	80059b8 <_realloc_r+0x34>
 80059b2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80059b6:	d812      	bhi.n	80059de <_realloc_r+0x5a>
 80059b8:	4621      	mov	r1, r4
 80059ba:	4640      	mov	r0, r8
 80059bc:	f7ff fa82 	bl	8004ec4 <_malloc_r>
 80059c0:	4605      	mov	r5, r0
 80059c2:	2800      	cmp	r0, #0
 80059c4:	d0ed      	beq.n	80059a2 <_realloc_r+0x1e>
 80059c6:	42bc      	cmp	r4, r7
 80059c8:	4622      	mov	r2, r4
 80059ca:	4631      	mov	r1, r6
 80059cc:	bf28      	it	cs
 80059ce:	463a      	movcs	r2, r7
 80059d0:	f7ff ffbe 	bl	8005950 <memcpy>
 80059d4:	4631      	mov	r1, r6
 80059d6:	4640      	mov	r0, r8
 80059d8:	f7ff fa08 	bl	8004dec <_free_r>
 80059dc:	e7e1      	b.n	80059a2 <_realloc_r+0x1e>
 80059de:	4635      	mov	r5, r6
 80059e0:	e7df      	b.n	80059a2 <_realloc_r+0x1e>

080059e2 <_malloc_usable_size_r>:
 80059e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80059e6:	1f18      	subs	r0, r3, #4
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	bfbc      	itt	lt
 80059ec:	580b      	ldrlt	r3, [r1, r0]
 80059ee:	18c0      	addlt	r0, r0, r3
 80059f0:	4770      	bx	lr
	...

080059f4 <_init>:
 80059f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059f6:	bf00      	nop
 80059f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059fa:	bc08      	pop	{r3}
 80059fc:	469e      	mov	lr, r3
 80059fe:	4770      	bx	lr

08005a00 <_fini>:
 8005a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a02:	bf00      	nop
 8005a04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a06:	bc08      	pop	{r3}
 8005a08:	469e      	mov	lr, r3
 8005a0a:	4770      	bx	lr
