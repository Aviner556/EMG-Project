
Main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000061bc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08006344  08006344  00016344  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006408  08006408  000200a8  2**0
                  CONTENTS
  4 .ARM          00000008  08006408  08006408  00016408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006410  08006410  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006410  08006410  00016410  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006414  08006414  00016414  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  08006418  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001dc  200000a8  080064c0  000200a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000284  080064c0  00020284  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000143e6  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c1f  00000000  00000000  000344be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001110  00000000  00000000  000370e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fd8  00000000  00000000  000381f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000286e3  00000000  00000000  000391c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014a7e  00000000  00000000  000618ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f5fbf  00000000  00000000  00076329  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016c2e8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c90  00000000  00000000  0016c338  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000a8 	.word	0x200000a8
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800632c 	.word	0x0800632c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000ac 	.word	0x200000ac
 80001c4:	0800632c 	.word	0x0800632c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <ledInit>:
#include "LED.h"

void ledInit(LED* led,GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b084      	sub	sp, #16
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	60f8      	str	r0, [r7, #12]
 80004d4:	60b9      	str	r1, [r7, #8]
 80004d6:	4613      	mov	r3, r2
 80004d8:	80fb      	strh	r3, [r7, #6]
	led ->state = STATE_LED_OFF;
 80004da:	68fb      	ldr	r3, [r7, #12]
 80004dc:	2200      	movs	r2, #0
 80004de:	701a      	strb	r2, [r3, #0]
	led ->counter = 0;
 80004e0:	68fb      	ldr	r3, [r7, #12]
 80004e2:	2200      	movs	r2, #0
 80004e4:	60da      	str	r2, [r3, #12]
	led ->GPIOx = GPIOx;
 80004e6:	68fb      	ldr	r3, [r7, #12]
 80004e8:	68ba      	ldr	r2, [r7, #8]
 80004ea:	605a      	str	r2, [r3, #4]
	led ->GPIO_Pin = GPIO_Pin;
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	88fa      	ldrh	r2, [r7, #6]
 80004f0:	811a      	strh	r2, [r3, #8]
	led ->maxPeriod = 0;
 80004f2:	68fb      	ldr	r3, [r7, #12]
 80004f4:	2200      	movs	r2, #0
 80004f6:	611a      	str	r2, [r3, #16]
	HAL_GPIO_WritePin(led ->GPIOx, led ->GPIO_Pin, 0);
 80004f8:	68fb      	ldr	r3, [r7, #12]
 80004fa:	6858      	ldr	r0, [r3, #4]
 80004fc:	68fb      	ldr	r3, [r7, #12]
 80004fe:	891b      	ldrh	r3, [r3, #8]
 8000500:	2200      	movs	r2, #0
 8000502:	4619      	mov	r1, r3
 8000504:	f001 fa2e 	bl	8001964 <HAL_GPIO_WritePin>
}
 8000508:	bf00      	nop
 800050a:	3710      	adds	r7, #16
 800050c:	46bd      	mov	sp, r7
 800050e:	bd80      	pop	{r7, pc}

08000510 <ledOn>:

void ledOn(LED* led)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b082      	sub	sp, #8
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
	led ->state = STATE_LED_ON;
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	2201      	movs	r2, #1
 800051c:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(led ->GPIOx, led ->GPIO_Pin, 1);
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	6858      	ldr	r0, [r3, #4]
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	891b      	ldrh	r3, [r3, #8]
 8000526:	2201      	movs	r2, #1
 8000528:	4619      	mov	r1, r3
 800052a:	f001 fa1b 	bl	8001964 <HAL_GPIO_WritePin>
}
 800052e:	bf00      	nop
 8000530:	3708      	adds	r7, #8
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}

08000536 <ledOff>:

void ledOff(LED* led)
{
 8000536:	b580      	push	{r7, lr}
 8000538:	b082      	sub	sp, #8
 800053a:	af00      	add	r7, sp, #0
 800053c:	6078      	str	r0, [r7, #4]
	led ->state = STATE_LED_OFF;
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	2200      	movs	r2, #0
 8000542:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(led ->GPIOx, led ->GPIO_Pin, 0);
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	6858      	ldr	r0, [r3, #4]
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	891b      	ldrh	r3, [r3, #8]
 800054c:	2200      	movs	r2, #0
 800054e:	4619      	mov	r1, r3
 8000550:	f001 fa08 	bl	8001964 <HAL_GPIO_WritePin>
}
 8000554:	bf00      	nop
 8000556:	3708      	adds	r7, #8
 8000558:	46bd      	mov	sp, r7
 800055a:	bd80      	pop	{r7, pc}

0800055c <ledOnTimerInterrupt>:
	led ->state = STATE_LED_BLINK;
	led ->maxPeriod = maxPeriod;
}

void ledOnTimerInterrupt(LED* led)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b082      	sub	sp, #8
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
	if(led ->state == STATE_LED_BLINK){
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	2b02      	cmp	r3, #2
 800056a:	d115      	bne.n	8000598 <ledOnTimerInterrupt+0x3c>
		led ->counter++;
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	68db      	ldr	r3, [r3, #12]
 8000570:	1c5a      	adds	r2, r3, #1
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	60da      	str	r2, [r3, #12]
		if(led ->counter >= led ->maxPeriod){
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	68da      	ldr	r2, [r3, #12]
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	691b      	ldr	r3, [r3, #16]
 800057e:	429a      	cmp	r2, r3
 8000580:	db0a      	blt.n	8000598 <ledOnTimerInterrupt+0x3c>
			HAL_GPIO_TogglePin(led ->GPIOx, led ->GPIO_Pin);
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	685a      	ldr	r2, [r3, #4]
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	891b      	ldrh	r3, [r3, #8]
 800058a:	4619      	mov	r1, r3
 800058c:	4610      	mov	r0, r2
 800058e:	f001 fa01 	bl	8001994 <HAL_GPIO_TogglePin>
			led ->counter = 0;
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	2200      	movs	r2, #0
 8000596:	60da      	str	r2, [r3, #12]
		}
	}
}
 8000598:	bf00      	nop
 800059a:	3708      	adds	r7, #8
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}

080005a0 <buttInit>:
#include "LED.h"

int delayTik = 0;

void buttInit(BUTTON* butt,GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80005a0:	b480      	push	{r7}
 80005a2:	b085      	sub	sp, #20
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	60f8      	str	r0, [r7, #12]
 80005a8:	60b9      	str	r1, [r7, #8]
 80005aa:	4613      	mov	r3, r2
 80005ac:	80fb      	strh	r3, [r7, #6]
	butt->butt_state = STATE_NONE;
 80005ae:	68fb      	ldr	r3, [r7, #12]
 80005b0:	2200      	movs	r2, #0
 80005b2:	701a      	strb	r2, [r3, #0]
	butt->tikOn = 0;
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	2200      	movs	r2, #0
 80005b8:	60da      	str	r2, [r3, #12]
	butt->tikOff = 0;
 80005ba:	68fb      	ldr	r3, [r7, #12]
 80005bc:	2200      	movs	r2, #0
 80005be:	611a      	str	r2, [r3, #16]
	butt->prevOff = 0;
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	2200      	movs	r2, #0
 80005c4:	615a      	str	r2, [r3, #20]
	butt->countTik = 0;
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	2200      	movs	r2, #0
 80005ca:	619a      	str	r2, [r3, #24]
	butt->GPIO_Pin = GPIO_Pin;
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	88fa      	ldrh	r2, [r7, #6]
 80005d0:	811a      	strh	r2, [r3, #8]
	butt->GPIOx = GPIOx;
 80005d2:	68fb      	ldr	r3, [r7, #12]
 80005d4:	68ba      	ldr	r2, [r7, #8]
 80005d6:	605a      	str	r2, [r3, #4]
}
 80005d8:	bf00      	nop
 80005da:	3714      	adds	r7, #20
 80005dc:	46bd      	mov	sp, r7
 80005de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e2:	4770      	bx	lr

080005e4 <buttonInterrupt>:

void buttonInterrupt(BUTTON* butt)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
	if(HAL_GPIO_ReadPin(butt->GPIOx, butt->GPIO_Pin) == 0){
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	685a      	ldr	r2, [r3, #4]
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	891b      	ldrh	r3, [r3, #8]
 80005f4:	4619      	mov	r1, r3
 80005f6:	4610      	mov	r0, r2
 80005f8:	f001 f99c 	bl	8001934 <HAL_GPIO_ReadPin>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d106      	bne.n	8000610 <buttonInterrupt+0x2c>
		butt->tikOn = HAL_GetTick();
 8000602:	f000 fe51 	bl	80012a8 <HAL_GetTick>
 8000606:	4603      	mov	r3, r0
 8000608:	461a      	mov	r2, r3
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	60da      	str	r2, [r3, #12]
 800060e:	e014      	b.n	800063a <buttonInterrupt+0x56>
	}
	else if(HAL_GPIO_ReadPin(butt->GPIOx, butt->GPIO_Pin) == 1){
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	685a      	ldr	r2, [r3, #4]
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	891b      	ldrh	r3, [r3, #8]
 8000618:	4619      	mov	r1, r3
 800061a:	4610      	mov	r0, r2
 800061c:	f001 f98a 	bl	8001934 <HAL_GPIO_ReadPin>
 8000620:	4603      	mov	r3, r0
 8000622:	2b01      	cmp	r3, #1
 8000624:	d109      	bne.n	800063a <buttonInterrupt+0x56>
		butt->prevOff = butt->tikOff;
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	691a      	ldr	r2, [r3, #16]
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	615a      	str	r2, [r3, #20]
		butt->tikOff = HAL_GetTick();
 800062e:	f000 fe3b 	bl	80012a8 <HAL_GetTick>
 8000632:	4603      	mov	r3, r0
 8000634:	461a      	mov	r2, r3
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	611a      	str	r2, [r3, #16]
	}
	if((butt->tikOff - butt->tikOn) > 500){
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	691a      	ldr	r2, [r3, #16]
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	68db      	ldr	r3, [r3, #12]
 8000642:	1ad3      	subs	r3, r2, r3
 8000644:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000648:	dd06      	ble.n	8000658 <buttonInterrupt+0x74>
		butt->butt_state = STATE_LONG;
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	2202      	movs	r2, #2
 800064e:	701a      	strb	r2, [r3, #0]
		printf("long\r\n");
 8000650:	480d      	ldr	r0, [pc, #52]	; (8000688 <buttonInterrupt+0xa4>)
 8000652:	f005 f9db 	bl	8005a0c <puts>
		else{
			butt->butt_state = STATE_SHORT;
			printf("short\r\n");
		}
	}
}
 8000656:	e013      	b.n	8000680 <buttonInterrupt+0x9c>
		if((butt->tikOn - butt->prevOff) <= 200){
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	68da      	ldr	r2, [r3, #12]
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	695b      	ldr	r3, [r3, #20]
 8000660:	1ad3      	subs	r3, r2, r3
 8000662:	2bc8      	cmp	r3, #200	; 0xc8
 8000664:	dc06      	bgt.n	8000674 <buttonInterrupt+0x90>
			butt->butt_state = STATE_DOUBLE;
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	2203      	movs	r2, #3
 800066a:	701a      	strb	r2, [r3, #0]
			printf("double\r\n");
 800066c:	4807      	ldr	r0, [pc, #28]	; (800068c <buttonInterrupt+0xa8>)
 800066e:	f005 f9cd 	bl	8005a0c <puts>
}
 8000672:	e005      	b.n	8000680 <buttonInterrupt+0x9c>
			butt->butt_state = STATE_SHORT;
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	2201      	movs	r2, #1
 8000678:	701a      	strb	r2, [r3, #0]
			printf("short\r\n");
 800067a:	4805      	ldr	r0, [pc, #20]	; (8000690 <buttonInterrupt+0xac>)
 800067c:	f005 f9c6 	bl	8005a0c <puts>
}
 8000680:	bf00      	nop
 8000682:	3708      	adds	r7, #8
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	08006344 	.word	0x08006344
 800068c:	0800634c 	.word	0x0800634c
 8000690:	08006354 	.word	0x08006354

08000694 <buzzerInit>:

int note[] = {390, 340, 303, 286, 255, 227, 202};
int lenght[] = {300, 300, 300, 300, 300, 300, 500};

void buzzerInit(BUZZER* buzz)
{
 8000694:	b480      	push	{r7}
 8000696:	b083      	sub	sp, #12
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
	buzz ->state = STATE_MUSIC_OFF;
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	2201      	movs	r2, #1
 80006a0:	701a      	strb	r2, [r3, #0]
	buzz ->size = sizeof(note)/sizeof(note[0]);
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	2207      	movs	r2, #7
 80006a6:	605a      	str	r2, [r3, #4]
	buzz ->counter = 0;
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	2200      	movs	r2, #0
 80006ac:	615a      	str	r2, [r3, #20]
	buzz ->currentNote = 0;
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	2200      	movs	r2, #0
 80006b2:	609a      	str	r2, [r3, #8]
	buzz ->maxCount = lenght[0];
 80006b4:	4b06      	ldr	r3, [pc, #24]	; (80006d0 <buzzerInit+0x3c>)
 80006b6:	681a      	ldr	r2, [r3, #0]
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	611a      	str	r2, [r3, #16]
	buzz ->tone = 1;
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	2201      	movs	r2, #1
 80006c0:	60da      	str	r2, [r3, #12]
}
 80006c2:	bf00      	nop
 80006c4:	370c      	adds	r7, #12
 80006c6:	46bd      	mov	sp, r7
 80006c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006cc:	4770      	bx	lr
 80006ce:	bf00      	nop
 80006d0:	2000001c 	.word	0x2000001c

080006d4 <playNote>:

void playNote(BUZZER* buzz)
{
 80006d4:	b480      	push	{r7}
 80006d6:	b083      	sub	sp, #12
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 80006dc:	4b12      	ldr	r3, [pc, #72]	; (8000728 <playNote+0x54>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	2200      	movs	r2, #0
 80006e2:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_AUTORELOAD(&htim3, note[buzz ->currentNote]);
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	689b      	ldr	r3, [r3, #8]
 80006e8:	4a10      	ldr	r2, [pc, #64]	; (800072c <playNote+0x58>)
 80006ea:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80006ee:	4b0e      	ldr	r3, [pc, #56]	; (8000728 <playNote+0x54>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	62da      	str	r2, [r3, #44]	; 0x2c
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	689b      	ldr	r3, [r3, #8]
 80006f8:	4a0c      	ldr	r2, [pc, #48]	; (800072c <playNote+0x58>)
 80006fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006fe:	461a      	mov	r2, r3
 8000700:	4b09      	ldr	r3, [pc, #36]	; (8000728 <playNote+0x54>)
 8000702:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, (note[buzz ->currentNote])/2);
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	689b      	ldr	r3, [r3, #8]
 8000708:	4a08      	ldr	r2, [pc, #32]	; (800072c <playNote+0x58>)
 800070a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800070e:	0fda      	lsrs	r2, r3, #31
 8000710:	4413      	add	r3, r2
 8000712:	105b      	asrs	r3, r3, #1
 8000714:	461a      	mov	r2, r3
 8000716:	4b04      	ldr	r3, [pc, #16]	; (8000728 <playNote+0x54>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800071c:	bf00      	nop
 800071e:	370c      	adds	r7, #12
 8000720:	46bd      	mov	sp, r7
 8000722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000726:	4770      	bx	lr
 8000728:	200000c4 	.word	0x200000c4
 800072c:	20000000 	.word	0x20000000

08000730 <playNextNote>:

void playNextNote(BUZZER* buzz)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
	buzz ->currentNote++;
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	689b      	ldr	r3, [r3, #8]
 800073c:	1c5a      	adds	r2, r3, #1
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	609a      	str	r2, [r3, #8]
	if(buzz ->currentNote >= buzz ->size){
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	689b      	ldr	r3, [r3, #8]
 8000746:	461a      	mov	r2, r3
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	685b      	ldr	r3, [r3, #4]
 800074c:	429a      	cmp	r2, r3
 800074e:	d302      	bcc.n	8000756 <playNextNote+0x26>
		buzz ->currentNote = 0;
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	2200      	movs	r2, #0
 8000754:	609a      	str	r2, [r3, #8]
	}
	buzz ->maxCount = lenght[buzz ->currentNote];
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	689b      	ldr	r3, [r3, #8]
 800075a:	4a06      	ldr	r2, [pc, #24]	; (8000774 <playNextNote+0x44>)
 800075c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	611a      	str	r2, [r3, #16]

	playNote(buzz);
 8000764:	6878      	ldr	r0, [r7, #4]
 8000766:	f7ff ffb5 	bl	80006d4 <playNote>
}
 800076a:	bf00      	nop
 800076c:	3708      	adds	r7, #8
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	2000001c 	.word	0x2000001c

08000778 <buzzerOnTimerInterrupt>:

void buzzerOnTimerInterrupt(BUZZER* buzz)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
	if(buzz ->state == STATE_MUSIC_ON){
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	2b00      	cmp	r3, #0
 8000786:	d110      	bne.n	80007aa <buzzerOnTimerInterrupt+0x32>
		buzz ->counter++;
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	695b      	ldr	r3, [r3, #20]
 800078c:	1c5a      	adds	r2, r3, #1
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	615a      	str	r2, [r3, #20]
		if(buzz ->counter >= buzz ->maxCount){
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	695a      	ldr	r2, [r3, #20]
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	691b      	ldr	r3, [r3, #16]
 800079a:	429a      	cmp	r2, r3
 800079c:	db05      	blt.n	80007aa <buzzerOnTimerInterrupt+0x32>
			playNextNote(buzz);
 800079e:	6878      	ldr	r0, [r7, #4]
 80007a0:	f7ff ffc6 	bl	8000730 <playNextNote>
			buzz ->counter = 0;
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	2200      	movs	r2, #0
 80007a8:	615a      	str	r2, [r3, #20]
		}
	}
}
 80007aa:	bf00      	nop
 80007ac:	3708      	adds	r7, #8
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}

080007b2 <clockInit>:
#include "clock.h"

void clockInit(CLOCK* clock)
{
 80007b2:	b480      	push	{r7}
 80007b4:	b083      	sub	sp, #12
 80007b6:	af00      	add	r7, sp, #0
 80007b8:	6078      	str	r0, [r7, #4]
	clock ->tik = 0;
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	2200      	movs	r2, #0
 80007be:	601a      	str	r2, [r3, #0]
	clock ->seconds = 0;
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	2200      	movs	r2, #0
 80007c4:	605a      	str	r2, [r3, #4]
	clock ->minutes = 0;
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	2200      	movs	r2, #0
 80007ca:	609a      	str	r2, [r3, #8]
	clock ->hours = 0;
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	2200      	movs	r2, #0
 80007d0:	60da      	str	r2, [r3, #12]
	clock ->days = 0;
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	2200      	movs	r2, #0
 80007d6:	611a      	str	r2, [r3, #16]
}
 80007d8:	bf00      	nop
 80007da:	370c      	adds	r7, #12
 80007dc:	46bd      	mov	sp, r7
 80007de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e2:	4770      	bx	lr

080007e4 <workingTime>:

void workingTime(CLOCK* clock)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
	clock ->tik = HAL_GetTick();
 80007ec:	f000 fd5c 	bl	80012a8 <HAL_GetTick>
 80007f0:	4602      	mov	r2, r0
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	601a      	str	r2, [r3, #0]
	clock ->seconds = clock ->tik/1000;
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	4a13      	ldr	r2, [pc, #76]	; (8000848 <workingTime+0x64>)
 80007fc:	fba2 2303 	umull	r2, r3, r2, r3
 8000800:	099b      	lsrs	r3, r3, #6
 8000802:	461a      	mov	r2, r3
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	605a      	str	r2, [r3, #4]
	clock ->minutes = clock ->tik/60000;
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4a0f      	ldr	r2, [pc, #60]	; (800084c <workingTime+0x68>)
 800080e:	fba2 2303 	umull	r2, r3, r2, r3
 8000812:	0b9b      	lsrs	r3, r3, #14
 8000814:	461a      	mov	r2, r3
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	609a      	str	r2, [r3, #8]
	clock ->hours = clock ->tik/360000;
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	099b      	lsrs	r3, r3, #6
 8000820:	4a0b      	ldr	r2, [pc, #44]	; (8000850 <workingTime+0x6c>)
 8000822:	fba2 2303 	umull	r2, r3, r2, r3
 8000826:	089b      	lsrs	r3, r3, #2
 8000828:	461a      	mov	r2, r3
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	60da      	str	r2, [r3, #12]
	clock ->days = clock ->tik/8640000;
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	4a08      	ldr	r2, [pc, #32]	; (8000854 <workingTime+0x70>)
 8000834:	fba2 2303 	umull	r2, r3, r2, r3
 8000838:	0ddb      	lsrs	r3, r3, #23
 800083a:	461a      	mov	r2, r3
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	611a      	str	r2, [r3, #16]
}
 8000840:	bf00      	nop
 8000842:	3708      	adds	r7, #8
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	10624dd3 	.word	0x10624dd3
 800084c:	45e7b273 	.word	0x45e7b273
 8000850:	002e9a77 	.word	0x002e9a77
 8000854:	f88d2527 	.word	0xf88d2527

08000858 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800085c:	f000 fcb4 	bl	80011c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000860:	f000 f80b 	bl	800087a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000864:	f000 f938 	bl	8000ad8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000868:	f000 f906 	bl	8000a78 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 800086c:	f000 f8ce 	bl	8000a0c <MX_TIM6_Init>
  MX_TIM3_Init();
 8000870:	f000 f854 	bl	800091c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  mainloop();
 8000874:	f000 fa4e 	bl	8000d14 <mainloop>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000878:	e7fe      	b.n	8000878 <main+0x20>

0800087a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800087a:	b580      	push	{r7, lr}
 800087c:	b096      	sub	sp, #88	; 0x58
 800087e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000880:	f107 0314 	add.w	r3, r7, #20
 8000884:	2244      	movs	r2, #68	; 0x44
 8000886:	2100      	movs	r1, #0
 8000888:	4618      	mov	r0, r3
 800088a:	f005 f849 	bl	8005920 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800088e:	463b      	mov	r3, r7
 8000890:	2200      	movs	r2, #0
 8000892:	601a      	str	r2, [r3, #0]
 8000894:	605a      	str	r2, [r3, #4]
 8000896:	609a      	str	r2, [r3, #8]
 8000898:	60da      	str	r2, [r3, #12]
 800089a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800089c:	f44f 7000 	mov.w	r0, #512	; 0x200
 80008a0:	f001 f8b8 	bl	8001a14 <HAL_PWREx_ControlVoltageScaling>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <SystemClock_Config+0x34>
  {
    Error_Handler();
 80008aa:	f000 f9a9 	bl	8000c00 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008ae:	2302      	movs	r3, #2
 80008b0:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008b8:	2310      	movs	r3, #16
 80008ba:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008bc:	2302      	movs	r3, #2
 80008be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008c0:	2302      	movs	r3, #2
 80008c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80008c4:	2301      	movs	r3, #1
 80008c6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80008c8:	230a      	movs	r3, #10
 80008ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80008cc:	2307      	movs	r3, #7
 80008ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80008d0:	2302      	movs	r3, #2
 80008d2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80008d4:	2302      	movs	r3, #2
 80008d6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008d8:	f107 0314 	add.w	r3, r7, #20
 80008dc:	4618      	mov	r0, r3
 80008de:	f001 f8ef 	bl	8001ac0 <HAL_RCC_OscConfig>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <SystemClock_Config+0x72>
  {
    Error_Handler();
 80008e8:	f000 f98a 	bl	8000c00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ec:	230f      	movs	r3, #15
 80008ee:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008f0:	2303      	movs	r3, #3
 80008f2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008f4:	2300      	movs	r3, #0
 80008f6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008f8:	2300      	movs	r3, #0
 80008fa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008fc:	2300      	movs	r3, #0
 80008fe:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000900:	463b      	mov	r3, r7
 8000902:	2104      	movs	r1, #4
 8000904:	4618      	mov	r0, r3
 8000906:	f001 fcb7 	bl	8002278 <HAL_RCC_ClockConfig>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000910:	f000 f976 	bl	8000c00 <Error_Handler>
  }
}
 8000914:	bf00      	nop
 8000916:	3758      	adds	r7, #88	; 0x58
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}

0800091c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b08e      	sub	sp, #56	; 0x38
 8000920:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000922:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000926:	2200      	movs	r2, #0
 8000928:	601a      	str	r2, [r3, #0]
 800092a:	605a      	str	r2, [r3, #4]
 800092c:	609a      	str	r2, [r3, #8]
 800092e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000930:	f107 031c 	add.w	r3, r7, #28
 8000934:	2200      	movs	r2, #0
 8000936:	601a      	str	r2, [r3, #0]
 8000938:	605a      	str	r2, [r3, #4]
 800093a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800093c:	463b      	mov	r3, r7
 800093e:	2200      	movs	r2, #0
 8000940:	601a      	str	r2, [r3, #0]
 8000942:	605a      	str	r2, [r3, #4]
 8000944:	609a      	str	r2, [r3, #8]
 8000946:	60da      	str	r2, [r3, #12]
 8000948:	611a      	str	r2, [r3, #16]
 800094a:	615a      	str	r2, [r3, #20]
 800094c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800094e:	4b2d      	ldr	r3, [pc, #180]	; (8000a04 <MX_TIM3_Init+0xe8>)
 8000950:	4a2d      	ldr	r2, [pc, #180]	; (8000a08 <MX_TIM3_Init+0xec>)
 8000952:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 799;
 8000954:	4b2b      	ldr	r3, [pc, #172]	; (8000a04 <MX_TIM3_Init+0xe8>)
 8000956:	f240 321f 	movw	r2, #799	; 0x31f
 800095a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800095c:	4b29      	ldr	r3, [pc, #164]	; (8000a04 <MX_TIM3_Init+0xe8>)
 800095e:	2200      	movs	r2, #0
 8000960:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8000962:	4b28      	ldr	r3, [pc, #160]	; (8000a04 <MX_TIM3_Init+0xe8>)
 8000964:	2264      	movs	r2, #100	; 0x64
 8000966:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000968:	4b26      	ldr	r3, [pc, #152]	; (8000a04 <MX_TIM3_Init+0xe8>)
 800096a:	2200      	movs	r2, #0
 800096c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800096e:	4b25      	ldr	r3, [pc, #148]	; (8000a04 <MX_TIM3_Init+0xe8>)
 8000970:	2200      	movs	r2, #0
 8000972:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000974:	4823      	ldr	r0, [pc, #140]	; (8000a04 <MX_TIM3_Init+0xe8>)
 8000976:	f002 fb5f 	bl	8003038 <HAL_TIM_Base_Init>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000980:	f000 f93e 	bl	8000c00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000984:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000988:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800098a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800098e:	4619      	mov	r1, r3
 8000990:	481c      	ldr	r0, [pc, #112]	; (8000a04 <MX_TIM3_Init+0xe8>)
 8000992:	f003 f8db 	bl	8003b4c <HAL_TIM_ConfigClockSource>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 800099c:	f000 f930 	bl	8000c00 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80009a0:	4818      	ldr	r0, [pc, #96]	; (8000a04 <MX_TIM3_Init+0xe8>)
 80009a2:	f002 fca1 	bl	80032e8 <HAL_TIM_PWM_Init>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80009ac:	f000 f928 	bl	8000c00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009b0:	2300      	movs	r3, #0
 80009b2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009b4:	2300      	movs	r3, #0
 80009b6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80009b8:	f107 031c 	add.w	r3, r7, #28
 80009bc:	4619      	mov	r1, r3
 80009be:	4811      	ldr	r0, [pc, #68]	; (8000a04 <MX_TIM3_Init+0xe8>)
 80009c0:	f003 fde6 	bl	8004590 <HAL_TIMEx_MasterConfigSynchronization>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80009ca:	f000 f919 	bl	8000c00 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009ce:	2360      	movs	r3, #96	; 0x60
 80009d0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 50;
 80009d2:	2332      	movs	r3, #50	; 0x32
 80009d4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009d6:	2300      	movs	r3, #0
 80009d8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009da:	2300      	movs	r3, #0
 80009dc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009de:	463b      	mov	r3, r7
 80009e0:	2200      	movs	r2, #0
 80009e2:	4619      	mov	r1, r3
 80009e4:	4807      	ldr	r0, [pc, #28]	; (8000a04 <MX_TIM3_Init+0xe8>)
 80009e6:	f002 ff9d 	bl	8003924 <HAL_TIM_PWM_ConfigChannel>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80009f0:	f000 f906 	bl	8000c00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80009f4:	4803      	ldr	r0, [pc, #12]	; (8000a04 <MX_TIM3_Init+0xe8>)
 80009f6:	f000 fa2b 	bl	8000e50 <HAL_TIM_MspPostInit>

}
 80009fa:	bf00      	nop
 80009fc:	3738      	adds	r7, #56	; 0x38
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	200000c4 	.word	0x200000c4
 8000a08:	40000400 	.word	0x40000400

08000a0c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b084      	sub	sp, #16
 8000a10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a12:	1d3b      	adds	r3, r7, #4
 8000a14:	2200      	movs	r2, #0
 8000a16:	601a      	str	r2, [r3, #0]
 8000a18:	605a      	str	r2, [r3, #4]
 8000a1a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000a1c:	4b14      	ldr	r3, [pc, #80]	; (8000a70 <MX_TIM6_Init+0x64>)
 8000a1e:	4a15      	ldr	r2, [pc, #84]	; (8000a74 <MX_TIM6_Init+0x68>)
 8000a20:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7999;
 8000a22:	4b13      	ldr	r3, [pc, #76]	; (8000a70 <MX_TIM6_Init+0x64>)
 8000a24:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000a28:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a2a:	4b11      	ldr	r3, [pc, #68]	; (8000a70 <MX_TIM6_Init+0x64>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10;
 8000a30:	4b0f      	ldr	r3, [pc, #60]	; (8000a70 <MX_TIM6_Init+0x64>)
 8000a32:	220a      	movs	r2, #10
 8000a34:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a36:	4b0e      	ldr	r3, [pc, #56]	; (8000a70 <MX_TIM6_Init+0x64>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000a3c:	480c      	ldr	r0, [pc, #48]	; (8000a70 <MX_TIM6_Init+0x64>)
 8000a3e:	f002 fafb 	bl	8003038 <HAL_TIM_Base_Init>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000a48:	f000 f8da 	bl	8000c00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a50:	2300      	movs	r3, #0
 8000a52:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000a54:	1d3b      	adds	r3, r7, #4
 8000a56:	4619      	mov	r1, r3
 8000a58:	4805      	ldr	r0, [pc, #20]	; (8000a70 <MX_TIM6_Init+0x64>)
 8000a5a:	f003 fd99 	bl	8004590 <HAL_TIMEx_MasterConfigSynchronization>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000a64:	f000 f8cc 	bl	8000c00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000a68:	bf00      	nop
 8000a6a:	3710      	adds	r7, #16
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	20000110 	.word	0x20000110
 8000a74:	40001000 	.word	0x40001000

08000a78 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a7c:	4b14      	ldr	r3, [pc, #80]	; (8000ad0 <MX_USART2_UART_Init+0x58>)
 8000a7e:	4a15      	ldr	r2, [pc, #84]	; (8000ad4 <MX_USART2_UART_Init+0x5c>)
 8000a80:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a82:	4b13      	ldr	r3, [pc, #76]	; (8000ad0 <MX_USART2_UART_Init+0x58>)
 8000a84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a88:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a8a:	4b11      	ldr	r3, [pc, #68]	; (8000ad0 <MX_USART2_UART_Init+0x58>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a90:	4b0f      	ldr	r3, [pc, #60]	; (8000ad0 <MX_USART2_UART_Init+0x58>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a96:	4b0e      	ldr	r3, [pc, #56]	; (8000ad0 <MX_USART2_UART_Init+0x58>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a9c:	4b0c      	ldr	r3, [pc, #48]	; (8000ad0 <MX_USART2_UART_Init+0x58>)
 8000a9e:	220c      	movs	r2, #12
 8000aa0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aa2:	4b0b      	ldr	r3, [pc, #44]	; (8000ad0 <MX_USART2_UART_Init+0x58>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000aa8:	4b09      	ldr	r3, [pc, #36]	; (8000ad0 <MX_USART2_UART_Init+0x58>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000aae:	4b08      	ldr	r3, [pc, #32]	; (8000ad0 <MX_USART2_UART_Init+0x58>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ab4:	4b06      	ldr	r3, [pc, #24]	; (8000ad0 <MX_USART2_UART_Init+0x58>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000aba:	4805      	ldr	r0, [pc, #20]	; (8000ad0 <MX_USART2_UART_Init+0x58>)
 8000abc:	f003 fe0e 	bl	80046dc <HAL_UART_Init>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000ac6:	f000 f89b 	bl	8000c00 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000aca:	bf00      	nop
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	2000015c 	.word	0x2000015c
 8000ad4:	40004400 	.word	0x40004400

08000ad8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b08a      	sub	sp, #40	; 0x28
 8000adc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ade:	f107 0314 	add.w	r3, r7, #20
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	601a      	str	r2, [r3, #0]
 8000ae6:	605a      	str	r2, [r3, #4]
 8000ae8:	609a      	str	r2, [r3, #8]
 8000aea:	60da      	str	r2, [r3, #12]
 8000aec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aee:	4b41      	ldr	r3, [pc, #260]	; (8000bf4 <MX_GPIO_Init+0x11c>)
 8000af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000af2:	4a40      	ldr	r2, [pc, #256]	; (8000bf4 <MX_GPIO_Init+0x11c>)
 8000af4:	f043 0304 	orr.w	r3, r3, #4
 8000af8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000afa:	4b3e      	ldr	r3, [pc, #248]	; (8000bf4 <MX_GPIO_Init+0x11c>)
 8000afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000afe:	f003 0304 	and.w	r3, r3, #4
 8000b02:	613b      	str	r3, [r7, #16]
 8000b04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b06:	4b3b      	ldr	r3, [pc, #236]	; (8000bf4 <MX_GPIO_Init+0x11c>)
 8000b08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b0a:	4a3a      	ldr	r2, [pc, #232]	; (8000bf4 <MX_GPIO_Init+0x11c>)
 8000b0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b12:	4b38      	ldr	r3, [pc, #224]	; (8000bf4 <MX_GPIO_Init+0x11c>)
 8000b14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b1a:	60fb      	str	r3, [r7, #12]
 8000b1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b1e:	4b35      	ldr	r3, [pc, #212]	; (8000bf4 <MX_GPIO_Init+0x11c>)
 8000b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b22:	4a34      	ldr	r2, [pc, #208]	; (8000bf4 <MX_GPIO_Init+0x11c>)
 8000b24:	f043 0301 	orr.w	r3, r3, #1
 8000b28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b2a:	4b32      	ldr	r3, [pc, #200]	; (8000bf4 <MX_GPIO_Init+0x11c>)
 8000b2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b2e:	f003 0301 	and.w	r3, r3, #1
 8000b32:	60bb      	str	r3, [r7, #8]
 8000b34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b36:	4b2f      	ldr	r3, [pc, #188]	; (8000bf4 <MX_GPIO_Init+0x11c>)
 8000b38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b3a:	4a2e      	ldr	r2, [pc, #184]	; (8000bf4 <MX_GPIO_Init+0x11c>)
 8000b3c:	f043 0302 	orr.w	r3, r3, #2
 8000b40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b42:	4b2c      	ldr	r3, [pc, #176]	; (8000bf4 <MX_GPIO_Init+0x11c>)
 8000b44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b46:	f003 0302 	and.w	r3, r3, #2
 8000b4a:	607b      	str	r3, [r7, #4]
 8000b4c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000b4e:	2200      	movs	r2, #0
 8000b50:	2160      	movs	r1, #96	; 0x60
 8000b52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b56:	f000 ff05 	bl	8001964 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b5a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b60:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000b64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b66:	2300      	movs	r3, #0
 8000b68:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b6a:	f107 0314 	add.w	r3, r7, #20
 8000b6e:	4619      	mov	r1, r3
 8000b70:	4821      	ldr	r0, [pc, #132]	; (8000bf8 <MX_GPIO_Init+0x120>)
 8000b72:	f000 fd35 	bl	80015e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin;
 8000b76:	2360      	movs	r3, #96	; 0x60
 8000b78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b82:	2300      	movs	r3, #0
 8000b84:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b86:	f107 0314 	add.w	r3, r7, #20
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b90:	f000 fd26 	bl	80015e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B2_Pin */
  GPIO_InitStruct.Pin = B2_Pin;
 8000b94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000b9a:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000b9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B2_GPIO_Port, &GPIO_InitStruct);
 8000ba4:	f107 0314 	add.w	r3, r7, #20
 8000ba8:	4619      	mov	r1, r3
 8000baa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bae:	f000 fd17 	bl	80015e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B3_Pin */
  GPIO_InitStruct.Pin = B3_Pin;
 8000bb2:	2308      	movs	r3, #8
 8000bb4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000bb6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000bba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B3_GPIO_Port, &GPIO_InitStruct);
 8000bc0:	f107 0314 	add.w	r3, r7, #20
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	480d      	ldr	r0, [pc, #52]	; (8000bfc <MX_GPIO_Init+0x124>)
 8000bc8:	f000 fd0a 	bl	80015e0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000bcc:	2200      	movs	r2, #0
 8000bce:	2100      	movs	r1, #0
 8000bd0:	2009      	movs	r0, #9
 8000bd2:	f000 fc50 	bl	8001476 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000bd6:	2009      	movs	r0, #9
 8000bd8:	f000 fc69 	bl	80014ae <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000bdc:	2200      	movs	r2, #0
 8000bde:	2100      	movs	r1, #0
 8000be0:	2028      	movs	r0, #40	; 0x28
 8000be2:	f000 fc48 	bl	8001476 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000be6:	2028      	movs	r0, #40	; 0x28
 8000be8:	f000 fc61 	bl	80014ae <HAL_NVIC_EnableIRQ>

}
 8000bec:	bf00      	nop
 8000bee:	3728      	adds	r7, #40	; 0x28
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	40021000 	.word	0x40021000
 8000bf8:	48000800 	.word	0x48000800
 8000bfc:	48000400 	.word	0x48000400

08000c00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c04:	b672      	cpsid	i
}
 8000c06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c08:	e7fe      	b.n	8000c08 <Error_Handler+0x8>
	...

08000c0c <_write>:
#include "clock.h"

extern UART_HandleTypeDef huart2;

int _write(int fd, char* ptr, int len)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b084      	sub	sp, #16
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	60f8      	str	r0, [r7, #12]
 8000c14:	60b9      	str	r1, [r7, #8]
 8000c16:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	b29a      	uxth	r2, r3
 8000c1c:	f04f 33ff 	mov.w	r3, #4294967295
 8000c20:	68b9      	ldr	r1, [r7, #8]
 8000c22:	4804      	ldr	r0, [pc, #16]	; (8000c34 <_write+0x28>)
 8000c24:	f003 fda8 	bl	8004778 <HAL_UART_Transmit>
	return len;
 8000c28:	687b      	ldr	r3, [r7, #4]
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	3710      	adds	r7, #16
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	2000015c 	.word	0x2000015c

08000c38 <HAL_TIM_PeriodElapsedCallback>:
extern TIM_HandleTypeDef htim6;
extern TIM_HandleTypeDef htim3;


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
	if(htim == &htim6){
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	4a09      	ldr	r2, [pc, #36]	; (8000c68 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000c44:	4293      	cmp	r3, r2
 8000c46:	d10b      	bne.n	8000c60 <HAL_TIM_PeriodElapsedCallback+0x28>
	/////////// clock /////////////////////////////////////////////////////////////////
		workingTime(&clc1);
 8000c48:	4808      	ldr	r0, [pc, #32]	; (8000c6c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000c4a:	f7ff fdcb 	bl	80007e4 <workingTime>

	/////////// led ///////////////////////////////////////////////////////////////////
		ledOnTimerInterrupt(&blue);
 8000c4e:	4808      	ldr	r0, [pc, #32]	; (8000c70 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000c50:	f7ff fc84 	bl	800055c <ledOnTimerInterrupt>
		ledOnTimerInterrupt(&red);
 8000c54:	4807      	ldr	r0, [pc, #28]	; (8000c74 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000c56:	f7ff fc81 	bl	800055c <ledOnTimerInterrupt>

	/////////// buzzer ////////////////////////////////////////////////////////////////
		buzzerOnTimerInterrupt(&buzzer);
 8000c5a:	4807      	ldr	r0, [pc, #28]	; (8000c78 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000c5c:	f7ff fd8c 	bl	8000778 <buzzerOnTimerInterrupt>
	}
}
 8000c60:	bf00      	nop
 8000c62:	3708      	adds	r7, #8
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	20000110 	.word	0x20000110
 8000c6c:	20000258 	.word	0x20000258
 8000c70:	200001e0 	.word	0x200001e0
 8000c74:	200001f4 	.word	0x200001f4
 8000c78:	20000240 	.word	0x20000240

08000c7c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	4603      	mov	r3, r0
 8000c84:	80fb      	strh	r3, [r7, #6]
	///////////////////////////////////////////////////////////////////////////////////
	////buttons
	///////////////////////////////////////////////////////////////////////////////////
	if(GPIO_Pin == B2_Pin){
 8000c86:	88fb      	ldrh	r3, [r7, #6]
 8000c88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c8c:	d103      	bne.n	8000c96 <HAL_GPIO_EXTI_Callback+0x1a>
		buttonInterrupt(&B2);
 8000c8e:	481c      	ldr	r0, [pc, #112]	; (8000d00 <HAL_GPIO_EXTI_Callback+0x84>)
 8000c90:	f7ff fca8 	bl	80005e4 <buttonInterrupt>
 8000c94:	e014      	b.n	8000cc0 <HAL_GPIO_EXTI_Callback+0x44>
	}
	else{
		if(blue.state == STATE_LED_OFF && red.state == STATE_LED_OFF){
 8000c96:	4b1b      	ldr	r3, [pc, #108]	; (8000d04 <HAL_GPIO_EXTI_Callback+0x88>)
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d10a      	bne.n	8000cb4 <HAL_GPIO_EXTI_Callback+0x38>
 8000c9e:	4b1a      	ldr	r3, [pc, #104]	; (8000d08 <HAL_GPIO_EXTI_Callback+0x8c>)
 8000ca0:	781b      	ldrb	r3, [r3, #0]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d106      	bne.n	8000cb4 <HAL_GPIO_EXTI_Callback+0x38>
			ledOn(&blue);
 8000ca6:	4817      	ldr	r0, [pc, #92]	; (8000d04 <HAL_GPIO_EXTI_Callback+0x88>)
 8000ca8:	f7ff fc32 	bl	8000510 <ledOn>
			ledOn(&red);
 8000cac:	4816      	ldr	r0, [pc, #88]	; (8000d08 <HAL_GPIO_EXTI_Callback+0x8c>)
 8000cae:	f7ff fc2f 	bl	8000510 <ledOn>
 8000cb2:	e005      	b.n	8000cc0 <HAL_GPIO_EXTI_Callback+0x44>
		}
		else{
			ledOff(&blue);
 8000cb4:	4813      	ldr	r0, [pc, #76]	; (8000d04 <HAL_GPIO_EXTI_Callback+0x88>)
 8000cb6:	f7ff fc3e 	bl	8000536 <ledOff>
			ledOff(&red);
 8000cba:	4813      	ldr	r0, [pc, #76]	; (8000d08 <HAL_GPIO_EXTI_Callback+0x8c>)
 8000cbc:	f7ff fc3b 	bl	8000536 <ledOff>
		}
	}
	///////////////////////////////////////////////////////////////////////////////////
	////buzzer
	///////////////////////////////////////////////////////////////////////////////////
	if(buzzer.state == STATE_MUSIC_OFF){
 8000cc0:	4b12      	ldr	r3, [pc, #72]	; (8000d0c <HAL_GPIO_EXTI_Callback+0x90>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	2b01      	cmp	r3, #1
 8000cc6:	d10d      	bne.n	8000ce4 <HAL_GPIO_EXTI_Callback+0x68>
		HAL_TIM_Base_Start(&htim3);
 8000cc8:	4811      	ldr	r0, [pc, #68]	; (8000d10 <HAL_GPIO_EXTI_Callback+0x94>)
 8000cca:	f002 fa0d 	bl	80030e8 <HAL_TIM_Base_Start>
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000cce:	2100      	movs	r1, #0
 8000cd0:	480f      	ldr	r0, [pc, #60]	; (8000d10 <HAL_GPIO_EXTI_Callback+0x94>)
 8000cd2:	f002 fb6b 	bl	80033ac <HAL_TIM_PWM_Start>
		buzzer.state = STATE_MUSIC_ON;
 8000cd6:	4b0d      	ldr	r3, [pc, #52]	; (8000d0c <HAL_GPIO_EXTI_Callback+0x90>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	701a      	strb	r2, [r3, #0]
		playNote(&buzzer);
 8000cdc:	480b      	ldr	r0, [pc, #44]	; (8000d0c <HAL_GPIO_EXTI_Callback+0x90>)
 8000cde:	f7ff fcf9 	bl	80006d4 <playNote>
	{
		HAL_TIM_Base_Stop(&htim3);
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
		buzzer.state = STATE_MUSIC_OFF;
	}
}
 8000ce2:	e009      	b.n	8000cf8 <HAL_GPIO_EXTI_Callback+0x7c>
		HAL_TIM_Base_Stop(&htim3);
 8000ce4:	480a      	ldr	r0, [pc, #40]	; (8000d10 <HAL_GPIO_EXTI_Callback+0x94>)
 8000ce6:	f002 fa67 	bl	80031b8 <HAL_TIM_Base_Stop>
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8000cea:	2100      	movs	r1, #0
 8000cec:	4808      	ldr	r0, [pc, #32]	; (8000d10 <HAL_GPIO_EXTI_Callback+0x94>)
 8000cee:	f002 fc63 	bl	80035b8 <HAL_TIM_PWM_Stop>
		buzzer.state = STATE_MUSIC_OFF;
 8000cf2:	4b06      	ldr	r3, [pc, #24]	; (8000d0c <HAL_GPIO_EXTI_Callback+0x90>)
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	701a      	strb	r2, [r3, #0]
}
 8000cf8:	bf00      	nop
 8000cfa:	3708      	adds	r7, #8
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	20000224 	.word	0x20000224
 8000d04:	200001e0 	.word	0x200001e0
 8000d08:	200001f4 	.word	0x200001f4
 8000d0c:	20000240 	.word	0x20000240
 8000d10:	200000c4 	.word	0x200000c4

08000d14 <mainloop>:



void mainloop()
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
	ledInit(&blue,LD2_GPIO_Port, LD2_Pin);
 8000d18:	2220      	movs	r2, #32
 8000d1a:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000d1e:	4811      	ldr	r0, [pc, #68]	; (8000d64 <mainloop+0x50>)
 8000d20:	f7ff fbd4 	bl	80004cc <ledInit>
	ledInit(&red,LD3_GPIO_Port, LD3_Pin);
 8000d24:	2240      	movs	r2, #64	; 0x40
 8000d26:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000d2a:	480f      	ldr	r0, [pc, #60]	; (8000d68 <mainloop+0x54>)
 8000d2c:	f7ff fbce 	bl	80004cc <ledInit>

	buttInit(&B2,B2_GPIO_Port,B2_Pin);
 8000d30:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d34:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000d38:	480c      	ldr	r0, [pc, #48]	; (8000d6c <mainloop+0x58>)
 8000d3a:	f7ff fc31 	bl	80005a0 <buttInit>
	buttInit(&B3,B3_GPIO_Port,B3_Pin);
 8000d3e:	2208      	movs	r2, #8
 8000d40:	490b      	ldr	r1, [pc, #44]	; (8000d70 <mainloop+0x5c>)
 8000d42:	480c      	ldr	r0, [pc, #48]	; (8000d74 <mainloop+0x60>)
 8000d44:	f7ff fc2c 	bl	80005a0 <buttInit>

	clockInit(&clc1);
 8000d48:	480b      	ldr	r0, [pc, #44]	; (8000d78 <mainloop+0x64>)
 8000d4a:	f7ff fd32 	bl	80007b2 <clockInit>
	buzzerInit(&buzzer);
 8000d4e:	480b      	ldr	r0, [pc, #44]	; (8000d7c <mainloop+0x68>)
 8000d50:	f7ff fca0 	bl	8000694 <buzzerInit>

	__HAL_TIM_SET_COUNTER(&htim6, 0);
 8000d54:	4b0a      	ldr	r3, [pc, #40]	; (8000d80 <mainloop+0x6c>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	2200      	movs	r2, #0
 8000d5a:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Start_IT(&htim6);
 8000d5c:	4808      	ldr	r0, [pc, #32]	; (8000d80 <mainloop+0x6c>)
 8000d5e:	f002 fa53 	bl	8003208 <HAL_TIM_Base_Start_IT>

	while(1){
 8000d62:	e7fe      	b.n	8000d62 <mainloop+0x4e>
 8000d64:	200001e0 	.word	0x200001e0
 8000d68:	200001f4 	.word	0x200001f4
 8000d6c:	20000224 	.word	0x20000224
 8000d70:	48000400 	.word	0x48000400
 8000d74:	20000208 	.word	0x20000208
 8000d78:	20000258 	.word	0x20000258
 8000d7c:	20000240 	.word	0x20000240
 8000d80:	20000110 	.word	0x20000110

08000d84 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d8a:	4b0f      	ldr	r3, [pc, #60]	; (8000dc8 <HAL_MspInit+0x44>)
 8000d8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d8e:	4a0e      	ldr	r2, [pc, #56]	; (8000dc8 <HAL_MspInit+0x44>)
 8000d90:	f043 0301 	orr.w	r3, r3, #1
 8000d94:	6613      	str	r3, [r2, #96]	; 0x60
 8000d96:	4b0c      	ldr	r3, [pc, #48]	; (8000dc8 <HAL_MspInit+0x44>)
 8000d98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d9a:	f003 0301 	and.w	r3, r3, #1
 8000d9e:	607b      	str	r3, [r7, #4]
 8000da0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000da2:	4b09      	ldr	r3, [pc, #36]	; (8000dc8 <HAL_MspInit+0x44>)
 8000da4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000da6:	4a08      	ldr	r2, [pc, #32]	; (8000dc8 <HAL_MspInit+0x44>)
 8000da8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dac:	6593      	str	r3, [r2, #88]	; 0x58
 8000dae:	4b06      	ldr	r3, [pc, #24]	; (8000dc8 <HAL_MspInit+0x44>)
 8000db0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000db2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000db6:	603b      	str	r3, [r7, #0]
 8000db8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dba:	bf00      	nop
 8000dbc:	370c      	adds	r7, #12
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	40021000 	.word	0x40021000

08000dcc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b084      	sub	sp, #16
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a1a      	ldr	r2, [pc, #104]	; (8000e44 <HAL_TIM_Base_MspInit+0x78>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d114      	bne.n	8000e08 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000dde:	4b1a      	ldr	r3, [pc, #104]	; (8000e48 <HAL_TIM_Base_MspInit+0x7c>)
 8000de0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000de2:	4a19      	ldr	r2, [pc, #100]	; (8000e48 <HAL_TIM_Base_MspInit+0x7c>)
 8000de4:	f043 0302 	orr.w	r3, r3, #2
 8000de8:	6593      	str	r3, [r2, #88]	; 0x58
 8000dea:	4b17      	ldr	r3, [pc, #92]	; (8000e48 <HAL_TIM_Base_MspInit+0x7c>)
 8000dec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dee:	f003 0302 	and.w	r3, r3, #2
 8000df2:	60fb      	str	r3, [r7, #12]
 8000df4:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000df6:	2200      	movs	r2, #0
 8000df8:	2100      	movs	r1, #0
 8000dfa:	201d      	movs	r0, #29
 8000dfc:	f000 fb3b 	bl	8001476 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000e00:	201d      	movs	r0, #29
 8000e02:	f000 fb54 	bl	80014ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000e06:	e018      	b.n	8000e3a <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM6)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a0f      	ldr	r2, [pc, #60]	; (8000e4c <HAL_TIM_Base_MspInit+0x80>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d113      	bne.n	8000e3a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000e12:	4b0d      	ldr	r3, [pc, #52]	; (8000e48 <HAL_TIM_Base_MspInit+0x7c>)
 8000e14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e16:	4a0c      	ldr	r2, [pc, #48]	; (8000e48 <HAL_TIM_Base_MspInit+0x7c>)
 8000e18:	f043 0310 	orr.w	r3, r3, #16
 8000e1c:	6593      	str	r3, [r2, #88]	; 0x58
 8000e1e:	4b0a      	ldr	r3, [pc, #40]	; (8000e48 <HAL_TIM_Base_MspInit+0x7c>)
 8000e20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e22:	f003 0310 	and.w	r3, r3, #16
 8000e26:	60bb      	str	r3, [r7, #8]
 8000e28:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	2036      	movs	r0, #54	; 0x36
 8000e30:	f000 fb21 	bl	8001476 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000e34:	2036      	movs	r0, #54	; 0x36
 8000e36:	f000 fb3a 	bl	80014ae <HAL_NVIC_EnableIRQ>
}
 8000e3a:	bf00      	nop
 8000e3c:	3710      	adds	r7, #16
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	40000400 	.word	0x40000400
 8000e48:	40021000 	.word	0x40021000
 8000e4c:	40001000 	.word	0x40001000

08000e50 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b088      	sub	sp, #32
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e58:	f107 030c 	add.w	r3, r7, #12
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	601a      	str	r2, [r3, #0]
 8000e60:	605a      	str	r2, [r3, #4]
 8000e62:	609a      	str	r2, [r3, #8]
 8000e64:	60da      	str	r2, [r3, #12]
 8000e66:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a11      	ldr	r2, [pc, #68]	; (8000eb4 <HAL_TIM_MspPostInit+0x64>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d11b      	bne.n	8000eaa <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e72:	4b11      	ldr	r3, [pc, #68]	; (8000eb8 <HAL_TIM_MspPostInit+0x68>)
 8000e74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e76:	4a10      	ldr	r2, [pc, #64]	; (8000eb8 <HAL_TIM_MspPostInit+0x68>)
 8000e78:	f043 0302 	orr.w	r3, r3, #2
 8000e7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e7e:	4b0e      	ldr	r3, [pc, #56]	; (8000eb8 <HAL_TIM_MspPostInit+0x68>)
 8000e80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e82:	f003 0302 	and.w	r3, r3, #2
 8000e86:	60bb      	str	r3, [r7, #8]
 8000e88:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4 (NJTRST)     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000e8a:	2310      	movs	r3, #16
 8000e8c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8e:	2302      	movs	r3, #2
 8000e90:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e92:	2300      	movs	r3, #0
 8000e94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e96:	2300      	movs	r3, #0
 8000e98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e9e:	f107 030c 	add.w	r3, r7, #12
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	4805      	ldr	r0, [pc, #20]	; (8000ebc <HAL_TIM_MspPostInit+0x6c>)
 8000ea6:	f000 fb9b 	bl	80015e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000eaa:	bf00      	nop
 8000eac:	3720      	adds	r7, #32
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	40000400 	.word	0x40000400
 8000eb8:	40021000 	.word	0x40021000
 8000ebc:	48000400 	.word	0x48000400

08000ec0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b0ac      	sub	sp, #176	; 0xb0
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ecc:	2200      	movs	r2, #0
 8000ece:	601a      	str	r2, [r3, #0]
 8000ed0:	605a      	str	r2, [r3, #4]
 8000ed2:	609a      	str	r2, [r3, #8]
 8000ed4:	60da      	str	r2, [r3, #12]
 8000ed6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ed8:	f107 0314 	add.w	r3, r7, #20
 8000edc:	2288      	movs	r2, #136	; 0x88
 8000ede:	2100      	movs	r1, #0
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f004 fd1d 	bl	8005920 <memset>
  if(huart->Instance==USART2)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4a25      	ldr	r2, [pc, #148]	; (8000f80 <HAL_UART_MspInit+0xc0>)
 8000eec:	4293      	cmp	r3, r2
 8000eee:	d143      	bne.n	8000f78 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000ef0:	2302      	movs	r3, #2
 8000ef2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ef8:	f107 0314 	add.w	r3, r7, #20
 8000efc:	4618      	mov	r0, r3
 8000efe:	f001 fbdf 	bl	80026c0 <HAL_RCCEx_PeriphCLKConfig>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000f08:	f7ff fe7a 	bl	8000c00 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f0c:	4b1d      	ldr	r3, [pc, #116]	; (8000f84 <HAL_UART_MspInit+0xc4>)
 8000f0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f10:	4a1c      	ldr	r2, [pc, #112]	; (8000f84 <HAL_UART_MspInit+0xc4>)
 8000f12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f16:	6593      	str	r3, [r2, #88]	; 0x58
 8000f18:	4b1a      	ldr	r3, [pc, #104]	; (8000f84 <HAL_UART_MspInit+0xc4>)
 8000f1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f20:	613b      	str	r3, [r7, #16]
 8000f22:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f24:	4b17      	ldr	r3, [pc, #92]	; (8000f84 <HAL_UART_MspInit+0xc4>)
 8000f26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f28:	4a16      	ldr	r2, [pc, #88]	; (8000f84 <HAL_UART_MspInit+0xc4>)
 8000f2a:	f043 0301 	orr.w	r3, r3, #1
 8000f2e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f30:	4b14      	ldr	r3, [pc, #80]	; (8000f84 <HAL_UART_MspInit+0xc4>)
 8000f32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f34:	f003 0301 	and.w	r3, r3, #1
 8000f38:	60fb      	str	r3, [r7, #12]
 8000f3a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000f3c:	230c      	movs	r3, #12
 8000f3e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f42:	2302      	movs	r3, #2
 8000f44:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f4e:	2303      	movs	r3, #3
 8000f50:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f54:	2307      	movs	r3, #7
 8000f56:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f5a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f5e:	4619      	mov	r1, r3
 8000f60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f64:	f000 fb3c 	bl	80015e0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000f68:	2200      	movs	r2, #0
 8000f6a:	2100      	movs	r1, #0
 8000f6c:	2026      	movs	r0, #38	; 0x26
 8000f6e:	f000 fa82 	bl	8001476 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000f72:	2026      	movs	r0, #38	; 0x26
 8000f74:	f000 fa9b 	bl	80014ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f78:	bf00      	nop
 8000f7a:	37b0      	adds	r7, #176	; 0xb0
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	40004400 	.word	0x40004400
 8000f84:	40021000 	.word	0x40021000

08000f88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f8c:	e7fe      	b.n	8000f8c <NMI_Handler+0x4>

08000f8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f8e:	b480      	push	{r7}
 8000f90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f92:	e7fe      	b.n	8000f92 <HardFault_Handler+0x4>

08000f94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f98:	e7fe      	b.n	8000f98 <MemManage_Handler+0x4>

08000f9a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f9e:	e7fe      	b.n	8000f9e <BusFault_Handler+0x4>

08000fa0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fa4:	e7fe      	b.n	8000fa4 <UsageFault_Handler+0x4>

08000fa6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fa6:	b480      	push	{r7}
 8000fa8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000faa:	bf00      	nop
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr

08000fb4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fb8:	bf00      	nop
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr

08000fc2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fc2:	b480      	push	{r7}
 8000fc4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fc6:	bf00      	nop
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr

08000fd0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fd4:	f000 f954 	bl	8001280 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fd8:	bf00      	nop
 8000fda:	bd80      	pop	{r7, pc}

08000fdc <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B3_Pin);
 8000fe0:	2008      	movs	r0, #8
 8000fe2:	f000 fcf1 	bl	80019c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000fe6:	bf00      	nop
 8000fe8:	bd80      	pop	{r7, pc}
	...

08000fec <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000ff0:	4802      	ldr	r0, [pc, #8]	; (8000ffc <TIM3_IRQHandler+0x10>)
 8000ff2:	f002 fb77 	bl	80036e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000ff6:	bf00      	nop
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	200000c4 	.word	0x200000c4

08001000 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001004:	4802      	ldr	r0, [pc, #8]	; (8001010 <USART2_IRQHandler+0x10>)
 8001006:	f003 fc4b 	bl	80048a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800100a:	bf00      	nop
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	2000015c 	.word	0x2000015c

08001014 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B2_Pin);
 8001018:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800101c:	f000 fcd4 	bl	80019c8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001020:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001024:	f000 fcd0 	bl	80019c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001028:	bf00      	nop
 800102a:	bd80      	pop	{r7, pc}

0800102c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001030:	4802      	ldr	r0, [pc, #8]	; (800103c <TIM6_DAC_IRQHandler+0x10>)
 8001032:	f002 fb57 	bl	80036e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	20000110 	.word	0x20000110

08001040 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b086      	sub	sp, #24
 8001044:	af00      	add	r7, sp, #0
 8001046:	60f8      	str	r0, [r7, #12]
 8001048:	60b9      	str	r1, [r7, #8]
 800104a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800104c:	2300      	movs	r3, #0
 800104e:	617b      	str	r3, [r7, #20]
 8001050:	e00a      	b.n	8001068 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001052:	f3af 8000 	nop.w
 8001056:	4601      	mov	r1, r0
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	1c5a      	adds	r2, r3, #1
 800105c:	60ba      	str	r2, [r7, #8]
 800105e:	b2ca      	uxtb	r2, r1
 8001060:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	3301      	adds	r3, #1
 8001066:	617b      	str	r3, [r7, #20]
 8001068:	697a      	ldr	r2, [r7, #20]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	429a      	cmp	r2, r3
 800106e:	dbf0      	blt.n	8001052 <_read+0x12>
	}

return len;
 8001070:	687b      	ldr	r3, [r7, #4]
}
 8001072:	4618      	mov	r0, r3
 8001074:	3718      	adds	r7, #24
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}

0800107a <_close>:
	}
	return len;
}

int _close(int file)
{
 800107a:	b480      	push	{r7}
 800107c:	b083      	sub	sp, #12
 800107e:	af00      	add	r7, sp, #0
 8001080:	6078      	str	r0, [r7, #4]
	return -1;
 8001082:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001086:	4618      	mov	r0, r3
 8001088:	370c      	adds	r7, #12
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr

08001092 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001092:	b480      	push	{r7}
 8001094:	b083      	sub	sp, #12
 8001096:	af00      	add	r7, sp, #0
 8001098:	6078      	str	r0, [r7, #4]
 800109a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010a2:	605a      	str	r2, [r3, #4]
	return 0;
 80010a4:	2300      	movs	r3, #0
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	370c      	adds	r7, #12
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr

080010b2 <_isatty>:

int _isatty(int file)
{
 80010b2:	b480      	push	{r7}
 80010b4:	b083      	sub	sp, #12
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	6078      	str	r0, [r7, #4]
	return 1;
 80010ba:	2301      	movs	r3, #1
}
 80010bc:	4618      	mov	r0, r3
 80010be:	370c      	adds	r7, #12
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr

080010c8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b085      	sub	sp, #20
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	60f8      	str	r0, [r7, #12]
 80010d0:	60b9      	str	r1, [r7, #8]
 80010d2:	607a      	str	r2, [r7, #4]
	return 0;
 80010d4:	2300      	movs	r3, #0
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	3714      	adds	r7, #20
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
	...

080010e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b086      	sub	sp, #24
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010ec:	4a14      	ldr	r2, [pc, #80]	; (8001140 <_sbrk+0x5c>)
 80010ee:	4b15      	ldr	r3, [pc, #84]	; (8001144 <_sbrk+0x60>)
 80010f0:	1ad3      	subs	r3, r2, r3
 80010f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010f8:	4b13      	ldr	r3, [pc, #76]	; (8001148 <_sbrk+0x64>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d102      	bne.n	8001106 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001100:	4b11      	ldr	r3, [pc, #68]	; (8001148 <_sbrk+0x64>)
 8001102:	4a12      	ldr	r2, [pc, #72]	; (800114c <_sbrk+0x68>)
 8001104:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001106:	4b10      	ldr	r3, [pc, #64]	; (8001148 <_sbrk+0x64>)
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4413      	add	r3, r2
 800110e:	693a      	ldr	r2, [r7, #16]
 8001110:	429a      	cmp	r2, r3
 8001112:	d207      	bcs.n	8001124 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001114:	f004 fbda 	bl	80058cc <__errno>
 8001118:	4603      	mov	r3, r0
 800111a:	220c      	movs	r2, #12
 800111c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800111e:	f04f 33ff 	mov.w	r3, #4294967295
 8001122:	e009      	b.n	8001138 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001124:	4b08      	ldr	r3, [pc, #32]	; (8001148 <_sbrk+0x64>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800112a:	4b07      	ldr	r3, [pc, #28]	; (8001148 <_sbrk+0x64>)
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4413      	add	r3, r2
 8001132:	4a05      	ldr	r2, [pc, #20]	; (8001148 <_sbrk+0x64>)
 8001134:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001136:	68fb      	ldr	r3, [r7, #12]
}
 8001138:	4618      	mov	r0, r3
 800113a:	3718      	adds	r7, #24
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	20018000 	.word	0x20018000
 8001144:	00000400 	.word	0x00000400
 8001148:	2000026c 	.word	0x2000026c
 800114c:	20000288 	.word	0x20000288

08001150 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001154:	4b06      	ldr	r3, [pc, #24]	; (8001170 <SystemInit+0x20>)
 8001156:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800115a:	4a05      	ldr	r2, [pc, #20]	; (8001170 <SystemInit+0x20>)
 800115c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001160:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001164:	bf00      	nop
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	e000ed00 	.word	0xe000ed00

08001174 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001174:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011ac <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001178:	f7ff ffea 	bl	8001150 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800117c:	480c      	ldr	r0, [pc, #48]	; (80011b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800117e:	490d      	ldr	r1, [pc, #52]	; (80011b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001180:	4a0d      	ldr	r2, [pc, #52]	; (80011b8 <LoopForever+0xe>)
  movs r3, #0
 8001182:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001184:	e002      	b.n	800118c <LoopCopyDataInit>

08001186 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001186:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001188:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800118a:	3304      	adds	r3, #4

0800118c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800118c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800118e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001190:	d3f9      	bcc.n	8001186 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001192:	4a0a      	ldr	r2, [pc, #40]	; (80011bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001194:	4c0a      	ldr	r4, [pc, #40]	; (80011c0 <LoopForever+0x16>)
  movs r3, #0
 8001196:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001198:	e001      	b.n	800119e <LoopFillZerobss>

0800119a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800119a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800119c:	3204      	adds	r2, #4

0800119e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800119e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011a0:	d3fb      	bcc.n	800119a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011a2:	f004 fb99 	bl	80058d8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80011a6:	f7ff fb57 	bl	8000858 <main>

080011aa <LoopForever>:

LoopForever:
    b LoopForever
 80011aa:	e7fe      	b.n	80011aa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80011ac:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80011b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011b4:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 80011b8:	08006418 	.word	0x08006418
  ldr r2, =_sbss
 80011bc:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 80011c0:	20000284 	.word	0x20000284

080011c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80011c4:	e7fe      	b.n	80011c4 <ADC1_2_IRQHandler>
	...

080011c8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80011ce:	2300      	movs	r3, #0
 80011d0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011d2:	4b0c      	ldr	r3, [pc, #48]	; (8001204 <HAL_Init+0x3c>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4a0b      	ldr	r2, [pc, #44]	; (8001204 <HAL_Init+0x3c>)
 80011d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011dc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011de:	2003      	movs	r0, #3
 80011e0:	f000 f93e 	bl	8001460 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011e4:	2000      	movs	r0, #0
 80011e6:	f000 f80f 	bl	8001208 <HAL_InitTick>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d002      	beq.n	80011f6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80011f0:	2301      	movs	r3, #1
 80011f2:	71fb      	strb	r3, [r7, #7]
 80011f4:	e001      	b.n	80011fa <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80011f6:	f7ff fdc5 	bl	8000d84 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011fa:	79fb      	ldrb	r3, [r7, #7]
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	3708      	adds	r7, #8
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	40022000 	.word	0x40022000

08001208 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001210:	2300      	movs	r3, #0
 8001212:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001214:	4b17      	ldr	r3, [pc, #92]	; (8001274 <HAL_InitTick+0x6c>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d023      	beq.n	8001264 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800121c:	4b16      	ldr	r3, [pc, #88]	; (8001278 <HAL_InitTick+0x70>)
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	4b14      	ldr	r3, [pc, #80]	; (8001274 <HAL_InitTick+0x6c>)
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	4619      	mov	r1, r3
 8001226:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800122a:	fbb3 f3f1 	udiv	r3, r3, r1
 800122e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001232:	4618      	mov	r0, r3
 8001234:	f000 f949 	bl	80014ca <HAL_SYSTICK_Config>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d10f      	bne.n	800125e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2b0f      	cmp	r3, #15
 8001242:	d809      	bhi.n	8001258 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001244:	2200      	movs	r2, #0
 8001246:	6879      	ldr	r1, [r7, #4]
 8001248:	f04f 30ff 	mov.w	r0, #4294967295
 800124c:	f000 f913 	bl	8001476 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001250:	4a0a      	ldr	r2, [pc, #40]	; (800127c <HAL_InitTick+0x74>)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6013      	str	r3, [r2, #0]
 8001256:	e007      	b.n	8001268 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001258:	2301      	movs	r3, #1
 800125a:	73fb      	strb	r3, [r7, #15]
 800125c:	e004      	b.n	8001268 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800125e:	2301      	movs	r3, #1
 8001260:	73fb      	strb	r3, [r7, #15]
 8001262:	e001      	b.n	8001268 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001264:	2301      	movs	r3, #1
 8001266:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001268:	7bfb      	ldrb	r3, [r7, #15]
}
 800126a:	4618      	mov	r0, r3
 800126c:	3710      	adds	r7, #16
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	20000040 	.word	0x20000040
 8001278:	20000038 	.word	0x20000038
 800127c:	2000003c 	.word	0x2000003c

08001280 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001284:	4b06      	ldr	r3, [pc, #24]	; (80012a0 <HAL_IncTick+0x20>)
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	461a      	mov	r2, r3
 800128a:	4b06      	ldr	r3, [pc, #24]	; (80012a4 <HAL_IncTick+0x24>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4413      	add	r3, r2
 8001290:	4a04      	ldr	r2, [pc, #16]	; (80012a4 <HAL_IncTick+0x24>)
 8001292:	6013      	str	r3, [r2, #0]
}
 8001294:	bf00      	nop
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	20000040 	.word	0x20000040
 80012a4:	20000270 	.word	0x20000270

080012a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  return uwTick;
 80012ac:	4b03      	ldr	r3, [pc, #12]	; (80012bc <HAL_GetTick+0x14>)
 80012ae:	681b      	ldr	r3, [r3, #0]
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	20000270 	.word	0x20000270

080012c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b085      	sub	sp, #20
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	f003 0307 	and.w	r3, r3, #7
 80012ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012d0:	4b0c      	ldr	r3, [pc, #48]	; (8001304 <__NVIC_SetPriorityGrouping+0x44>)
 80012d2:	68db      	ldr	r3, [r3, #12]
 80012d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012d6:	68ba      	ldr	r2, [r7, #8]
 80012d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012dc:	4013      	ands	r3, r2
 80012de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012f2:	4a04      	ldr	r2, [pc, #16]	; (8001304 <__NVIC_SetPriorityGrouping+0x44>)
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	60d3      	str	r3, [r2, #12]
}
 80012f8:	bf00      	nop
 80012fa:	3714      	adds	r7, #20
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr
 8001304:	e000ed00 	.word	0xe000ed00

08001308 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800130c:	4b04      	ldr	r3, [pc, #16]	; (8001320 <__NVIC_GetPriorityGrouping+0x18>)
 800130e:	68db      	ldr	r3, [r3, #12]
 8001310:	0a1b      	lsrs	r3, r3, #8
 8001312:	f003 0307 	and.w	r3, r3, #7
}
 8001316:	4618      	mov	r0, r3
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr
 8001320:	e000ed00 	.word	0xe000ed00

08001324 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	4603      	mov	r3, r0
 800132c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800132e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001332:	2b00      	cmp	r3, #0
 8001334:	db0b      	blt.n	800134e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001336:	79fb      	ldrb	r3, [r7, #7]
 8001338:	f003 021f 	and.w	r2, r3, #31
 800133c:	4907      	ldr	r1, [pc, #28]	; (800135c <__NVIC_EnableIRQ+0x38>)
 800133e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001342:	095b      	lsrs	r3, r3, #5
 8001344:	2001      	movs	r0, #1
 8001346:	fa00 f202 	lsl.w	r2, r0, r2
 800134a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800134e:	bf00      	nop
 8001350:	370c      	adds	r7, #12
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	e000e100 	.word	0xe000e100

08001360 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	4603      	mov	r3, r0
 8001368:	6039      	str	r1, [r7, #0]
 800136a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800136c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001370:	2b00      	cmp	r3, #0
 8001372:	db0a      	blt.n	800138a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	b2da      	uxtb	r2, r3
 8001378:	490c      	ldr	r1, [pc, #48]	; (80013ac <__NVIC_SetPriority+0x4c>)
 800137a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800137e:	0112      	lsls	r2, r2, #4
 8001380:	b2d2      	uxtb	r2, r2
 8001382:	440b      	add	r3, r1
 8001384:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001388:	e00a      	b.n	80013a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	b2da      	uxtb	r2, r3
 800138e:	4908      	ldr	r1, [pc, #32]	; (80013b0 <__NVIC_SetPriority+0x50>)
 8001390:	79fb      	ldrb	r3, [r7, #7]
 8001392:	f003 030f 	and.w	r3, r3, #15
 8001396:	3b04      	subs	r3, #4
 8001398:	0112      	lsls	r2, r2, #4
 800139a:	b2d2      	uxtb	r2, r2
 800139c:	440b      	add	r3, r1
 800139e:	761a      	strb	r2, [r3, #24]
}
 80013a0:	bf00      	nop
 80013a2:	370c      	adds	r7, #12
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr
 80013ac:	e000e100 	.word	0xe000e100
 80013b0:	e000ed00 	.word	0xe000ed00

080013b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b089      	sub	sp, #36	; 0x24
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	60f8      	str	r0, [r7, #12]
 80013bc:	60b9      	str	r1, [r7, #8]
 80013be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	f003 0307 	and.w	r3, r3, #7
 80013c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013c8:	69fb      	ldr	r3, [r7, #28]
 80013ca:	f1c3 0307 	rsb	r3, r3, #7
 80013ce:	2b04      	cmp	r3, #4
 80013d0:	bf28      	it	cs
 80013d2:	2304      	movcs	r3, #4
 80013d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	3304      	adds	r3, #4
 80013da:	2b06      	cmp	r3, #6
 80013dc:	d902      	bls.n	80013e4 <NVIC_EncodePriority+0x30>
 80013de:	69fb      	ldr	r3, [r7, #28]
 80013e0:	3b03      	subs	r3, #3
 80013e2:	e000      	b.n	80013e6 <NVIC_EncodePriority+0x32>
 80013e4:	2300      	movs	r3, #0
 80013e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013e8:	f04f 32ff 	mov.w	r2, #4294967295
 80013ec:	69bb      	ldr	r3, [r7, #24]
 80013ee:	fa02 f303 	lsl.w	r3, r2, r3
 80013f2:	43da      	mvns	r2, r3
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	401a      	ands	r2, r3
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	fa01 f303 	lsl.w	r3, r1, r3
 8001406:	43d9      	mvns	r1, r3
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800140c:	4313      	orrs	r3, r2
         );
}
 800140e:	4618      	mov	r0, r3
 8001410:	3724      	adds	r7, #36	; 0x24
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
	...

0800141c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	3b01      	subs	r3, #1
 8001428:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800142c:	d301      	bcc.n	8001432 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800142e:	2301      	movs	r3, #1
 8001430:	e00f      	b.n	8001452 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001432:	4a0a      	ldr	r2, [pc, #40]	; (800145c <SysTick_Config+0x40>)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	3b01      	subs	r3, #1
 8001438:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800143a:	210f      	movs	r1, #15
 800143c:	f04f 30ff 	mov.w	r0, #4294967295
 8001440:	f7ff ff8e 	bl	8001360 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001444:	4b05      	ldr	r3, [pc, #20]	; (800145c <SysTick_Config+0x40>)
 8001446:	2200      	movs	r2, #0
 8001448:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800144a:	4b04      	ldr	r3, [pc, #16]	; (800145c <SysTick_Config+0x40>)
 800144c:	2207      	movs	r2, #7
 800144e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001450:	2300      	movs	r3, #0
}
 8001452:	4618      	mov	r0, r3
 8001454:	3708      	adds	r7, #8
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	e000e010 	.word	0xe000e010

08001460 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001468:	6878      	ldr	r0, [r7, #4]
 800146a:	f7ff ff29 	bl	80012c0 <__NVIC_SetPriorityGrouping>
}
 800146e:	bf00      	nop
 8001470:	3708      	adds	r7, #8
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}

08001476 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001476:	b580      	push	{r7, lr}
 8001478:	b086      	sub	sp, #24
 800147a:	af00      	add	r7, sp, #0
 800147c:	4603      	mov	r3, r0
 800147e:	60b9      	str	r1, [r7, #8]
 8001480:	607a      	str	r2, [r7, #4]
 8001482:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001484:	2300      	movs	r3, #0
 8001486:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001488:	f7ff ff3e 	bl	8001308 <__NVIC_GetPriorityGrouping>
 800148c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800148e:	687a      	ldr	r2, [r7, #4]
 8001490:	68b9      	ldr	r1, [r7, #8]
 8001492:	6978      	ldr	r0, [r7, #20]
 8001494:	f7ff ff8e 	bl	80013b4 <NVIC_EncodePriority>
 8001498:	4602      	mov	r2, r0
 800149a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800149e:	4611      	mov	r1, r2
 80014a0:	4618      	mov	r0, r3
 80014a2:	f7ff ff5d 	bl	8001360 <__NVIC_SetPriority>
}
 80014a6:	bf00      	nop
 80014a8:	3718      	adds	r7, #24
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}

080014ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014ae:	b580      	push	{r7, lr}
 80014b0:	b082      	sub	sp, #8
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	4603      	mov	r3, r0
 80014b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014bc:	4618      	mov	r0, r3
 80014be:	f7ff ff31 	bl	8001324 <__NVIC_EnableIRQ>
}
 80014c2:	bf00      	nop
 80014c4:	3708      	adds	r7, #8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}

080014ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014ca:	b580      	push	{r7, lr}
 80014cc:	b082      	sub	sp, #8
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014d2:	6878      	ldr	r0, [r7, #4]
 80014d4:	f7ff ffa2 	bl	800141c <SysTick_Config>
 80014d8:	4603      	mov	r3, r0
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3708      	adds	r7, #8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}

080014e2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80014e2:	b480      	push	{r7}
 80014e4:	b085      	sub	sp, #20
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014ea:	2300      	movs	r3, #0
 80014ec:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	2b02      	cmp	r3, #2
 80014f8:	d008      	beq.n	800150c <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2204      	movs	r2, #4
 80014fe:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2200      	movs	r2, #0
 8001504:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001508:	2301      	movs	r3, #1
 800150a:	e022      	b.n	8001552 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f022 020e 	bic.w	r2, r2, #14
 800151a:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f022 0201 	bic.w	r2, r2, #1
 800152a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001530:	f003 021c 	and.w	r2, r3, #28
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001538:	2101      	movs	r1, #1
 800153a:	fa01 f202 	lsl.w	r2, r1, r2
 800153e:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2201      	movs	r2, #1
 8001544:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2200      	movs	r2, #0
 800154c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001550:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001552:	4618      	mov	r0, r3
 8001554:	3714      	adds	r7, #20
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr

0800155e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800155e:	b580      	push	{r7, lr}
 8001560:	b084      	sub	sp, #16
 8001562:	af00      	add	r7, sp, #0
 8001564:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001566:	2300      	movs	r3, #0
 8001568:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001570:	b2db      	uxtb	r3, r3
 8001572:	2b02      	cmp	r3, #2
 8001574:	d005      	beq.n	8001582 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2204      	movs	r2, #4
 800157a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800157c:	2301      	movs	r3, #1
 800157e:	73fb      	strb	r3, [r7, #15]
 8001580:	e029      	b.n	80015d6 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f022 020e 	bic.w	r2, r2, #14
 8001590:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f022 0201 	bic.w	r2, r2, #1
 80015a0:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a6:	f003 021c 	and.w	r2, r3, #28
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ae:	2101      	movs	r1, #1
 80015b0:	fa01 f202 	lsl.w	r2, r1, r2
 80015b4:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2201      	movs	r2, #1
 80015ba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2200      	movs	r2, #0
 80015c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d003      	beq.n	80015d6 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	4798      	blx	r3
    }
  }
  return status;
 80015d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3710      	adds	r7, #16
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}

080015e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b087      	sub	sp, #28
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
 80015e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015ea:	2300      	movs	r3, #0
 80015ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015ee:	e17f      	b.n	80018f0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	681a      	ldr	r2, [r3, #0]
 80015f4:	2101      	movs	r1, #1
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	fa01 f303 	lsl.w	r3, r1, r3
 80015fc:	4013      	ands	r3, r2
 80015fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	2b00      	cmp	r3, #0
 8001604:	f000 8171 	beq.w	80018ea <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	f003 0303 	and.w	r3, r3, #3
 8001610:	2b01      	cmp	r3, #1
 8001612:	d005      	beq.n	8001620 <HAL_GPIO_Init+0x40>
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f003 0303 	and.w	r3, r3, #3
 800161c:	2b02      	cmp	r3, #2
 800161e:	d130      	bne.n	8001682 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	005b      	lsls	r3, r3, #1
 800162a:	2203      	movs	r2, #3
 800162c:	fa02 f303 	lsl.w	r3, r2, r3
 8001630:	43db      	mvns	r3, r3
 8001632:	693a      	ldr	r2, [r7, #16]
 8001634:	4013      	ands	r3, r2
 8001636:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	68da      	ldr	r2, [r3, #12]
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	005b      	lsls	r3, r3, #1
 8001640:	fa02 f303 	lsl.w	r3, r2, r3
 8001644:	693a      	ldr	r2, [r7, #16]
 8001646:	4313      	orrs	r3, r2
 8001648:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	693a      	ldr	r2, [r7, #16]
 800164e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001656:	2201      	movs	r2, #1
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	fa02 f303 	lsl.w	r3, r2, r3
 800165e:	43db      	mvns	r3, r3
 8001660:	693a      	ldr	r2, [r7, #16]
 8001662:	4013      	ands	r3, r2
 8001664:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	091b      	lsrs	r3, r3, #4
 800166c:	f003 0201 	and.w	r2, r3, #1
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	fa02 f303 	lsl.w	r3, r2, r3
 8001676:	693a      	ldr	r2, [r7, #16]
 8001678:	4313      	orrs	r3, r2
 800167a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	693a      	ldr	r2, [r7, #16]
 8001680:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	f003 0303 	and.w	r3, r3, #3
 800168a:	2b03      	cmp	r3, #3
 800168c:	d118      	bne.n	80016c0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001692:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001694:	2201      	movs	r2, #1
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	fa02 f303 	lsl.w	r3, r2, r3
 800169c:	43db      	mvns	r3, r3
 800169e:	693a      	ldr	r2, [r7, #16]
 80016a0:	4013      	ands	r3, r2
 80016a2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	08db      	lsrs	r3, r3, #3
 80016aa:	f003 0201 	and.w	r2, r3, #1
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	fa02 f303 	lsl.w	r3, r2, r3
 80016b4:	693a      	ldr	r2, [r7, #16]
 80016b6:	4313      	orrs	r3, r2
 80016b8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	693a      	ldr	r2, [r7, #16]
 80016be:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f003 0303 	and.w	r3, r3, #3
 80016c8:	2b03      	cmp	r3, #3
 80016ca:	d017      	beq.n	80016fc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	68db      	ldr	r3, [r3, #12]
 80016d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	005b      	lsls	r3, r3, #1
 80016d6:	2203      	movs	r2, #3
 80016d8:	fa02 f303 	lsl.w	r3, r2, r3
 80016dc:	43db      	mvns	r3, r3
 80016de:	693a      	ldr	r2, [r7, #16]
 80016e0:	4013      	ands	r3, r2
 80016e2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	689a      	ldr	r2, [r3, #8]
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	005b      	lsls	r3, r3, #1
 80016ec:	fa02 f303 	lsl.w	r3, r2, r3
 80016f0:	693a      	ldr	r2, [r7, #16]
 80016f2:	4313      	orrs	r3, r2
 80016f4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	693a      	ldr	r2, [r7, #16]
 80016fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f003 0303 	and.w	r3, r3, #3
 8001704:	2b02      	cmp	r3, #2
 8001706:	d123      	bne.n	8001750 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	08da      	lsrs	r2, r3, #3
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	3208      	adds	r2, #8
 8001710:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001714:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	f003 0307 	and.w	r3, r3, #7
 800171c:	009b      	lsls	r3, r3, #2
 800171e:	220f      	movs	r2, #15
 8001720:	fa02 f303 	lsl.w	r3, r2, r3
 8001724:	43db      	mvns	r3, r3
 8001726:	693a      	ldr	r2, [r7, #16]
 8001728:	4013      	ands	r3, r2
 800172a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	691a      	ldr	r2, [r3, #16]
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	f003 0307 	and.w	r3, r3, #7
 8001736:	009b      	lsls	r3, r3, #2
 8001738:	fa02 f303 	lsl.w	r3, r2, r3
 800173c:	693a      	ldr	r2, [r7, #16]
 800173e:	4313      	orrs	r3, r2
 8001740:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	08da      	lsrs	r2, r3, #3
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	3208      	adds	r2, #8
 800174a:	6939      	ldr	r1, [r7, #16]
 800174c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	005b      	lsls	r3, r3, #1
 800175a:	2203      	movs	r2, #3
 800175c:	fa02 f303 	lsl.w	r3, r2, r3
 8001760:	43db      	mvns	r3, r3
 8001762:	693a      	ldr	r2, [r7, #16]
 8001764:	4013      	ands	r3, r2
 8001766:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f003 0203 	and.w	r2, r3, #3
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	005b      	lsls	r3, r3, #1
 8001774:	fa02 f303 	lsl.w	r3, r2, r3
 8001778:	693a      	ldr	r2, [r7, #16]
 800177a:	4313      	orrs	r3, r2
 800177c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	693a      	ldr	r2, [r7, #16]
 8001782:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800178c:	2b00      	cmp	r3, #0
 800178e:	f000 80ac 	beq.w	80018ea <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001792:	4b5f      	ldr	r3, [pc, #380]	; (8001910 <HAL_GPIO_Init+0x330>)
 8001794:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001796:	4a5e      	ldr	r2, [pc, #376]	; (8001910 <HAL_GPIO_Init+0x330>)
 8001798:	f043 0301 	orr.w	r3, r3, #1
 800179c:	6613      	str	r3, [r2, #96]	; 0x60
 800179e:	4b5c      	ldr	r3, [pc, #368]	; (8001910 <HAL_GPIO_Init+0x330>)
 80017a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017a2:	f003 0301 	and.w	r3, r3, #1
 80017a6:	60bb      	str	r3, [r7, #8]
 80017a8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80017aa:	4a5a      	ldr	r2, [pc, #360]	; (8001914 <HAL_GPIO_Init+0x334>)
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	089b      	lsrs	r3, r3, #2
 80017b0:	3302      	adds	r3, #2
 80017b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	f003 0303 	and.w	r3, r3, #3
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	220f      	movs	r2, #15
 80017c2:	fa02 f303 	lsl.w	r3, r2, r3
 80017c6:	43db      	mvns	r3, r3
 80017c8:	693a      	ldr	r2, [r7, #16]
 80017ca:	4013      	ands	r3, r2
 80017cc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80017d4:	d025      	beq.n	8001822 <HAL_GPIO_Init+0x242>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	4a4f      	ldr	r2, [pc, #316]	; (8001918 <HAL_GPIO_Init+0x338>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d01f      	beq.n	800181e <HAL_GPIO_Init+0x23e>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4a4e      	ldr	r2, [pc, #312]	; (800191c <HAL_GPIO_Init+0x33c>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d019      	beq.n	800181a <HAL_GPIO_Init+0x23a>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	4a4d      	ldr	r2, [pc, #308]	; (8001920 <HAL_GPIO_Init+0x340>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d013      	beq.n	8001816 <HAL_GPIO_Init+0x236>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	4a4c      	ldr	r2, [pc, #304]	; (8001924 <HAL_GPIO_Init+0x344>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d00d      	beq.n	8001812 <HAL_GPIO_Init+0x232>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	4a4b      	ldr	r2, [pc, #300]	; (8001928 <HAL_GPIO_Init+0x348>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d007      	beq.n	800180e <HAL_GPIO_Init+0x22e>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4a4a      	ldr	r2, [pc, #296]	; (800192c <HAL_GPIO_Init+0x34c>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d101      	bne.n	800180a <HAL_GPIO_Init+0x22a>
 8001806:	2306      	movs	r3, #6
 8001808:	e00c      	b.n	8001824 <HAL_GPIO_Init+0x244>
 800180a:	2307      	movs	r3, #7
 800180c:	e00a      	b.n	8001824 <HAL_GPIO_Init+0x244>
 800180e:	2305      	movs	r3, #5
 8001810:	e008      	b.n	8001824 <HAL_GPIO_Init+0x244>
 8001812:	2304      	movs	r3, #4
 8001814:	e006      	b.n	8001824 <HAL_GPIO_Init+0x244>
 8001816:	2303      	movs	r3, #3
 8001818:	e004      	b.n	8001824 <HAL_GPIO_Init+0x244>
 800181a:	2302      	movs	r3, #2
 800181c:	e002      	b.n	8001824 <HAL_GPIO_Init+0x244>
 800181e:	2301      	movs	r3, #1
 8001820:	e000      	b.n	8001824 <HAL_GPIO_Init+0x244>
 8001822:	2300      	movs	r3, #0
 8001824:	697a      	ldr	r2, [r7, #20]
 8001826:	f002 0203 	and.w	r2, r2, #3
 800182a:	0092      	lsls	r2, r2, #2
 800182c:	4093      	lsls	r3, r2
 800182e:	693a      	ldr	r2, [r7, #16]
 8001830:	4313      	orrs	r3, r2
 8001832:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001834:	4937      	ldr	r1, [pc, #220]	; (8001914 <HAL_GPIO_Init+0x334>)
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	089b      	lsrs	r3, r3, #2
 800183a:	3302      	adds	r3, #2
 800183c:	693a      	ldr	r2, [r7, #16]
 800183e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001842:	4b3b      	ldr	r3, [pc, #236]	; (8001930 <HAL_GPIO_Init+0x350>)
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	43db      	mvns	r3, r3
 800184c:	693a      	ldr	r2, [r7, #16]
 800184e:	4013      	ands	r3, r2
 8001850:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800185a:	2b00      	cmp	r3, #0
 800185c:	d003      	beq.n	8001866 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800185e:	693a      	ldr	r2, [r7, #16]
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	4313      	orrs	r3, r2
 8001864:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001866:	4a32      	ldr	r2, [pc, #200]	; (8001930 <HAL_GPIO_Init+0x350>)
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800186c:	4b30      	ldr	r3, [pc, #192]	; (8001930 <HAL_GPIO_Init+0x350>)
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	43db      	mvns	r3, r3
 8001876:	693a      	ldr	r2, [r7, #16]
 8001878:	4013      	ands	r3, r2
 800187a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001884:	2b00      	cmp	r3, #0
 8001886:	d003      	beq.n	8001890 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001888:	693a      	ldr	r2, [r7, #16]
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	4313      	orrs	r3, r2
 800188e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001890:	4a27      	ldr	r2, [pc, #156]	; (8001930 <HAL_GPIO_Init+0x350>)
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001896:	4b26      	ldr	r3, [pc, #152]	; (8001930 <HAL_GPIO_Init+0x350>)
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	43db      	mvns	r3, r3
 80018a0:	693a      	ldr	r2, [r7, #16]
 80018a2:	4013      	ands	r3, r2
 80018a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d003      	beq.n	80018ba <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80018b2:	693a      	ldr	r2, [r7, #16]
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	4313      	orrs	r3, r2
 80018b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80018ba:	4a1d      	ldr	r2, [pc, #116]	; (8001930 <HAL_GPIO_Init+0x350>)
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80018c0:	4b1b      	ldr	r3, [pc, #108]	; (8001930 <HAL_GPIO_Init+0x350>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	43db      	mvns	r3, r3
 80018ca:	693a      	ldr	r2, [r7, #16]
 80018cc:	4013      	ands	r3, r2
 80018ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d003      	beq.n	80018e4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80018dc:	693a      	ldr	r2, [r7, #16]
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	4313      	orrs	r3, r2
 80018e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80018e4:	4a12      	ldr	r2, [pc, #72]	; (8001930 <HAL_GPIO_Init+0x350>)
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	3301      	adds	r3, #1
 80018ee:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	fa22 f303 	lsr.w	r3, r2, r3
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	f47f ae78 	bne.w	80015f0 <HAL_GPIO_Init+0x10>
  }
}
 8001900:	bf00      	nop
 8001902:	bf00      	nop
 8001904:	371c      	adds	r7, #28
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	40021000 	.word	0x40021000
 8001914:	40010000 	.word	0x40010000
 8001918:	48000400 	.word	0x48000400
 800191c:	48000800 	.word	0x48000800
 8001920:	48000c00 	.word	0x48000c00
 8001924:	48001000 	.word	0x48001000
 8001928:	48001400 	.word	0x48001400
 800192c:	48001800 	.word	0x48001800
 8001930:	40010400 	.word	0x40010400

08001934 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001934:	b480      	push	{r7}
 8001936:	b085      	sub	sp, #20
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	460b      	mov	r3, r1
 800193e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	691a      	ldr	r2, [r3, #16]
 8001944:	887b      	ldrh	r3, [r7, #2]
 8001946:	4013      	ands	r3, r2
 8001948:	2b00      	cmp	r3, #0
 800194a:	d002      	beq.n	8001952 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800194c:	2301      	movs	r3, #1
 800194e:	73fb      	strb	r3, [r7, #15]
 8001950:	e001      	b.n	8001956 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001952:	2300      	movs	r3, #0
 8001954:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001956:	7bfb      	ldrb	r3, [r7, #15]
}
 8001958:	4618      	mov	r0, r3
 800195a:	3714      	adds	r7, #20
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr

08001964 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	460b      	mov	r3, r1
 800196e:	807b      	strh	r3, [r7, #2]
 8001970:	4613      	mov	r3, r2
 8001972:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001974:	787b      	ldrb	r3, [r7, #1]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d003      	beq.n	8001982 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800197a:	887a      	ldrh	r2, [r7, #2]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001980:	e002      	b.n	8001988 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001982:	887a      	ldrh	r2, [r7, #2]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001988:	bf00      	nop
 800198a:	370c      	adds	r7, #12
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr

08001994 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001994:	b480      	push	{r7}
 8001996:	b085      	sub	sp, #20
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	460b      	mov	r3, r1
 800199e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	695b      	ldr	r3, [r3, #20]
 80019a4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80019a6:	887a      	ldrh	r2, [r7, #2]
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	4013      	ands	r3, r2
 80019ac:	041a      	lsls	r2, r3, #16
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	43d9      	mvns	r1, r3
 80019b2:	887b      	ldrh	r3, [r7, #2]
 80019b4:	400b      	ands	r3, r1
 80019b6:	431a      	orrs	r2, r3
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	619a      	str	r2, [r3, #24]
}
 80019bc:	bf00      	nop
 80019be:	3714      	adds	r7, #20
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr

080019c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	4603      	mov	r3, r0
 80019d0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80019d2:	4b08      	ldr	r3, [pc, #32]	; (80019f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019d4:	695a      	ldr	r2, [r3, #20]
 80019d6:	88fb      	ldrh	r3, [r7, #6]
 80019d8:	4013      	ands	r3, r2
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d006      	beq.n	80019ec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80019de:	4a05      	ldr	r2, [pc, #20]	; (80019f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019e0:	88fb      	ldrh	r3, [r7, #6]
 80019e2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80019e4:	88fb      	ldrh	r3, [r7, #6]
 80019e6:	4618      	mov	r0, r3
 80019e8:	f7ff f948 	bl	8000c7c <HAL_GPIO_EXTI_Callback>
  }
}
 80019ec:	bf00      	nop
 80019ee:	3708      	adds	r7, #8
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	40010400 	.word	0x40010400

080019f8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80019fc:	4b04      	ldr	r3, [pc, #16]	; (8001a10 <HAL_PWREx_GetVoltageRange+0x18>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop
 8001a10:	40007000 	.word	0x40007000

08001a14 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b085      	sub	sp, #20
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a22:	d130      	bne.n	8001a86 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a24:	4b23      	ldr	r3, [pc, #140]	; (8001ab4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a30:	d038      	beq.n	8001aa4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a32:	4b20      	ldr	r3, [pc, #128]	; (8001ab4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a3a:	4a1e      	ldr	r2, [pc, #120]	; (8001ab4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a3c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a40:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001a42:	4b1d      	ldr	r3, [pc, #116]	; (8001ab8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	2232      	movs	r2, #50	; 0x32
 8001a48:	fb02 f303 	mul.w	r3, r2, r3
 8001a4c:	4a1b      	ldr	r2, [pc, #108]	; (8001abc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a52:	0c9b      	lsrs	r3, r3, #18
 8001a54:	3301      	adds	r3, #1
 8001a56:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a58:	e002      	b.n	8001a60 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	3b01      	subs	r3, #1
 8001a5e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a60:	4b14      	ldr	r3, [pc, #80]	; (8001ab4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a62:	695b      	ldr	r3, [r3, #20]
 8001a64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a6c:	d102      	bne.n	8001a74 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d1f2      	bne.n	8001a5a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a74:	4b0f      	ldr	r3, [pc, #60]	; (8001ab4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a76:	695b      	ldr	r3, [r3, #20]
 8001a78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a80:	d110      	bne.n	8001aa4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001a82:	2303      	movs	r3, #3
 8001a84:	e00f      	b.n	8001aa6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a86:	4b0b      	ldr	r3, [pc, #44]	; (8001ab4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a92:	d007      	beq.n	8001aa4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a94:	4b07      	ldr	r3, [pc, #28]	; (8001ab4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a9c:	4a05      	ldr	r2, [pc, #20]	; (8001ab4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001aa2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001aa4:	2300      	movs	r3, #0
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3714      	adds	r7, #20
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr
 8001ab2:	bf00      	nop
 8001ab4:	40007000 	.word	0x40007000
 8001ab8:	20000038 	.word	0x20000038
 8001abc:	431bde83 	.word	0x431bde83

08001ac0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b088      	sub	sp, #32
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d101      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e3ca      	b.n	8002268 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ad2:	4b97      	ldr	r3, [pc, #604]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	f003 030c 	and.w	r3, r3, #12
 8001ada:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001adc:	4b94      	ldr	r3, [pc, #592]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	f003 0303 	and.w	r3, r3, #3
 8001ae4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 0310 	and.w	r3, r3, #16
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	f000 80e4 	beq.w	8001cbc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001af4:	69bb      	ldr	r3, [r7, #24]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d007      	beq.n	8001b0a <HAL_RCC_OscConfig+0x4a>
 8001afa:	69bb      	ldr	r3, [r7, #24]
 8001afc:	2b0c      	cmp	r3, #12
 8001afe:	f040 808b 	bne.w	8001c18 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	f040 8087 	bne.w	8001c18 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b0a:	4b89      	ldr	r3, [pc, #548]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 0302 	and.w	r3, r3, #2
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d005      	beq.n	8001b22 <HAL_RCC_OscConfig+0x62>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	699b      	ldr	r3, [r3, #24]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d101      	bne.n	8001b22 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e3a2      	b.n	8002268 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6a1a      	ldr	r2, [r3, #32]
 8001b26:	4b82      	ldr	r3, [pc, #520]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 0308 	and.w	r3, r3, #8
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d004      	beq.n	8001b3c <HAL_RCC_OscConfig+0x7c>
 8001b32:	4b7f      	ldr	r3, [pc, #508]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b3a:	e005      	b.n	8001b48 <HAL_RCC_OscConfig+0x88>
 8001b3c:	4b7c      	ldr	r3, [pc, #496]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001b3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b42:	091b      	lsrs	r3, r3, #4
 8001b44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d223      	bcs.n	8001b94 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6a1b      	ldr	r3, [r3, #32]
 8001b50:	4618      	mov	r0, r3
 8001b52:	f000 fd55 	bl	8002600 <RCC_SetFlashLatencyFromMSIRange>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d001      	beq.n	8001b60 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e383      	b.n	8002268 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b60:	4b73      	ldr	r3, [pc, #460]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a72      	ldr	r2, [pc, #456]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001b66:	f043 0308 	orr.w	r3, r3, #8
 8001b6a:	6013      	str	r3, [r2, #0]
 8001b6c:	4b70      	ldr	r3, [pc, #448]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6a1b      	ldr	r3, [r3, #32]
 8001b78:	496d      	ldr	r1, [pc, #436]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b7e:	4b6c      	ldr	r3, [pc, #432]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	69db      	ldr	r3, [r3, #28]
 8001b8a:	021b      	lsls	r3, r3, #8
 8001b8c:	4968      	ldr	r1, [pc, #416]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	604b      	str	r3, [r1, #4]
 8001b92:	e025      	b.n	8001be0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b94:	4b66      	ldr	r3, [pc, #408]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a65      	ldr	r2, [pc, #404]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001b9a:	f043 0308 	orr.w	r3, r3, #8
 8001b9e:	6013      	str	r3, [r2, #0]
 8001ba0:	4b63      	ldr	r3, [pc, #396]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6a1b      	ldr	r3, [r3, #32]
 8001bac:	4960      	ldr	r1, [pc, #384]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001bb2:	4b5f      	ldr	r3, [pc, #380]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	69db      	ldr	r3, [r3, #28]
 8001bbe:	021b      	lsls	r3, r3, #8
 8001bc0:	495b      	ldr	r1, [pc, #364]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001bc6:	69bb      	ldr	r3, [r7, #24]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d109      	bne.n	8001be0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6a1b      	ldr	r3, [r3, #32]
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f000 fd15 	bl	8002600 <RCC_SetFlashLatencyFromMSIRange>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d001      	beq.n	8001be0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e343      	b.n	8002268 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001be0:	f000 fc4a 	bl	8002478 <HAL_RCC_GetSysClockFreq>
 8001be4:	4602      	mov	r2, r0
 8001be6:	4b52      	ldr	r3, [pc, #328]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	091b      	lsrs	r3, r3, #4
 8001bec:	f003 030f 	and.w	r3, r3, #15
 8001bf0:	4950      	ldr	r1, [pc, #320]	; (8001d34 <HAL_RCC_OscConfig+0x274>)
 8001bf2:	5ccb      	ldrb	r3, [r1, r3]
 8001bf4:	f003 031f 	and.w	r3, r3, #31
 8001bf8:	fa22 f303 	lsr.w	r3, r2, r3
 8001bfc:	4a4e      	ldr	r2, [pc, #312]	; (8001d38 <HAL_RCC_OscConfig+0x278>)
 8001bfe:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001c00:	4b4e      	ldr	r3, [pc, #312]	; (8001d3c <HAL_RCC_OscConfig+0x27c>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4618      	mov	r0, r3
 8001c06:	f7ff faff 	bl	8001208 <HAL_InitTick>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001c0e:	7bfb      	ldrb	r3, [r7, #15]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d052      	beq.n	8001cba <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001c14:	7bfb      	ldrb	r3, [r7, #15]
 8001c16:	e327      	b.n	8002268 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	699b      	ldr	r3, [r3, #24]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d032      	beq.n	8001c86 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001c20:	4b43      	ldr	r3, [pc, #268]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a42      	ldr	r2, [pc, #264]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001c26:	f043 0301 	orr.w	r3, r3, #1
 8001c2a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c2c:	f7ff fb3c 	bl	80012a8 <HAL_GetTick>
 8001c30:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c32:	e008      	b.n	8001c46 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c34:	f7ff fb38 	bl	80012a8 <HAL_GetTick>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	2b02      	cmp	r3, #2
 8001c40:	d901      	bls.n	8001c46 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001c42:	2303      	movs	r3, #3
 8001c44:	e310      	b.n	8002268 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c46:	4b3a      	ldr	r3, [pc, #232]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 0302 	and.w	r3, r3, #2
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d0f0      	beq.n	8001c34 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c52:	4b37      	ldr	r3, [pc, #220]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a36      	ldr	r2, [pc, #216]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001c58:	f043 0308 	orr.w	r3, r3, #8
 8001c5c:	6013      	str	r3, [r2, #0]
 8001c5e:	4b34      	ldr	r3, [pc, #208]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6a1b      	ldr	r3, [r3, #32]
 8001c6a:	4931      	ldr	r1, [pc, #196]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c70:	4b2f      	ldr	r3, [pc, #188]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	69db      	ldr	r3, [r3, #28]
 8001c7c:	021b      	lsls	r3, r3, #8
 8001c7e:	492c      	ldr	r1, [pc, #176]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001c80:	4313      	orrs	r3, r2
 8001c82:	604b      	str	r3, [r1, #4]
 8001c84:	e01a      	b.n	8001cbc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001c86:	4b2a      	ldr	r3, [pc, #168]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a29      	ldr	r2, [pc, #164]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001c8c:	f023 0301 	bic.w	r3, r3, #1
 8001c90:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c92:	f7ff fb09 	bl	80012a8 <HAL_GetTick>
 8001c96:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c98:	e008      	b.n	8001cac <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c9a:	f7ff fb05 	bl	80012a8 <HAL_GetTick>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	1ad3      	subs	r3, r2, r3
 8001ca4:	2b02      	cmp	r3, #2
 8001ca6:	d901      	bls.n	8001cac <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001ca8:	2303      	movs	r3, #3
 8001caa:	e2dd      	b.n	8002268 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001cac:	4b20      	ldr	r3, [pc, #128]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f003 0302 	and.w	r3, r3, #2
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d1f0      	bne.n	8001c9a <HAL_RCC_OscConfig+0x1da>
 8001cb8:	e000      	b.n	8001cbc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001cba:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f003 0301 	and.w	r3, r3, #1
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d074      	beq.n	8001db2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001cc8:	69bb      	ldr	r3, [r7, #24]
 8001cca:	2b08      	cmp	r3, #8
 8001ccc:	d005      	beq.n	8001cda <HAL_RCC_OscConfig+0x21a>
 8001cce:	69bb      	ldr	r3, [r7, #24]
 8001cd0:	2b0c      	cmp	r3, #12
 8001cd2:	d10e      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	2b03      	cmp	r3, #3
 8001cd8:	d10b      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cda:	4b15      	ldr	r3, [pc, #84]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d064      	beq.n	8001db0 <HAL_RCC_OscConfig+0x2f0>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d160      	bne.n	8001db0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e2ba      	b.n	8002268 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cfa:	d106      	bne.n	8001d0a <HAL_RCC_OscConfig+0x24a>
 8001cfc:	4b0c      	ldr	r3, [pc, #48]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a0b      	ldr	r2, [pc, #44]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001d02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d06:	6013      	str	r3, [r2, #0]
 8001d08:	e026      	b.n	8001d58 <HAL_RCC_OscConfig+0x298>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d12:	d115      	bne.n	8001d40 <HAL_RCC_OscConfig+0x280>
 8001d14:	4b06      	ldr	r3, [pc, #24]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a05      	ldr	r2, [pc, #20]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001d1a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d1e:	6013      	str	r3, [r2, #0]
 8001d20:	4b03      	ldr	r3, [pc, #12]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a02      	ldr	r2, [pc, #8]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001d26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d2a:	6013      	str	r3, [r2, #0]
 8001d2c:	e014      	b.n	8001d58 <HAL_RCC_OscConfig+0x298>
 8001d2e:	bf00      	nop
 8001d30:	40021000 	.word	0x40021000
 8001d34:	0800635c 	.word	0x0800635c
 8001d38:	20000038 	.word	0x20000038
 8001d3c:	2000003c 	.word	0x2000003c
 8001d40:	4ba0      	ldr	r3, [pc, #640]	; (8001fc4 <HAL_RCC_OscConfig+0x504>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a9f      	ldr	r2, [pc, #636]	; (8001fc4 <HAL_RCC_OscConfig+0x504>)
 8001d46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d4a:	6013      	str	r3, [r2, #0]
 8001d4c:	4b9d      	ldr	r3, [pc, #628]	; (8001fc4 <HAL_RCC_OscConfig+0x504>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a9c      	ldr	r2, [pc, #624]	; (8001fc4 <HAL_RCC_OscConfig+0x504>)
 8001d52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d013      	beq.n	8001d88 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d60:	f7ff faa2 	bl	80012a8 <HAL_GetTick>
 8001d64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d66:	e008      	b.n	8001d7a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d68:	f7ff fa9e 	bl	80012a8 <HAL_GetTick>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	2b64      	cmp	r3, #100	; 0x64
 8001d74:	d901      	bls.n	8001d7a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001d76:	2303      	movs	r3, #3
 8001d78:	e276      	b.n	8002268 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d7a:	4b92      	ldr	r3, [pc, #584]	; (8001fc4 <HAL_RCC_OscConfig+0x504>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d0f0      	beq.n	8001d68 <HAL_RCC_OscConfig+0x2a8>
 8001d86:	e014      	b.n	8001db2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d88:	f7ff fa8e 	bl	80012a8 <HAL_GetTick>
 8001d8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d8e:	e008      	b.n	8001da2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d90:	f7ff fa8a 	bl	80012a8 <HAL_GetTick>
 8001d94:	4602      	mov	r2, r0
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	2b64      	cmp	r3, #100	; 0x64
 8001d9c:	d901      	bls.n	8001da2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001d9e:	2303      	movs	r3, #3
 8001da0:	e262      	b.n	8002268 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001da2:	4b88      	ldr	r3, [pc, #544]	; (8001fc4 <HAL_RCC_OscConfig+0x504>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d1f0      	bne.n	8001d90 <HAL_RCC_OscConfig+0x2d0>
 8001dae:	e000      	b.n	8001db2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001db0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 0302 	and.w	r3, r3, #2
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d060      	beq.n	8001e80 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001dbe:	69bb      	ldr	r3, [r7, #24]
 8001dc0:	2b04      	cmp	r3, #4
 8001dc2:	d005      	beq.n	8001dd0 <HAL_RCC_OscConfig+0x310>
 8001dc4:	69bb      	ldr	r3, [r7, #24]
 8001dc6:	2b0c      	cmp	r3, #12
 8001dc8:	d119      	bne.n	8001dfe <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	d116      	bne.n	8001dfe <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001dd0:	4b7c      	ldr	r3, [pc, #496]	; (8001fc4 <HAL_RCC_OscConfig+0x504>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d005      	beq.n	8001de8 <HAL_RCC_OscConfig+0x328>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d101      	bne.n	8001de8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	e23f      	b.n	8002268 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001de8:	4b76      	ldr	r3, [pc, #472]	; (8001fc4 <HAL_RCC_OscConfig+0x504>)
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	691b      	ldr	r3, [r3, #16]
 8001df4:	061b      	lsls	r3, r3, #24
 8001df6:	4973      	ldr	r1, [pc, #460]	; (8001fc4 <HAL_RCC_OscConfig+0x504>)
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001dfc:	e040      	b.n	8001e80 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	68db      	ldr	r3, [r3, #12]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d023      	beq.n	8001e4e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e06:	4b6f      	ldr	r3, [pc, #444]	; (8001fc4 <HAL_RCC_OscConfig+0x504>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a6e      	ldr	r2, [pc, #440]	; (8001fc4 <HAL_RCC_OscConfig+0x504>)
 8001e0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e12:	f7ff fa49 	bl	80012a8 <HAL_GetTick>
 8001e16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e18:	e008      	b.n	8001e2c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e1a:	f7ff fa45 	bl	80012a8 <HAL_GetTick>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	1ad3      	subs	r3, r2, r3
 8001e24:	2b02      	cmp	r3, #2
 8001e26:	d901      	bls.n	8001e2c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001e28:	2303      	movs	r3, #3
 8001e2a:	e21d      	b.n	8002268 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e2c:	4b65      	ldr	r3, [pc, #404]	; (8001fc4 <HAL_RCC_OscConfig+0x504>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d0f0      	beq.n	8001e1a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e38:	4b62      	ldr	r3, [pc, #392]	; (8001fc4 <HAL_RCC_OscConfig+0x504>)
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	691b      	ldr	r3, [r3, #16]
 8001e44:	061b      	lsls	r3, r3, #24
 8001e46:	495f      	ldr	r1, [pc, #380]	; (8001fc4 <HAL_RCC_OscConfig+0x504>)
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	604b      	str	r3, [r1, #4]
 8001e4c:	e018      	b.n	8001e80 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e4e:	4b5d      	ldr	r3, [pc, #372]	; (8001fc4 <HAL_RCC_OscConfig+0x504>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a5c      	ldr	r2, [pc, #368]	; (8001fc4 <HAL_RCC_OscConfig+0x504>)
 8001e54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e5a:	f7ff fa25 	bl	80012a8 <HAL_GetTick>
 8001e5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e60:	e008      	b.n	8001e74 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e62:	f7ff fa21 	bl	80012a8 <HAL_GetTick>
 8001e66:	4602      	mov	r2, r0
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	1ad3      	subs	r3, r2, r3
 8001e6c:	2b02      	cmp	r3, #2
 8001e6e:	d901      	bls.n	8001e74 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001e70:	2303      	movs	r3, #3
 8001e72:	e1f9      	b.n	8002268 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e74:	4b53      	ldr	r3, [pc, #332]	; (8001fc4 <HAL_RCC_OscConfig+0x504>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d1f0      	bne.n	8001e62 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 0308 	and.w	r3, r3, #8
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d03c      	beq.n	8001f06 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	695b      	ldr	r3, [r3, #20]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d01c      	beq.n	8001ece <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e94:	4b4b      	ldr	r3, [pc, #300]	; (8001fc4 <HAL_RCC_OscConfig+0x504>)
 8001e96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e9a:	4a4a      	ldr	r2, [pc, #296]	; (8001fc4 <HAL_RCC_OscConfig+0x504>)
 8001e9c:	f043 0301 	orr.w	r3, r3, #1
 8001ea0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ea4:	f7ff fa00 	bl	80012a8 <HAL_GetTick>
 8001ea8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001eaa:	e008      	b.n	8001ebe <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001eac:	f7ff f9fc 	bl	80012a8 <HAL_GetTick>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	2b02      	cmp	r3, #2
 8001eb8:	d901      	bls.n	8001ebe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001eba:	2303      	movs	r3, #3
 8001ebc:	e1d4      	b.n	8002268 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ebe:	4b41      	ldr	r3, [pc, #260]	; (8001fc4 <HAL_RCC_OscConfig+0x504>)
 8001ec0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ec4:	f003 0302 	and.w	r3, r3, #2
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d0ef      	beq.n	8001eac <HAL_RCC_OscConfig+0x3ec>
 8001ecc:	e01b      	b.n	8001f06 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ece:	4b3d      	ldr	r3, [pc, #244]	; (8001fc4 <HAL_RCC_OscConfig+0x504>)
 8001ed0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ed4:	4a3b      	ldr	r2, [pc, #236]	; (8001fc4 <HAL_RCC_OscConfig+0x504>)
 8001ed6:	f023 0301 	bic.w	r3, r3, #1
 8001eda:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ede:	f7ff f9e3 	bl	80012a8 <HAL_GetTick>
 8001ee2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ee4:	e008      	b.n	8001ef8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ee6:	f7ff f9df 	bl	80012a8 <HAL_GetTick>
 8001eea:	4602      	mov	r2, r0
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	1ad3      	subs	r3, r2, r3
 8001ef0:	2b02      	cmp	r3, #2
 8001ef2:	d901      	bls.n	8001ef8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	e1b7      	b.n	8002268 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ef8:	4b32      	ldr	r3, [pc, #200]	; (8001fc4 <HAL_RCC_OscConfig+0x504>)
 8001efa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001efe:	f003 0302 	and.w	r3, r3, #2
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d1ef      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 0304 	and.w	r3, r3, #4
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	f000 80a6 	beq.w	8002060 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f14:	2300      	movs	r3, #0
 8001f16:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001f18:	4b2a      	ldr	r3, [pc, #168]	; (8001fc4 <HAL_RCC_OscConfig+0x504>)
 8001f1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d10d      	bne.n	8001f40 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f24:	4b27      	ldr	r3, [pc, #156]	; (8001fc4 <HAL_RCC_OscConfig+0x504>)
 8001f26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f28:	4a26      	ldr	r2, [pc, #152]	; (8001fc4 <HAL_RCC_OscConfig+0x504>)
 8001f2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f2e:	6593      	str	r3, [r2, #88]	; 0x58
 8001f30:	4b24      	ldr	r3, [pc, #144]	; (8001fc4 <HAL_RCC_OscConfig+0x504>)
 8001f32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f38:	60bb      	str	r3, [r7, #8]
 8001f3a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f40:	4b21      	ldr	r3, [pc, #132]	; (8001fc8 <HAL_RCC_OscConfig+0x508>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d118      	bne.n	8001f7e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f4c:	4b1e      	ldr	r3, [pc, #120]	; (8001fc8 <HAL_RCC_OscConfig+0x508>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a1d      	ldr	r2, [pc, #116]	; (8001fc8 <HAL_RCC_OscConfig+0x508>)
 8001f52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f56:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f58:	f7ff f9a6 	bl	80012a8 <HAL_GetTick>
 8001f5c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f5e:	e008      	b.n	8001f72 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f60:	f7ff f9a2 	bl	80012a8 <HAL_GetTick>
 8001f64:	4602      	mov	r2, r0
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	2b02      	cmp	r3, #2
 8001f6c:	d901      	bls.n	8001f72 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	e17a      	b.n	8002268 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f72:	4b15      	ldr	r3, [pc, #84]	; (8001fc8 <HAL_RCC_OscConfig+0x508>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d0f0      	beq.n	8001f60 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d108      	bne.n	8001f98 <HAL_RCC_OscConfig+0x4d8>
 8001f86:	4b0f      	ldr	r3, [pc, #60]	; (8001fc4 <HAL_RCC_OscConfig+0x504>)
 8001f88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f8c:	4a0d      	ldr	r2, [pc, #52]	; (8001fc4 <HAL_RCC_OscConfig+0x504>)
 8001f8e:	f043 0301 	orr.w	r3, r3, #1
 8001f92:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f96:	e029      	b.n	8001fec <HAL_RCC_OscConfig+0x52c>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	2b05      	cmp	r3, #5
 8001f9e:	d115      	bne.n	8001fcc <HAL_RCC_OscConfig+0x50c>
 8001fa0:	4b08      	ldr	r3, [pc, #32]	; (8001fc4 <HAL_RCC_OscConfig+0x504>)
 8001fa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fa6:	4a07      	ldr	r2, [pc, #28]	; (8001fc4 <HAL_RCC_OscConfig+0x504>)
 8001fa8:	f043 0304 	orr.w	r3, r3, #4
 8001fac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fb0:	4b04      	ldr	r3, [pc, #16]	; (8001fc4 <HAL_RCC_OscConfig+0x504>)
 8001fb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fb6:	4a03      	ldr	r2, [pc, #12]	; (8001fc4 <HAL_RCC_OscConfig+0x504>)
 8001fb8:	f043 0301 	orr.w	r3, r3, #1
 8001fbc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fc0:	e014      	b.n	8001fec <HAL_RCC_OscConfig+0x52c>
 8001fc2:	bf00      	nop
 8001fc4:	40021000 	.word	0x40021000
 8001fc8:	40007000 	.word	0x40007000
 8001fcc:	4b9c      	ldr	r3, [pc, #624]	; (8002240 <HAL_RCC_OscConfig+0x780>)
 8001fce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fd2:	4a9b      	ldr	r2, [pc, #620]	; (8002240 <HAL_RCC_OscConfig+0x780>)
 8001fd4:	f023 0301 	bic.w	r3, r3, #1
 8001fd8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fdc:	4b98      	ldr	r3, [pc, #608]	; (8002240 <HAL_RCC_OscConfig+0x780>)
 8001fde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fe2:	4a97      	ldr	r2, [pc, #604]	; (8002240 <HAL_RCC_OscConfig+0x780>)
 8001fe4:	f023 0304 	bic.w	r3, r3, #4
 8001fe8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d016      	beq.n	8002022 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ff4:	f7ff f958 	bl	80012a8 <HAL_GetTick>
 8001ff8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ffa:	e00a      	b.n	8002012 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ffc:	f7ff f954 	bl	80012a8 <HAL_GetTick>
 8002000:	4602      	mov	r2, r0
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	f241 3288 	movw	r2, #5000	; 0x1388
 800200a:	4293      	cmp	r3, r2
 800200c:	d901      	bls.n	8002012 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800200e:	2303      	movs	r3, #3
 8002010:	e12a      	b.n	8002268 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002012:	4b8b      	ldr	r3, [pc, #556]	; (8002240 <HAL_RCC_OscConfig+0x780>)
 8002014:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002018:	f003 0302 	and.w	r3, r3, #2
 800201c:	2b00      	cmp	r3, #0
 800201e:	d0ed      	beq.n	8001ffc <HAL_RCC_OscConfig+0x53c>
 8002020:	e015      	b.n	800204e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002022:	f7ff f941 	bl	80012a8 <HAL_GetTick>
 8002026:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002028:	e00a      	b.n	8002040 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800202a:	f7ff f93d 	bl	80012a8 <HAL_GetTick>
 800202e:	4602      	mov	r2, r0
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	1ad3      	subs	r3, r2, r3
 8002034:	f241 3288 	movw	r2, #5000	; 0x1388
 8002038:	4293      	cmp	r3, r2
 800203a:	d901      	bls.n	8002040 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800203c:	2303      	movs	r3, #3
 800203e:	e113      	b.n	8002268 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002040:	4b7f      	ldr	r3, [pc, #508]	; (8002240 <HAL_RCC_OscConfig+0x780>)
 8002042:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002046:	f003 0302 	and.w	r3, r3, #2
 800204a:	2b00      	cmp	r3, #0
 800204c:	d1ed      	bne.n	800202a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800204e:	7ffb      	ldrb	r3, [r7, #31]
 8002050:	2b01      	cmp	r3, #1
 8002052:	d105      	bne.n	8002060 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002054:	4b7a      	ldr	r3, [pc, #488]	; (8002240 <HAL_RCC_OscConfig+0x780>)
 8002056:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002058:	4a79      	ldr	r2, [pc, #484]	; (8002240 <HAL_RCC_OscConfig+0x780>)
 800205a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800205e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002064:	2b00      	cmp	r3, #0
 8002066:	f000 80fe 	beq.w	8002266 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800206e:	2b02      	cmp	r3, #2
 8002070:	f040 80d0 	bne.w	8002214 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002074:	4b72      	ldr	r3, [pc, #456]	; (8002240 <HAL_RCC_OscConfig+0x780>)
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	f003 0203 	and.w	r2, r3, #3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002084:	429a      	cmp	r2, r3
 8002086:	d130      	bne.n	80020ea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002092:	3b01      	subs	r3, #1
 8002094:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002096:	429a      	cmp	r2, r3
 8002098:	d127      	bne.n	80020ea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020a4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d11f      	bne.n	80020ea <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020b0:	687a      	ldr	r2, [r7, #4]
 80020b2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80020b4:	2a07      	cmp	r2, #7
 80020b6:	bf14      	ite	ne
 80020b8:	2201      	movne	r2, #1
 80020ba:	2200      	moveq	r2, #0
 80020bc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80020be:	4293      	cmp	r3, r2
 80020c0:	d113      	bne.n	80020ea <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020cc:	085b      	lsrs	r3, r3, #1
 80020ce:	3b01      	subs	r3, #1
 80020d0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80020d2:	429a      	cmp	r2, r3
 80020d4:	d109      	bne.n	80020ea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e0:	085b      	lsrs	r3, r3, #1
 80020e2:	3b01      	subs	r3, #1
 80020e4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020e6:	429a      	cmp	r2, r3
 80020e8:	d06e      	beq.n	80021c8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80020ea:	69bb      	ldr	r3, [r7, #24]
 80020ec:	2b0c      	cmp	r3, #12
 80020ee:	d069      	beq.n	80021c4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80020f0:	4b53      	ldr	r3, [pc, #332]	; (8002240 <HAL_RCC_OscConfig+0x780>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d105      	bne.n	8002108 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80020fc:	4b50      	ldr	r3, [pc, #320]	; (8002240 <HAL_RCC_OscConfig+0x780>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002104:	2b00      	cmp	r3, #0
 8002106:	d001      	beq.n	800210c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	e0ad      	b.n	8002268 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800210c:	4b4c      	ldr	r3, [pc, #304]	; (8002240 <HAL_RCC_OscConfig+0x780>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a4b      	ldr	r2, [pc, #300]	; (8002240 <HAL_RCC_OscConfig+0x780>)
 8002112:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002116:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002118:	f7ff f8c6 	bl	80012a8 <HAL_GetTick>
 800211c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800211e:	e008      	b.n	8002132 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002120:	f7ff f8c2 	bl	80012a8 <HAL_GetTick>
 8002124:	4602      	mov	r2, r0
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	2b02      	cmp	r3, #2
 800212c:	d901      	bls.n	8002132 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800212e:	2303      	movs	r3, #3
 8002130:	e09a      	b.n	8002268 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002132:	4b43      	ldr	r3, [pc, #268]	; (8002240 <HAL_RCC_OscConfig+0x780>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d1f0      	bne.n	8002120 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800213e:	4b40      	ldr	r3, [pc, #256]	; (8002240 <HAL_RCC_OscConfig+0x780>)
 8002140:	68da      	ldr	r2, [r3, #12]
 8002142:	4b40      	ldr	r3, [pc, #256]	; (8002244 <HAL_RCC_OscConfig+0x784>)
 8002144:	4013      	ands	r3, r2
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800214a:	687a      	ldr	r2, [r7, #4]
 800214c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800214e:	3a01      	subs	r2, #1
 8002150:	0112      	lsls	r2, r2, #4
 8002152:	4311      	orrs	r1, r2
 8002154:	687a      	ldr	r2, [r7, #4]
 8002156:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002158:	0212      	lsls	r2, r2, #8
 800215a:	4311      	orrs	r1, r2
 800215c:	687a      	ldr	r2, [r7, #4]
 800215e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002160:	0852      	lsrs	r2, r2, #1
 8002162:	3a01      	subs	r2, #1
 8002164:	0552      	lsls	r2, r2, #21
 8002166:	4311      	orrs	r1, r2
 8002168:	687a      	ldr	r2, [r7, #4]
 800216a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800216c:	0852      	lsrs	r2, r2, #1
 800216e:	3a01      	subs	r2, #1
 8002170:	0652      	lsls	r2, r2, #25
 8002172:	4311      	orrs	r1, r2
 8002174:	687a      	ldr	r2, [r7, #4]
 8002176:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002178:	0912      	lsrs	r2, r2, #4
 800217a:	0452      	lsls	r2, r2, #17
 800217c:	430a      	orrs	r2, r1
 800217e:	4930      	ldr	r1, [pc, #192]	; (8002240 <HAL_RCC_OscConfig+0x780>)
 8002180:	4313      	orrs	r3, r2
 8002182:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002184:	4b2e      	ldr	r3, [pc, #184]	; (8002240 <HAL_RCC_OscConfig+0x780>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a2d      	ldr	r2, [pc, #180]	; (8002240 <HAL_RCC_OscConfig+0x780>)
 800218a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800218e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002190:	4b2b      	ldr	r3, [pc, #172]	; (8002240 <HAL_RCC_OscConfig+0x780>)
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	4a2a      	ldr	r2, [pc, #168]	; (8002240 <HAL_RCC_OscConfig+0x780>)
 8002196:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800219a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800219c:	f7ff f884 	bl	80012a8 <HAL_GetTick>
 80021a0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021a2:	e008      	b.n	80021b6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021a4:	f7ff f880 	bl	80012a8 <HAL_GetTick>
 80021a8:	4602      	mov	r2, r0
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	2b02      	cmp	r3, #2
 80021b0:	d901      	bls.n	80021b6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80021b2:	2303      	movs	r3, #3
 80021b4:	e058      	b.n	8002268 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021b6:	4b22      	ldr	r3, [pc, #136]	; (8002240 <HAL_RCC_OscConfig+0x780>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d0f0      	beq.n	80021a4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80021c2:	e050      	b.n	8002266 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	e04f      	b.n	8002268 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021c8:	4b1d      	ldr	r3, [pc, #116]	; (8002240 <HAL_RCC_OscConfig+0x780>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d148      	bne.n	8002266 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80021d4:	4b1a      	ldr	r3, [pc, #104]	; (8002240 <HAL_RCC_OscConfig+0x780>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a19      	ldr	r2, [pc, #100]	; (8002240 <HAL_RCC_OscConfig+0x780>)
 80021da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021de:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80021e0:	4b17      	ldr	r3, [pc, #92]	; (8002240 <HAL_RCC_OscConfig+0x780>)
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	4a16      	ldr	r2, [pc, #88]	; (8002240 <HAL_RCC_OscConfig+0x780>)
 80021e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021ea:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80021ec:	f7ff f85c 	bl	80012a8 <HAL_GetTick>
 80021f0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021f2:	e008      	b.n	8002206 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021f4:	f7ff f858 	bl	80012a8 <HAL_GetTick>
 80021f8:	4602      	mov	r2, r0
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	2b02      	cmp	r3, #2
 8002200:	d901      	bls.n	8002206 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002202:	2303      	movs	r3, #3
 8002204:	e030      	b.n	8002268 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002206:	4b0e      	ldr	r3, [pc, #56]	; (8002240 <HAL_RCC_OscConfig+0x780>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800220e:	2b00      	cmp	r3, #0
 8002210:	d0f0      	beq.n	80021f4 <HAL_RCC_OscConfig+0x734>
 8002212:	e028      	b.n	8002266 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002214:	69bb      	ldr	r3, [r7, #24]
 8002216:	2b0c      	cmp	r3, #12
 8002218:	d023      	beq.n	8002262 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800221a:	4b09      	ldr	r3, [pc, #36]	; (8002240 <HAL_RCC_OscConfig+0x780>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a08      	ldr	r2, [pc, #32]	; (8002240 <HAL_RCC_OscConfig+0x780>)
 8002220:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002224:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002226:	f7ff f83f 	bl	80012a8 <HAL_GetTick>
 800222a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800222c:	e00c      	b.n	8002248 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800222e:	f7ff f83b 	bl	80012a8 <HAL_GetTick>
 8002232:	4602      	mov	r2, r0
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	1ad3      	subs	r3, r2, r3
 8002238:	2b02      	cmp	r3, #2
 800223a:	d905      	bls.n	8002248 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800223c:	2303      	movs	r3, #3
 800223e:	e013      	b.n	8002268 <HAL_RCC_OscConfig+0x7a8>
 8002240:	40021000 	.word	0x40021000
 8002244:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002248:	4b09      	ldr	r3, [pc, #36]	; (8002270 <HAL_RCC_OscConfig+0x7b0>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002250:	2b00      	cmp	r3, #0
 8002252:	d1ec      	bne.n	800222e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002254:	4b06      	ldr	r3, [pc, #24]	; (8002270 <HAL_RCC_OscConfig+0x7b0>)
 8002256:	68da      	ldr	r2, [r3, #12]
 8002258:	4905      	ldr	r1, [pc, #20]	; (8002270 <HAL_RCC_OscConfig+0x7b0>)
 800225a:	4b06      	ldr	r3, [pc, #24]	; (8002274 <HAL_RCC_OscConfig+0x7b4>)
 800225c:	4013      	ands	r3, r2
 800225e:	60cb      	str	r3, [r1, #12]
 8002260:	e001      	b.n	8002266 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e000      	b.n	8002268 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002266:	2300      	movs	r3, #0
}
 8002268:	4618      	mov	r0, r3
 800226a:	3720      	adds	r7, #32
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}
 8002270:	40021000 	.word	0x40021000
 8002274:	feeefffc 	.word	0xfeeefffc

08002278 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d101      	bne.n	800228c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e0e7      	b.n	800245c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800228c:	4b75      	ldr	r3, [pc, #468]	; (8002464 <HAL_RCC_ClockConfig+0x1ec>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 0307 	and.w	r3, r3, #7
 8002294:	683a      	ldr	r2, [r7, #0]
 8002296:	429a      	cmp	r2, r3
 8002298:	d910      	bls.n	80022bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800229a:	4b72      	ldr	r3, [pc, #456]	; (8002464 <HAL_RCC_ClockConfig+0x1ec>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f023 0207 	bic.w	r2, r3, #7
 80022a2:	4970      	ldr	r1, [pc, #448]	; (8002464 <HAL_RCC_ClockConfig+0x1ec>)
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	4313      	orrs	r3, r2
 80022a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022aa:	4b6e      	ldr	r3, [pc, #440]	; (8002464 <HAL_RCC_ClockConfig+0x1ec>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0307 	and.w	r3, r3, #7
 80022b2:	683a      	ldr	r2, [r7, #0]
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d001      	beq.n	80022bc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e0cf      	b.n	800245c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 0302 	and.w	r3, r3, #2
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d010      	beq.n	80022ea <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	689a      	ldr	r2, [r3, #8]
 80022cc:	4b66      	ldr	r3, [pc, #408]	; (8002468 <HAL_RCC_ClockConfig+0x1f0>)
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d908      	bls.n	80022ea <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022d8:	4b63      	ldr	r3, [pc, #396]	; (8002468 <HAL_RCC_ClockConfig+0x1f0>)
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	4960      	ldr	r1, [pc, #384]	; (8002468 <HAL_RCC_ClockConfig+0x1f0>)
 80022e6:	4313      	orrs	r3, r2
 80022e8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 0301 	and.w	r3, r3, #1
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d04c      	beq.n	8002390 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	2b03      	cmp	r3, #3
 80022fc:	d107      	bne.n	800230e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022fe:	4b5a      	ldr	r3, [pc, #360]	; (8002468 <HAL_RCC_ClockConfig+0x1f0>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d121      	bne.n	800234e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e0a6      	b.n	800245c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	2b02      	cmp	r3, #2
 8002314:	d107      	bne.n	8002326 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002316:	4b54      	ldr	r3, [pc, #336]	; (8002468 <HAL_RCC_ClockConfig+0x1f0>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d115      	bne.n	800234e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e09a      	b.n	800245c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d107      	bne.n	800233e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800232e:	4b4e      	ldr	r3, [pc, #312]	; (8002468 <HAL_RCC_ClockConfig+0x1f0>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0302 	and.w	r3, r3, #2
 8002336:	2b00      	cmp	r3, #0
 8002338:	d109      	bne.n	800234e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e08e      	b.n	800245c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800233e:	4b4a      	ldr	r3, [pc, #296]	; (8002468 <HAL_RCC_ClockConfig+0x1f0>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002346:	2b00      	cmp	r3, #0
 8002348:	d101      	bne.n	800234e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e086      	b.n	800245c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800234e:	4b46      	ldr	r3, [pc, #280]	; (8002468 <HAL_RCC_ClockConfig+0x1f0>)
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	f023 0203 	bic.w	r2, r3, #3
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	4943      	ldr	r1, [pc, #268]	; (8002468 <HAL_RCC_ClockConfig+0x1f0>)
 800235c:	4313      	orrs	r3, r2
 800235e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002360:	f7fe ffa2 	bl	80012a8 <HAL_GetTick>
 8002364:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002366:	e00a      	b.n	800237e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002368:	f7fe ff9e 	bl	80012a8 <HAL_GetTick>
 800236c:	4602      	mov	r2, r0
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	f241 3288 	movw	r2, #5000	; 0x1388
 8002376:	4293      	cmp	r3, r2
 8002378:	d901      	bls.n	800237e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800237a:	2303      	movs	r3, #3
 800237c:	e06e      	b.n	800245c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800237e:	4b3a      	ldr	r3, [pc, #232]	; (8002468 <HAL_RCC_ClockConfig+0x1f0>)
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	f003 020c 	and.w	r2, r3, #12
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	429a      	cmp	r2, r3
 800238e:	d1eb      	bne.n	8002368 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0302 	and.w	r3, r3, #2
 8002398:	2b00      	cmp	r3, #0
 800239a:	d010      	beq.n	80023be <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	689a      	ldr	r2, [r3, #8]
 80023a0:	4b31      	ldr	r3, [pc, #196]	; (8002468 <HAL_RCC_ClockConfig+0x1f0>)
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d208      	bcs.n	80023be <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023ac:	4b2e      	ldr	r3, [pc, #184]	; (8002468 <HAL_RCC_ClockConfig+0x1f0>)
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	492b      	ldr	r1, [pc, #172]	; (8002468 <HAL_RCC_ClockConfig+0x1f0>)
 80023ba:	4313      	orrs	r3, r2
 80023bc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023be:	4b29      	ldr	r3, [pc, #164]	; (8002464 <HAL_RCC_ClockConfig+0x1ec>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 0307 	and.w	r3, r3, #7
 80023c6:	683a      	ldr	r2, [r7, #0]
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d210      	bcs.n	80023ee <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023cc:	4b25      	ldr	r3, [pc, #148]	; (8002464 <HAL_RCC_ClockConfig+0x1ec>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f023 0207 	bic.w	r2, r3, #7
 80023d4:	4923      	ldr	r1, [pc, #140]	; (8002464 <HAL_RCC_ClockConfig+0x1ec>)
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	4313      	orrs	r3, r2
 80023da:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023dc:	4b21      	ldr	r3, [pc, #132]	; (8002464 <HAL_RCC_ClockConfig+0x1ec>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 0307 	and.w	r3, r3, #7
 80023e4:	683a      	ldr	r2, [r7, #0]
 80023e6:	429a      	cmp	r2, r3
 80023e8:	d001      	beq.n	80023ee <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e036      	b.n	800245c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0304 	and.w	r3, r3, #4
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d008      	beq.n	800240c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023fa:	4b1b      	ldr	r3, [pc, #108]	; (8002468 <HAL_RCC_ClockConfig+0x1f0>)
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	68db      	ldr	r3, [r3, #12]
 8002406:	4918      	ldr	r1, [pc, #96]	; (8002468 <HAL_RCC_ClockConfig+0x1f0>)
 8002408:	4313      	orrs	r3, r2
 800240a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 0308 	and.w	r3, r3, #8
 8002414:	2b00      	cmp	r3, #0
 8002416:	d009      	beq.n	800242c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002418:	4b13      	ldr	r3, [pc, #76]	; (8002468 <HAL_RCC_ClockConfig+0x1f0>)
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	691b      	ldr	r3, [r3, #16]
 8002424:	00db      	lsls	r3, r3, #3
 8002426:	4910      	ldr	r1, [pc, #64]	; (8002468 <HAL_RCC_ClockConfig+0x1f0>)
 8002428:	4313      	orrs	r3, r2
 800242a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800242c:	f000 f824 	bl	8002478 <HAL_RCC_GetSysClockFreq>
 8002430:	4602      	mov	r2, r0
 8002432:	4b0d      	ldr	r3, [pc, #52]	; (8002468 <HAL_RCC_ClockConfig+0x1f0>)
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	091b      	lsrs	r3, r3, #4
 8002438:	f003 030f 	and.w	r3, r3, #15
 800243c:	490b      	ldr	r1, [pc, #44]	; (800246c <HAL_RCC_ClockConfig+0x1f4>)
 800243e:	5ccb      	ldrb	r3, [r1, r3]
 8002440:	f003 031f 	and.w	r3, r3, #31
 8002444:	fa22 f303 	lsr.w	r3, r2, r3
 8002448:	4a09      	ldr	r2, [pc, #36]	; (8002470 <HAL_RCC_ClockConfig+0x1f8>)
 800244a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800244c:	4b09      	ldr	r3, [pc, #36]	; (8002474 <HAL_RCC_ClockConfig+0x1fc>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4618      	mov	r0, r3
 8002452:	f7fe fed9 	bl	8001208 <HAL_InitTick>
 8002456:	4603      	mov	r3, r0
 8002458:	72fb      	strb	r3, [r7, #11]

  return status;
 800245a:	7afb      	ldrb	r3, [r7, #11]
}
 800245c:	4618      	mov	r0, r3
 800245e:	3710      	adds	r7, #16
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}
 8002464:	40022000 	.word	0x40022000
 8002468:	40021000 	.word	0x40021000
 800246c:	0800635c 	.word	0x0800635c
 8002470:	20000038 	.word	0x20000038
 8002474:	2000003c 	.word	0x2000003c

08002478 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002478:	b480      	push	{r7}
 800247a:	b089      	sub	sp, #36	; 0x24
 800247c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800247e:	2300      	movs	r3, #0
 8002480:	61fb      	str	r3, [r7, #28]
 8002482:	2300      	movs	r3, #0
 8002484:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002486:	4b3e      	ldr	r3, [pc, #248]	; (8002580 <HAL_RCC_GetSysClockFreq+0x108>)
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	f003 030c 	and.w	r3, r3, #12
 800248e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002490:	4b3b      	ldr	r3, [pc, #236]	; (8002580 <HAL_RCC_GetSysClockFreq+0x108>)
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	f003 0303 	and.w	r3, r3, #3
 8002498:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d005      	beq.n	80024ac <HAL_RCC_GetSysClockFreq+0x34>
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	2b0c      	cmp	r3, #12
 80024a4:	d121      	bne.n	80024ea <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d11e      	bne.n	80024ea <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80024ac:	4b34      	ldr	r3, [pc, #208]	; (8002580 <HAL_RCC_GetSysClockFreq+0x108>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 0308 	and.w	r3, r3, #8
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d107      	bne.n	80024c8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80024b8:	4b31      	ldr	r3, [pc, #196]	; (8002580 <HAL_RCC_GetSysClockFreq+0x108>)
 80024ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024be:	0a1b      	lsrs	r3, r3, #8
 80024c0:	f003 030f 	and.w	r3, r3, #15
 80024c4:	61fb      	str	r3, [r7, #28]
 80024c6:	e005      	b.n	80024d4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80024c8:	4b2d      	ldr	r3, [pc, #180]	; (8002580 <HAL_RCC_GetSysClockFreq+0x108>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	091b      	lsrs	r3, r3, #4
 80024ce:	f003 030f 	and.w	r3, r3, #15
 80024d2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80024d4:	4a2b      	ldr	r2, [pc, #172]	; (8002584 <HAL_RCC_GetSysClockFreq+0x10c>)
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024dc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d10d      	bne.n	8002500 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80024e8:	e00a      	b.n	8002500 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	2b04      	cmp	r3, #4
 80024ee:	d102      	bne.n	80024f6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80024f0:	4b25      	ldr	r3, [pc, #148]	; (8002588 <HAL_RCC_GetSysClockFreq+0x110>)
 80024f2:	61bb      	str	r3, [r7, #24]
 80024f4:	e004      	b.n	8002500 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	2b08      	cmp	r3, #8
 80024fa:	d101      	bne.n	8002500 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80024fc:	4b23      	ldr	r3, [pc, #140]	; (800258c <HAL_RCC_GetSysClockFreq+0x114>)
 80024fe:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	2b0c      	cmp	r3, #12
 8002504:	d134      	bne.n	8002570 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002506:	4b1e      	ldr	r3, [pc, #120]	; (8002580 <HAL_RCC_GetSysClockFreq+0x108>)
 8002508:	68db      	ldr	r3, [r3, #12]
 800250a:	f003 0303 	and.w	r3, r3, #3
 800250e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	2b02      	cmp	r3, #2
 8002514:	d003      	beq.n	800251e <HAL_RCC_GetSysClockFreq+0xa6>
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	2b03      	cmp	r3, #3
 800251a:	d003      	beq.n	8002524 <HAL_RCC_GetSysClockFreq+0xac>
 800251c:	e005      	b.n	800252a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800251e:	4b1a      	ldr	r3, [pc, #104]	; (8002588 <HAL_RCC_GetSysClockFreq+0x110>)
 8002520:	617b      	str	r3, [r7, #20]
      break;
 8002522:	e005      	b.n	8002530 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002524:	4b19      	ldr	r3, [pc, #100]	; (800258c <HAL_RCC_GetSysClockFreq+0x114>)
 8002526:	617b      	str	r3, [r7, #20]
      break;
 8002528:	e002      	b.n	8002530 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800252a:	69fb      	ldr	r3, [r7, #28]
 800252c:	617b      	str	r3, [r7, #20]
      break;
 800252e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002530:	4b13      	ldr	r3, [pc, #76]	; (8002580 <HAL_RCC_GetSysClockFreq+0x108>)
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	091b      	lsrs	r3, r3, #4
 8002536:	f003 0307 	and.w	r3, r3, #7
 800253a:	3301      	adds	r3, #1
 800253c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800253e:	4b10      	ldr	r3, [pc, #64]	; (8002580 <HAL_RCC_GetSysClockFreq+0x108>)
 8002540:	68db      	ldr	r3, [r3, #12]
 8002542:	0a1b      	lsrs	r3, r3, #8
 8002544:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002548:	697a      	ldr	r2, [r7, #20]
 800254a:	fb03 f202 	mul.w	r2, r3, r2
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	fbb2 f3f3 	udiv	r3, r2, r3
 8002554:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002556:	4b0a      	ldr	r3, [pc, #40]	; (8002580 <HAL_RCC_GetSysClockFreq+0x108>)
 8002558:	68db      	ldr	r3, [r3, #12]
 800255a:	0e5b      	lsrs	r3, r3, #25
 800255c:	f003 0303 	and.w	r3, r3, #3
 8002560:	3301      	adds	r3, #1
 8002562:	005b      	lsls	r3, r3, #1
 8002564:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002566:	697a      	ldr	r2, [r7, #20]
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	fbb2 f3f3 	udiv	r3, r2, r3
 800256e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002570:	69bb      	ldr	r3, [r7, #24]
}
 8002572:	4618      	mov	r0, r3
 8002574:	3724      	adds	r7, #36	; 0x24
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr
 800257e:	bf00      	nop
 8002580:	40021000 	.word	0x40021000
 8002584:	08006374 	.word	0x08006374
 8002588:	00f42400 	.word	0x00f42400
 800258c:	007a1200 	.word	0x007a1200

08002590 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002590:	b480      	push	{r7}
 8002592:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002594:	4b03      	ldr	r3, [pc, #12]	; (80025a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002596:	681b      	ldr	r3, [r3, #0]
}
 8002598:	4618      	mov	r0, r3
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr
 80025a2:	bf00      	nop
 80025a4:	20000038 	.word	0x20000038

080025a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80025ac:	f7ff fff0 	bl	8002590 <HAL_RCC_GetHCLKFreq>
 80025b0:	4602      	mov	r2, r0
 80025b2:	4b06      	ldr	r3, [pc, #24]	; (80025cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	0a1b      	lsrs	r3, r3, #8
 80025b8:	f003 0307 	and.w	r3, r3, #7
 80025bc:	4904      	ldr	r1, [pc, #16]	; (80025d0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80025be:	5ccb      	ldrb	r3, [r1, r3]
 80025c0:	f003 031f 	and.w	r3, r3, #31
 80025c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	40021000 	.word	0x40021000
 80025d0:	0800636c 	.word	0x0800636c

080025d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80025d8:	f7ff ffda 	bl	8002590 <HAL_RCC_GetHCLKFreq>
 80025dc:	4602      	mov	r2, r0
 80025de:	4b06      	ldr	r3, [pc, #24]	; (80025f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	0adb      	lsrs	r3, r3, #11
 80025e4:	f003 0307 	and.w	r3, r3, #7
 80025e8:	4904      	ldr	r1, [pc, #16]	; (80025fc <HAL_RCC_GetPCLK2Freq+0x28>)
 80025ea:	5ccb      	ldrb	r3, [r1, r3]
 80025ec:	f003 031f 	and.w	r3, r3, #31
 80025f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	40021000 	.word	0x40021000
 80025fc:	0800636c 	.word	0x0800636c

08002600 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b086      	sub	sp, #24
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002608:	2300      	movs	r3, #0
 800260a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800260c:	4b2a      	ldr	r3, [pc, #168]	; (80026b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800260e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002610:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002614:	2b00      	cmp	r3, #0
 8002616:	d003      	beq.n	8002620 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002618:	f7ff f9ee 	bl	80019f8 <HAL_PWREx_GetVoltageRange>
 800261c:	6178      	str	r0, [r7, #20]
 800261e:	e014      	b.n	800264a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002620:	4b25      	ldr	r3, [pc, #148]	; (80026b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002622:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002624:	4a24      	ldr	r2, [pc, #144]	; (80026b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002626:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800262a:	6593      	str	r3, [r2, #88]	; 0x58
 800262c:	4b22      	ldr	r3, [pc, #136]	; (80026b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800262e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002630:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002634:	60fb      	str	r3, [r7, #12]
 8002636:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002638:	f7ff f9de 	bl	80019f8 <HAL_PWREx_GetVoltageRange>
 800263c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800263e:	4b1e      	ldr	r3, [pc, #120]	; (80026b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002640:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002642:	4a1d      	ldr	r2, [pc, #116]	; (80026b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002644:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002648:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002650:	d10b      	bne.n	800266a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2b80      	cmp	r3, #128	; 0x80
 8002656:	d919      	bls.n	800268c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2ba0      	cmp	r3, #160	; 0xa0
 800265c:	d902      	bls.n	8002664 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800265e:	2302      	movs	r3, #2
 8002660:	613b      	str	r3, [r7, #16]
 8002662:	e013      	b.n	800268c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002664:	2301      	movs	r3, #1
 8002666:	613b      	str	r3, [r7, #16]
 8002668:	e010      	b.n	800268c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2b80      	cmp	r3, #128	; 0x80
 800266e:	d902      	bls.n	8002676 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002670:	2303      	movs	r3, #3
 8002672:	613b      	str	r3, [r7, #16]
 8002674:	e00a      	b.n	800268c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2b80      	cmp	r3, #128	; 0x80
 800267a:	d102      	bne.n	8002682 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800267c:	2302      	movs	r3, #2
 800267e:	613b      	str	r3, [r7, #16]
 8002680:	e004      	b.n	800268c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2b70      	cmp	r3, #112	; 0x70
 8002686:	d101      	bne.n	800268c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002688:	2301      	movs	r3, #1
 800268a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800268c:	4b0b      	ldr	r3, [pc, #44]	; (80026bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f023 0207 	bic.w	r2, r3, #7
 8002694:	4909      	ldr	r1, [pc, #36]	; (80026bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	4313      	orrs	r3, r2
 800269a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800269c:	4b07      	ldr	r3, [pc, #28]	; (80026bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 0307 	and.w	r3, r3, #7
 80026a4:	693a      	ldr	r2, [r7, #16]
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d001      	beq.n	80026ae <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e000      	b.n	80026b0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80026ae:	2300      	movs	r3, #0
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3718      	adds	r7, #24
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	40021000 	.word	0x40021000
 80026bc:	40022000 	.word	0x40022000

080026c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b086      	sub	sp, #24
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80026c8:	2300      	movs	r3, #0
 80026ca:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80026cc:	2300      	movs	r3, #0
 80026ce:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d041      	beq.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80026e0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80026e4:	d02a      	beq.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80026e6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80026ea:	d824      	bhi.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80026ec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80026f0:	d008      	beq.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80026f2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80026f6:	d81e      	bhi.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d00a      	beq.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80026fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002700:	d010      	beq.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002702:	e018      	b.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002704:	4b86      	ldr	r3, [pc, #536]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	4a85      	ldr	r2, [pc, #532]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800270a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800270e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002710:	e015      	b.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	3304      	adds	r3, #4
 8002716:	2100      	movs	r1, #0
 8002718:	4618      	mov	r0, r3
 800271a:	f000 fabb 	bl	8002c94 <RCCEx_PLLSAI1_Config>
 800271e:	4603      	mov	r3, r0
 8002720:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002722:	e00c      	b.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	3320      	adds	r3, #32
 8002728:	2100      	movs	r1, #0
 800272a:	4618      	mov	r0, r3
 800272c:	f000 fba6 	bl	8002e7c <RCCEx_PLLSAI2_Config>
 8002730:	4603      	mov	r3, r0
 8002732:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002734:	e003      	b.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	74fb      	strb	r3, [r7, #19]
      break;
 800273a:	e000      	b.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800273c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800273e:	7cfb      	ldrb	r3, [r7, #19]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d10b      	bne.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002744:	4b76      	ldr	r3, [pc, #472]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002746:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800274a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002752:	4973      	ldr	r1, [pc, #460]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002754:	4313      	orrs	r3, r2
 8002756:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800275a:	e001      	b.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800275c:	7cfb      	ldrb	r3, [r7, #19]
 800275e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002768:	2b00      	cmp	r3, #0
 800276a:	d041      	beq.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002770:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002774:	d02a      	beq.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002776:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800277a:	d824      	bhi.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800277c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002780:	d008      	beq.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002782:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002786:	d81e      	bhi.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002788:	2b00      	cmp	r3, #0
 800278a:	d00a      	beq.n	80027a2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800278c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002790:	d010      	beq.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002792:	e018      	b.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002794:	4b62      	ldr	r3, [pc, #392]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	4a61      	ldr	r2, [pc, #388]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800279a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800279e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80027a0:	e015      	b.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	3304      	adds	r3, #4
 80027a6:	2100      	movs	r1, #0
 80027a8:	4618      	mov	r0, r3
 80027aa:	f000 fa73 	bl	8002c94 <RCCEx_PLLSAI1_Config>
 80027ae:	4603      	mov	r3, r0
 80027b0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80027b2:	e00c      	b.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	3320      	adds	r3, #32
 80027b8:	2100      	movs	r1, #0
 80027ba:	4618      	mov	r0, r3
 80027bc:	f000 fb5e 	bl	8002e7c <RCCEx_PLLSAI2_Config>
 80027c0:	4603      	mov	r3, r0
 80027c2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80027c4:	e003      	b.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	74fb      	strb	r3, [r7, #19]
      break;
 80027ca:	e000      	b.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80027cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80027ce:	7cfb      	ldrb	r3, [r7, #19]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d10b      	bne.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80027d4:	4b52      	ldr	r3, [pc, #328]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027da:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80027e2:	494f      	ldr	r1, [pc, #316]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027e4:	4313      	orrs	r3, r2
 80027e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80027ea:	e001      	b.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027ec:	7cfb      	ldrb	r3, [r7, #19]
 80027ee:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	f000 80a0 	beq.w	800293e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027fe:	2300      	movs	r3, #0
 8002800:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002802:	4b47      	ldr	r3, [pc, #284]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002804:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002806:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d101      	bne.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800280e:	2301      	movs	r3, #1
 8002810:	e000      	b.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002812:	2300      	movs	r3, #0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d00d      	beq.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002818:	4b41      	ldr	r3, [pc, #260]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800281a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800281c:	4a40      	ldr	r2, [pc, #256]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800281e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002822:	6593      	str	r3, [r2, #88]	; 0x58
 8002824:	4b3e      	ldr	r3, [pc, #248]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002826:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002828:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800282c:	60bb      	str	r3, [r7, #8]
 800282e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002830:	2301      	movs	r3, #1
 8002832:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002834:	4b3b      	ldr	r3, [pc, #236]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a3a      	ldr	r2, [pc, #232]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800283a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800283e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002840:	f7fe fd32 	bl	80012a8 <HAL_GetTick>
 8002844:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002846:	e009      	b.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002848:	f7fe fd2e 	bl	80012a8 <HAL_GetTick>
 800284c:	4602      	mov	r2, r0
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	2b02      	cmp	r3, #2
 8002854:	d902      	bls.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002856:	2303      	movs	r3, #3
 8002858:	74fb      	strb	r3, [r7, #19]
        break;
 800285a:	e005      	b.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800285c:	4b31      	ldr	r3, [pc, #196]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002864:	2b00      	cmp	r3, #0
 8002866:	d0ef      	beq.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002868:	7cfb      	ldrb	r3, [r7, #19]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d15c      	bne.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800286e:	4b2c      	ldr	r3, [pc, #176]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002870:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002874:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002878:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d01f      	beq.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002886:	697a      	ldr	r2, [r7, #20]
 8002888:	429a      	cmp	r2, r3
 800288a:	d019      	beq.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800288c:	4b24      	ldr	r3, [pc, #144]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800288e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002892:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002896:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002898:	4b21      	ldr	r3, [pc, #132]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800289a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800289e:	4a20      	ldr	r2, [pc, #128]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80028a8:	4b1d      	ldr	r3, [pc, #116]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028ae:	4a1c      	ldr	r2, [pc, #112]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80028b8:	4a19      	ldr	r2, [pc, #100]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	f003 0301 	and.w	r3, r3, #1
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d016      	beq.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ca:	f7fe fced 	bl	80012a8 <HAL_GetTick>
 80028ce:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028d0:	e00b      	b.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028d2:	f7fe fce9 	bl	80012a8 <HAL_GetTick>
 80028d6:	4602      	mov	r2, r0
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	1ad3      	subs	r3, r2, r3
 80028dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d902      	bls.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80028e4:	2303      	movs	r3, #3
 80028e6:	74fb      	strb	r3, [r7, #19]
            break;
 80028e8:	e006      	b.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028ea:	4b0d      	ldr	r3, [pc, #52]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028f0:	f003 0302 	and.w	r3, r3, #2
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d0ec      	beq.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80028f8:	7cfb      	ldrb	r3, [r7, #19]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d10c      	bne.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028fe:	4b08      	ldr	r3, [pc, #32]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002900:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002904:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800290e:	4904      	ldr	r1, [pc, #16]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002910:	4313      	orrs	r3, r2
 8002912:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002916:	e009      	b.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002918:	7cfb      	ldrb	r3, [r7, #19]
 800291a:	74bb      	strb	r3, [r7, #18]
 800291c:	e006      	b.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800291e:	bf00      	nop
 8002920:	40021000 	.word	0x40021000
 8002924:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002928:	7cfb      	ldrb	r3, [r7, #19]
 800292a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800292c:	7c7b      	ldrb	r3, [r7, #17]
 800292e:	2b01      	cmp	r3, #1
 8002930:	d105      	bne.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002932:	4b9e      	ldr	r3, [pc, #632]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002936:	4a9d      	ldr	r2, [pc, #628]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002938:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800293c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 0301 	and.w	r3, r3, #1
 8002946:	2b00      	cmp	r3, #0
 8002948:	d00a      	beq.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800294a:	4b98      	ldr	r3, [pc, #608]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800294c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002950:	f023 0203 	bic.w	r2, r3, #3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002958:	4994      	ldr	r1, [pc, #592]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800295a:	4313      	orrs	r3, r2
 800295c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 0302 	and.w	r3, r3, #2
 8002968:	2b00      	cmp	r3, #0
 800296a:	d00a      	beq.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800296c:	4b8f      	ldr	r3, [pc, #572]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800296e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002972:	f023 020c 	bic.w	r2, r3, #12
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800297a:	498c      	ldr	r1, [pc, #560]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800297c:	4313      	orrs	r3, r2
 800297e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 0304 	and.w	r3, r3, #4
 800298a:	2b00      	cmp	r3, #0
 800298c:	d00a      	beq.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800298e:	4b87      	ldr	r3, [pc, #540]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002990:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002994:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299c:	4983      	ldr	r1, [pc, #524]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800299e:	4313      	orrs	r3, r2
 80029a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 0308 	and.w	r3, r3, #8
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d00a      	beq.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80029b0:	4b7e      	ldr	r3, [pc, #504]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029b6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029be:	497b      	ldr	r1, [pc, #492]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029c0:	4313      	orrs	r3, r2
 80029c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 0310 	and.w	r3, r3, #16
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d00a      	beq.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80029d2:	4b76      	ldr	r3, [pc, #472]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029e0:	4972      	ldr	r1, [pc, #456]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029e2:	4313      	orrs	r3, r2
 80029e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 0320 	and.w	r3, r3, #32
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d00a      	beq.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80029f4:	4b6d      	ldr	r3, [pc, #436]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029fa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a02:	496a      	ldr	r1, [pc, #424]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a04:	4313      	orrs	r3, r2
 8002a06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d00a      	beq.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002a16:	4b65      	ldr	r3, [pc, #404]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a1c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a24:	4961      	ldr	r1, [pc, #388]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a26:	4313      	orrs	r3, r2
 8002a28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d00a      	beq.n	8002a4e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002a38:	4b5c      	ldr	r3, [pc, #368]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a3e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a46:	4959      	ldr	r1, [pc, #356]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d00a      	beq.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a5a:	4b54      	ldr	r3, [pc, #336]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a60:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a68:	4950      	ldr	r1, [pc, #320]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d00a      	beq.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a7c:	4b4b      	ldr	r3, [pc, #300]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a82:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a8a:	4948      	ldr	r1, [pc, #288]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d00a      	beq.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a9e:	4b43      	ldr	r3, [pc, #268]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aa4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aac:	493f      	ldr	r1, [pc, #252]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d028      	beq.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002ac0:	4b3a      	ldr	r3, [pc, #232]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ac6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ace:	4937      	ldr	r1, [pc, #220]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ada:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ade:	d106      	bne.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ae0:	4b32      	ldr	r3, [pc, #200]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	4a31      	ldr	r2, [pc, #196]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ae6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002aea:	60d3      	str	r3, [r2, #12]
 8002aec:	e011      	b.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002af2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002af6:	d10c      	bne.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	3304      	adds	r3, #4
 8002afc:	2101      	movs	r1, #1
 8002afe:	4618      	mov	r0, r3
 8002b00:	f000 f8c8 	bl	8002c94 <RCCEx_PLLSAI1_Config>
 8002b04:	4603      	mov	r3, r0
 8002b06:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002b08:	7cfb      	ldrb	r3, [r7, #19]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d001      	beq.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002b0e:	7cfb      	ldrb	r3, [r7, #19]
 8002b10:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d028      	beq.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002b1e:	4b23      	ldr	r3, [pc, #140]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b24:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b2c:	491f      	ldr	r1, [pc, #124]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b38:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b3c:	d106      	bne.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b3e:	4b1b      	ldr	r3, [pc, #108]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b40:	68db      	ldr	r3, [r3, #12]
 8002b42:	4a1a      	ldr	r2, [pc, #104]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b44:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b48:	60d3      	str	r3, [r2, #12]
 8002b4a:	e011      	b.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b50:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b54:	d10c      	bne.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	3304      	adds	r3, #4
 8002b5a:	2101      	movs	r1, #1
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f000 f899 	bl	8002c94 <RCCEx_PLLSAI1_Config>
 8002b62:	4603      	mov	r3, r0
 8002b64:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b66:	7cfb      	ldrb	r3, [r7, #19]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d001      	beq.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002b6c:	7cfb      	ldrb	r3, [r7, #19]
 8002b6e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d02b      	beq.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002b7c:	4b0b      	ldr	r3, [pc, #44]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b82:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b8a:	4908      	ldr	r1, [pc, #32]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b96:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b9a:	d109      	bne.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b9c:	4b03      	ldr	r3, [pc, #12]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	4a02      	ldr	r2, [pc, #8]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ba2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ba6:	60d3      	str	r3, [r2, #12]
 8002ba8:	e014      	b.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002baa:	bf00      	nop
 8002bac:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bb4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002bb8:	d10c      	bne.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	3304      	adds	r3, #4
 8002bbe:	2101      	movs	r1, #1
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f000 f867 	bl	8002c94 <RCCEx_PLLSAI1_Config>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002bca:	7cfb      	ldrb	r3, [r7, #19]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d001      	beq.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002bd0:	7cfb      	ldrb	r3, [r7, #19]
 8002bd2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d02f      	beq.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002be0:	4b2b      	ldr	r3, [pc, #172]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002be6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002bee:	4928      	ldr	r1, [pc, #160]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002bfa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002bfe:	d10d      	bne.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	3304      	adds	r3, #4
 8002c04:	2102      	movs	r1, #2
 8002c06:	4618      	mov	r0, r3
 8002c08:	f000 f844 	bl	8002c94 <RCCEx_PLLSAI1_Config>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c10:	7cfb      	ldrb	r3, [r7, #19]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d014      	beq.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002c16:	7cfb      	ldrb	r3, [r7, #19]
 8002c18:	74bb      	strb	r3, [r7, #18]
 8002c1a:	e011      	b.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c24:	d10c      	bne.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	3320      	adds	r3, #32
 8002c2a:	2102      	movs	r1, #2
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f000 f925 	bl	8002e7c <RCCEx_PLLSAI2_Config>
 8002c32:	4603      	mov	r3, r0
 8002c34:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c36:	7cfb      	ldrb	r3, [r7, #19]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d001      	beq.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002c3c:	7cfb      	ldrb	r3, [r7, #19]
 8002c3e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d00a      	beq.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002c4c:	4b10      	ldr	r3, [pc, #64]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c52:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c5a:	490d      	ldr	r1, [pc, #52]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d00b      	beq.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002c6e:	4b08      	ldr	r3, [pc, #32]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c74:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c7e:	4904      	ldr	r1, [pc, #16]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c80:	4313      	orrs	r3, r2
 8002c82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002c86:	7cbb      	ldrb	r3, [r7, #18]
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3718      	adds	r7, #24
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	40021000 	.word	0x40021000

08002c94 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b084      	sub	sp, #16
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
 8002c9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002ca2:	4b75      	ldr	r3, [pc, #468]	; (8002e78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ca4:	68db      	ldr	r3, [r3, #12]
 8002ca6:	f003 0303 	and.w	r3, r3, #3
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d018      	beq.n	8002ce0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002cae:	4b72      	ldr	r3, [pc, #456]	; (8002e78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cb0:	68db      	ldr	r3, [r3, #12]
 8002cb2:	f003 0203 	and.w	r2, r3, #3
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d10d      	bne.n	8002cda <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
       ||
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d009      	beq.n	8002cda <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002cc6:	4b6c      	ldr	r3, [pc, #432]	; (8002e78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cc8:	68db      	ldr	r3, [r3, #12]
 8002cca:	091b      	lsrs	r3, r3, #4
 8002ccc:	f003 0307 	and.w	r3, r3, #7
 8002cd0:	1c5a      	adds	r2, r3, #1
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	685b      	ldr	r3, [r3, #4]
       ||
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d047      	beq.n	8002d6a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	73fb      	strb	r3, [r7, #15]
 8002cde:	e044      	b.n	8002d6a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	2b03      	cmp	r3, #3
 8002ce6:	d018      	beq.n	8002d1a <RCCEx_PLLSAI1_Config+0x86>
 8002ce8:	2b03      	cmp	r3, #3
 8002cea:	d825      	bhi.n	8002d38 <RCCEx_PLLSAI1_Config+0xa4>
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d002      	beq.n	8002cf6 <RCCEx_PLLSAI1_Config+0x62>
 8002cf0:	2b02      	cmp	r3, #2
 8002cf2:	d009      	beq.n	8002d08 <RCCEx_PLLSAI1_Config+0x74>
 8002cf4:	e020      	b.n	8002d38 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002cf6:	4b60      	ldr	r3, [pc, #384]	; (8002e78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 0302 	and.w	r3, r3, #2
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d11d      	bne.n	8002d3e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d06:	e01a      	b.n	8002d3e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002d08:	4b5b      	ldr	r3, [pc, #364]	; (8002e78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d116      	bne.n	8002d42 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d18:	e013      	b.n	8002d42 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002d1a:	4b57      	ldr	r3, [pc, #348]	; (8002e78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d10f      	bne.n	8002d46 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002d26:	4b54      	ldr	r3, [pc, #336]	; (8002e78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d109      	bne.n	8002d46 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002d36:	e006      	b.n	8002d46 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	73fb      	strb	r3, [r7, #15]
      break;
 8002d3c:	e004      	b.n	8002d48 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002d3e:	bf00      	nop
 8002d40:	e002      	b.n	8002d48 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002d42:	bf00      	nop
 8002d44:	e000      	b.n	8002d48 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002d46:	bf00      	nop
    }

    if(status == HAL_OK)
 8002d48:	7bfb      	ldrb	r3, [r7, #15]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d10d      	bne.n	8002d6a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002d4e:	4b4a      	ldr	r3, [pc, #296]	; (8002e78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d50:	68db      	ldr	r3, [r3, #12]
 8002d52:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6819      	ldr	r1, [r3, #0]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	3b01      	subs	r3, #1
 8002d60:	011b      	lsls	r3, r3, #4
 8002d62:	430b      	orrs	r3, r1
 8002d64:	4944      	ldr	r1, [pc, #272]	; (8002e78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d66:	4313      	orrs	r3, r2
 8002d68:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002d6a:	7bfb      	ldrb	r3, [r7, #15]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d17d      	bne.n	8002e6c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002d70:	4b41      	ldr	r3, [pc, #260]	; (8002e78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a40      	ldr	r2, [pc, #256]	; (8002e78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d76:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002d7a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d7c:	f7fe fa94 	bl	80012a8 <HAL_GetTick>
 8002d80:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002d82:	e009      	b.n	8002d98 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002d84:	f7fe fa90 	bl	80012a8 <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	2b02      	cmp	r3, #2
 8002d90:	d902      	bls.n	8002d98 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002d92:	2303      	movs	r3, #3
 8002d94:	73fb      	strb	r3, [r7, #15]
        break;
 8002d96:	e005      	b.n	8002da4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002d98:	4b37      	ldr	r3, [pc, #220]	; (8002e78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d1ef      	bne.n	8002d84 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002da4:	7bfb      	ldrb	r3, [r7, #15]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d160      	bne.n	8002e6c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d111      	bne.n	8002dd4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002db0:	4b31      	ldr	r3, [pc, #196]	; (8002e78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002db2:	691b      	ldr	r3, [r3, #16]
 8002db4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002db8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dbc:	687a      	ldr	r2, [r7, #4]
 8002dbe:	6892      	ldr	r2, [r2, #8]
 8002dc0:	0211      	lsls	r1, r2, #8
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	68d2      	ldr	r2, [r2, #12]
 8002dc6:	0912      	lsrs	r2, r2, #4
 8002dc8:	0452      	lsls	r2, r2, #17
 8002dca:	430a      	orrs	r2, r1
 8002dcc:	492a      	ldr	r1, [pc, #168]	; (8002e78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	610b      	str	r3, [r1, #16]
 8002dd2:	e027      	b.n	8002e24 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d112      	bne.n	8002e00 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002dda:	4b27      	ldr	r3, [pc, #156]	; (8002e78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ddc:	691b      	ldr	r3, [r3, #16]
 8002dde:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002de2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	6892      	ldr	r2, [r2, #8]
 8002dea:	0211      	lsls	r1, r2, #8
 8002dec:	687a      	ldr	r2, [r7, #4]
 8002dee:	6912      	ldr	r2, [r2, #16]
 8002df0:	0852      	lsrs	r2, r2, #1
 8002df2:	3a01      	subs	r2, #1
 8002df4:	0552      	lsls	r2, r2, #21
 8002df6:	430a      	orrs	r2, r1
 8002df8:	491f      	ldr	r1, [pc, #124]	; (8002e78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	610b      	str	r3, [r1, #16]
 8002dfe:	e011      	b.n	8002e24 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e00:	4b1d      	ldr	r3, [pc, #116]	; (8002e78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e02:	691b      	ldr	r3, [r3, #16]
 8002e04:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002e08:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002e0c:	687a      	ldr	r2, [r7, #4]
 8002e0e:	6892      	ldr	r2, [r2, #8]
 8002e10:	0211      	lsls	r1, r2, #8
 8002e12:	687a      	ldr	r2, [r7, #4]
 8002e14:	6952      	ldr	r2, [r2, #20]
 8002e16:	0852      	lsrs	r2, r2, #1
 8002e18:	3a01      	subs	r2, #1
 8002e1a:	0652      	lsls	r2, r2, #25
 8002e1c:	430a      	orrs	r2, r1
 8002e1e:	4916      	ldr	r1, [pc, #88]	; (8002e78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e20:	4313      	orrs	r3, r2
 8002e22:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002e24:	4b14      	ldr	r3, [pc, #80]	; (8002e78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a13      	ldr	r2, [pc, #76]	; (8002e78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e2a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002e2e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e30:	f7fe fa3a 	bl	80012a8 <HAL_GetTick>
 8002e34:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002e36:	e009      	b.n	8002e4c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002e38:	f7fe fa36 	bl	80012a8 <HAL_GetTick>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	d902      	bls.n	8002e4c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002e46:	2303      	movs	r3, #3
 8002e48:	73fb      	strb	r3, [r7, #15]
          break;
 8002e4a:	e005      	b.n	8002e58 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002e4c:	4b0a      	ldr	r3, [pc, #40]	; (8002e78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d0ef      	beq.n	8002e38 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002e58:	7bfb      	ldrb	r3, [r7, #15]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d106      	bne.n	8002e6c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002e5e:	4b06      	ldr	r3, [pc, #24]	; (8002e78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e60:	691a      	ldr	r2, [r3, #16]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	699b      	ldr	r3, [r3, #24]
 8002e66:	4904      	ldr	r1, [pc, #16]	; (8002e78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002e6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3710      	adds	r7, #16
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	40021000 	.word	0x40021000

08002e7c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b084      	sub	sp, #16
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
 8002e84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002e86:	2300      	movs	r3, #0
 8002e88:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002e8a:	4b6a      	ldr	r3, [pc, #424]	; (8003034 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e8c:	68db      	ldr	r3, [r3, #12]
 8002e8e:	f003 0303 	and.w	r3, r3, #3
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d018      	beq.n	8002ec8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002e96:	4b67      	ldr	r3, [pc, #412]	; (8003034 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e98:	68db      	ldr	r3, [r3, #12]
 8002e9a:	f003 0203 	and.w	r2, r3, #3
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d10d      	bne.n	8002ec2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
       ||
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d009      	beq.n	8002ec2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002eae:	4b61      	ldr	r3, [pc, #388]	; (8003034 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002eb0:	68db      	ldr	r3, [r3, #12]
 8002eb2:	091b      	lsrs	r3, r3, #4
 8002eb4:	f003 0307 	and.w	r3, r3, #7
 8002eb8:	1c5a      	adds	r2, r3, #1
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	685b      	ldr	r3, [r3, #4]
       ||
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	d047      	beq.n	8002f52 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	73fb      	strb	r3, [r7, #15]
 8002ec6:	e044      	b.n	8002f52 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	2b03      	cmp	r3, #3
 8002ece:	d018      	beq.n	8002f02 <RCCEx_PLLSAI2_Config+0x86>
 8002ed0:	2b03      	cmp	r3, #3
 8002ed2:	d825      	bhi.n	8002f20 <RCCEx_PLLSAI2_Config+0xa4>
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d002      	beq.n	8002ede <RCCEx_PLLSAI2_Config+0x62>
 8002ed8:	2b02      	cmp	r3, #2
 8002eda:	d009      	beq.n	8002ef0 <RCCEx_PLLSAI2_Config+0x74>
 8002edc:	e020      	b.n	8002f20 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002ede:	4b55      	ldr	r3, [pc, #340]	; (8003034 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 0302 	and.w	r3, r3, #2
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d11d      	bne.n	8002f26 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002eee:	e01a      	b.n	8002f26 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002ef0:	4b50      	ldr	r3, [pc, #320]	; (8003034 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d116      	bne.n	8002f2a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f00:	e013      	b.n	8002f2a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002f02:	4b4c      	ldr	r3, [pc, #304]	; (8003034 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d10f      	bne.n	8002f2e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002f0e:	4b49      	ldr	r3, [pc, #292]	; (8003034 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d109      	bne.n	8002f2e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002f1e:	e006      	b.n	8002f2e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	73fb      	strb	r3, [r7, #15]
      break;
 8002f24:	e004      	b.n	8002f30 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002f26:	bf00      	nop
 8002f28:	e002      	b.n	8002f30 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002f2a:	bf00      	nop
 8002f2c:	e000      	b.n	8002f30 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002f2e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002f30:	7bfb      	ldrb	r3, [r7, #15]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d10d      	bne.n	8002f52 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002f36:	4b3f      	ldr	r3, [pc, #252]	; (8003034 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f38:	68db      	ldr	r3, [r3, #12]
 8002f3a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6819      	ldr	r1, [r3, #0]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	3b01      	subs	r3, #1
 8002f48:	011b      	lsls	r3, r3, #4
 8002f4a:	430b      	orrs	r3, r1
 8002f4c:	4939      	ldr	r1, [pc, #228]	; (8003034 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002f52:	7bfb      	ldrb	r3, [r7, #15]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d167      	bne.n	8003028 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002f58:	4b36      	ldr	r3, [pc, #216]	; (8003034 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a35      	ldr	r2, [pc, #212]	; (8003034 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f62:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f64:	f7fe f9a0 	bl	80012a8 <HAL_GetTick>
 8002f68:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002f6a:	e009      	b.n	8002f80 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002f6c:	f7fe f99c 	bl	80012a8 <HAL_GetTick>
 8002f70:	4602      	mov	r2, r0
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	2b02      	cmp	r3, #2
 8002f78:	d902      	bls.n	8002f80 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	73fb      	strb	r3, [r7, #15]
        break;
 8002f7e:	e005      	b.n	8002f8c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002f80:	4b2c      	ldr	r3, [pc, #176]	; (8003034 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d1ef      	bne.n	8002f6c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002f8c:	7bfb      	ldrb	r3, [r7, #15]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d14a      	bne.n	8003028 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d111      	bne.n	8002fbc <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002f98:	4b26      	ldr	r3, [pc, #152]	; (8003034 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f9a:	695b      	ldr	r3, [r3, #20]
 8002f9c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002fa0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fa4:	687a      	ldr	r2, [r7, #4]
 8002fa6:	6892      	ldr	r2, [r2, #8]
 8002fa8:	0211      	lsls	r1, r2, #8
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	68d2      	ldr	r2, [r2, #12]
 8002fae:	0912      	lsrs	r2, r2, #4
 8002fb0:	0452      	lsls	r2, r2, #17
 8002fb2:	430a      	orrs	r2, r1
 8002fb4:	491f      	ldr	r1, [pc, #124]	; (8003034 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	614b      	str	r3, [r1, #20]
 8002fba:	e011      	b.n	8002fe0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002fbc:	4b1d      	ldr	r3, [pc, #116]	; (8003034 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fbe:	695b      	ldr	r3, [r3, #20]
 8002fc0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002fc4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	6892      	ldr	r2, [r2, #8]
 8002fcc:	0211      	lsls	r1, r2, #8
 8002fce:	687a      	ldr	r2, [r7, #4]
 8002fd0:	6912      	ldr	r2, [r2, #16]
 8002fd2:	0852      	lsrs	r2, r2, #1
 8002fd4:	3a01      	subs	r2, #1
 8002fd6:	0652      	lsls	r2, r2, #25
 8002fd8:	430a      	orrs	r2, r1
 8002fda:	4916      	ldr	r1, [pc, #88]	; (8003034 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002fe0:	4b14      	ldr	r3, [pc, #80]	; (8003034 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a13      	ldr	r2, [pc, #76]	; (8003034 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fe6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fea:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fec:	f7fe f95c 	bl	80012a8 <HAL_GetTick>
 8002ff0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002ff2:	e009      	b.n	8003008 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002ff4:	f7fe f958 	bl	80012a8 <HAL_GetTick>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	2b02      	cmp	r3, #2
 8003000:	d902      	bls.n	8003008 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003002:	2303      	movs	r3, #3
 8003004:	73fb      	strb	r3, [r7, #15]
          break;
 8003006:	e005      	b.n	8003014 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003008:	4b0a      	ldr	r3, [pc, #40]	; (8003034 <RCCEx_PLLSAI2_Config+0x1b8>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003010:	2b00      	cmp	r3, #0
 8003012:	d0ef      	beq.n	8002ff4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003014:	7bfb      	ldrb	r3, [r7, #15]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d106      	bne.n	8003028 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800301a:	4b06      	ldr	r3, [pc, #24]	; (8003034 <RCCEx_PLLSAI2_Config+0x1b8>)
 800301c:	695a      	ldr	r2, [r3, #20]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	695b      	ldr	r3, [r3, #20]
 8003022:	4904      	ldr	r1, [pc, #16]	; (8003034 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003024:	4313      	orrs	r3, r2
 8003026:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003028:	7bfb      	ldrb	r3, [r7, #15]
}
 800302a:	4618      	mov	r0, r3
 800302c:	3710      	adds	r7, #16
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop
 8003034:	40021000 	.word	0x40021000

08003038 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b082      	sub	sp, #8
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d101      	bne.n	800304a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e049      	b.n	80030de <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003050:	b2db      	uxtb	r3, r3
 8003052:	2b00      	cmp	r3, #0
 8003054:	d106      	bne.n	8003064 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2200      	movs	r2, #0
 800305a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f7fd feb4 	bl	8000dcc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2202      	movs	r2, #2
 8003068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	3304      	adds	r3, #4
 8003074:	4619      	mov	r1, r3
 8003076:	4610      	mov	r0, r2
 8003078:	f000 fe5a 	bl	8003d30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2201      	movs	r2, #1
 8003080:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2201      	movs	r2, #1
 8003088:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2201      	movs	r2, #1
 8003090:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2201      	movs	r2, #1
 8003098:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2201      	movs	r2, #1
 80030a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2201      	movs	r2, #1
 80030a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2201      	movs	r2, #1
 80030b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2201      	movs	r2, #1
 80030b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2201      	movs	r2, #1
 80030c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2201      	movs	r2, #1
 80030c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2201      	movs	r2, #1
 80030d0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2201      	movs	r2, #1
 80030d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80030dc:	2300      	movs	r3, #0
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3708      	adds	r7, #8
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
	...

080030e8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b085      	sub	sp, #20
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d001      	beq.n	8003100 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	e047      	b.n	8003190 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2202      	movs	r2, #2
 8003104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a23      	ldr	r2, [pc, #140]	; (800319c <HAL_TIM_Base_Start+0xb4>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d01d      	beq.n	800314e <HAL_TIM_Base_Start+0x66>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800311a:	d018      	beq.n	800314e <HAL_TIM_Base_Start+0x66>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a1f      	ldr	r2, [pc, #124]	; (80031a0 <HAL_TIM_Base_Start+0xb8>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d013      	beq.n	800314e <HAL_TIM_Base_Start+0x66>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a1e      	ldr	r2, [pc, #120]	; (80031a4 <HAL_TIM_Base_Start+0xbc>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d00e      	beq.n	800314e <HAL_TIM_Base_Start+0x66>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a1c      	ldr	r2, [pc, #112]	; (80031a8 <HAL_TIM_Base_Start+0xc0>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d009      	beq.n	800314e <HAL_TIM_Base_Start+0x66>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a1b      	ldr	r2, [pc, #108]	; (80031ac <HAL_TIM_Base_Start+0xc4>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d004      	beq.n	800314e <HAL_TIM_Base_Start+0x66>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a19      	ldr	r2, [pc, #100]	; (80031b0 <HAL_TIM_Base_Start+0xc8>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d115      	bne.n	800317a <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	689a      	ldr	r2, [r3, #8]
 8003154:	4b17      	ldr	r3, [pc, #92]	; (80031b4 <HAL_TIM_Base_Start+0xcc>)
 8003156:	4013      	ands	r3, r2
 8003158:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2b06      	cmp	r3, #6
 800315e:	d015      	beq.n	800318c <HAL_TIM_Base_Start+0xa4>
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003166:	d011      	beq.n	800318c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f042 0201 	orr.w	r2, r2, #1
 8003176:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003178:	e008      	b.n	800318c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f042 0201 	orr.w	r2, r2, #1
 8003188:	601a      	str	r2, [r3, #0]
 800318a:	e000      	b.n	800318e <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800318c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800318e:	2300      	movs	r3, #0
}
 8003190:	4618      	mov	r0, r3
 8003192:	3714      	adds	r7, #20
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr
 800319c:	40012c00 	.word	0x40012c00
 80031a0:	40000400 	.word	0x40000400
 80031a4:	40000800 	.word	0x40000800
 80031a8:	40000c00 	.word	0x40000c00
 80031ac:	40013400 	.word	0x40013400
 80031b0:	40014000 	.word	0x40014000
 80031b4:	00010007 	.word	0x00010007

080031b8 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b083      	sub	sp, #12
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	6a1a      	ldr	r2, [r3, #32]
 80031c6:	f241 1311 	movw	r3, #4369	; 0x1111
 80031ca:	4013      	ands	r3, r2
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d10f      	bne.n	80031f0 <HAL_TIM_Base_Stop+0x38>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	6a1a      	ldr	r2, [r3, #32]
 80031d6:	f240 4344 	movw	r3, #1092	; 0x444
 80031da:	4013      	ands	r3, r2
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d107      	bne.n	80031f0 <HAL_TIM_Base_Stop+0x38>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f022 0201 	bic.w	r2, r2, #1
 80031ee:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80031f8:	2300      	movs	r3, #0
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	370c      	adds	r7, #12
 80031fe:	46bd      	mov	sp, r7
 8003200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003204:	4770      	bx	lr
	...

08003208 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003208:	b480      	push	{r7}
 800320a:	b085      	sub	sp, #20
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003216:	b2db      	uxtb	r3, r3
 8003218:	2b01      	cmp	r3, #1
 800321a:	d001      	beq.n	8003220 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	e04f      	b.n	80032c0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2202      	movs	r2, #2
 8003224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	68da      	ldr	r2, [r3, #12]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f042 0201 	orr.w	r2, r2, #1
 8003236:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a23      	ldr	r2, [pc, #140]	; (80032cc <HAL_TIM_Base_Start_IT+0xc4>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d01d      	beq.n	800327e <HAL_TIM_Base_Start_IT+0x76>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800324a:	d018      	beq.n	800327e <HAL_TIM_Base_Start_IT+0x76>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a1f      	ldr	r2, [pc, #124]	; (80032d0 <HAL_TIM_Base_Start_IT+0xc8>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d013      	beq.n	800327e <HAL_TIM_Base_Start_IT+0x76>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a1e      	ldr	r2, [pc, #120]	; (80032d4 <HAL_TIM_Base_Start_IT+0xcc>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d00e      	beq.n	800327e <HAL_TIM_Base_Start_IT+0x76>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a1c      	ldr	r2, [pc, #112]	; (80032d8 <HAL_TIM_Base_Start_IT+0xd0>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d009      	beq.n	800327e <HAL_TIM_Base_Start_IT+0x76>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a1b      	ldr	r2, [pc, #108]	; (80032dc <HAL_TIM_Base_Start_IT+0xd4>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d004      	beq.n	800327e <HAL_TIM_Base_Start_IT+0x76>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a19      	ldr	r2, [pc, #100]	; (80032e0 <HAL_TIM_Base_Start_IT+0xd8>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d115      	bne.n	80032aa <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	689a      	ldr	r2, [r3, #8]
 8003284:	4b17      	ldr	r3, [pc, #92]	; (80032e4 <HAL_TIM_Base_Start_IT+0xdc>)
 8003286:	4013      	ands	r3, r2
 8003288:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2b06      	cmp	r3, #6
 800328e:	d015      	beq.n	80032bc <HAL_TIM_Base_Start_IT+0xb4>
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003296:	d011      	beq.n	80032bc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f042 0201 	orr.w	r2, r2, #1
 80032a6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032a8:	e008      	b.n	80032bc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f042 0201 	orr.w	r2, r2, #1
 80032b8:	601a      	str	r2, [r3, #0]
 80032ba:	e000      	b.n	80032be <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032bc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80032be:	2300      	movs	r3, #0
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3714      	adds	r7, #20
 80032c4:	46bd      	mov	sp, r7
 80032c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ca:	4770      	bx	lr
 80032cc:	40012c00 	.word	0x40012c00
 80032d0:	40000400 	.word	0x40000400
 80032d4:	40000800 	.word	0x40000800
 80032d8:	40000c00 	.word	0x40000c00
 80032dc:	40013400 	.word	0x40013400
 80032e0:	40014000 	.word	0x40014000
 80032e4:	00010007 	.word	0x00010007

080032e8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b082      	sub	sp, #8
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d101      	bne.n	80032fa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e049      	b.n	800338e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003300:	b2db      	uxtb	r3, r3
 8003302:	2b00      	cmp	r3, #0
 8003304:	d106      	bne.n	8003314 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2200      	movs	r2, #0
 800330a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f000 f841 	bl	8003396 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2202      	movs	r2, #2
 8003318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	3304      	adds	r3, #4
 8003324:	4619      	mov	r1, r3
 8003326:	4610      	mov	r0, r2
 8003328:	f000 fd02 	bl	8003d30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2201      	movs	r2, #1
 8003330:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2201      	movs	r2, #1
 8003338:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2201      	movs	r2, #1
 8003340:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2201      	movs	r2, #1
 8003348:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2201      	movs	r2, #1
 8003350:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2201      	movs	r2, #1
 8003358:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2201      	movs	r2, #1
 8003360:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2201      	movs	r2, #1
 8003368:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2201      	movs	r2, #1
 8003370:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2201      	movs	r2, #1
 8003378:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2201      	movs	r2, #1
 8003380:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2201      	movs	r2, #1
 8003388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800338c:	2300      	movs	r3, #0
}
 800338e:	4618      	mov	r0, r3
 8003390:	3708      	adds	r7, #8
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}

08003396 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003396:	b480      	push	{r7}
 8003398:	b083      	sub	sp, #12
 800339a:	af00      	add	r7, sp, #0
 800339c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800339e:	bf00      	nop
 80033a0:	370c      	adds	r7, #12
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr
	...

080033ac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b084      	sub	sp, #16
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
 80033b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d109      	bne.n	80033d0 <HAL_TIM_PWM_Start+0x24>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	bf14      	ite	ne
 80033c8:	2301      	movne	r3, #1
 80033ca:	2300      	moveq	r3, #0
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	e03c      	b.n	800344a <HAL_TIM_PWM_Start+0x9e>
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	2b04      	cmp	r3, #4
 80033d4:	d109      	bne.n	80033ea <HAL_TIM_PWM_Start+0x3e>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	2b01      	cmp	r3, #1
 80033e0:	bf14      	ite	ne
 80033e2:	2301      	movne	r3, #1
 80033e4:	2300      	moveq	r3, #0
 80033e6:	b2db      	uxtb	r3, r3
 80033e8:	e02f      	b.n	800344a <HAL_TIM_PWM_Start+0x9e>
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	2b08      	cmp	r3, #8
 80033ee:	d109      	bne.n	8003404 <HAL_TIM_PWM_Start+0x58>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	bf14      	ite	ne
 80033fc:	2301      	movne	r3, #1
 80033fe:	2300      	moveq	r3, #0
 8003400:	b2db      	uxtb	r3, r3
 8003402:	e022      	b.n	800344a <HAL_TIM_PWM_Start+0x9e>
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	2b0c      	cmp	r3, #12
 8003408:	d109      	bne.n	800341e <HAL_TIM_PWM_Start+0x72>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003410:	b2db      	uxtb	r3, r3
 8003412:	2b01      	cmp	r3, #1
 8003414:	bf14      	ite	ne
 8003416:	2301      	movne	r3, #1
 8003418:	2300      	moveq	r3, #0
 800341a:	b2db      	uxtb	r3, r3
 800341c:	e015      	b.n	800344a <HAL_TIM_PWM_Start+0x9e>
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	2b10      	cmp	r3, #16
 8003422:	d109      	bne.n	8003438 <HAL_TIM_PWM_Start+0x8c>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800342a:	b2db      	uxtb	r3, r3
 800342c:	2b01      	cmp	r3, #1
 800342e:	bf14      	ite	ne
 8003430:	2301      	movne	r3, #1
 8003432:	2300      	moveq	r3, #0
 8003434:	b2db      	uxtb	r3, r3
 8003436:	e008      	b.n	800344a <HAL_TIM_PWM_Start+0x9e>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800343e:	b2db      	uxtb	r3, r3
 8003440:	2b01      	cmp	r3, #1
 8003442:	bf14      	ite	ne
 8003444:	2301      	movne	r3, #1
 8003446:	2300      	moveq	r3, #0
 8003448:	b2db      	uxtb	r3, r3
 800344a:	2b00      	cmp	r3, #0
 800344c:	d001      	beq.n	8003452 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e09c      	b.n	800358c <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d104      	bne.n	8003462 <HAL_TIM_PWM_Start+0xb6>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2202      	movs	r2, #2
 800345c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003460:	e023      	b.n	80034aa <HAL_TIM_PWM_Start+0xfe>
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	2b04      	cmp	r3, #4
 8003466:	d104      	bne.n	8003472 <HAL_TIM_PWM_Start+0xc6>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2202      	movs	r2, #2
 800346c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003470:	e01b      	b.n	80034aa <HAL_TIM_PWM_Start+0xfe>
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	2b08      	cmp	r3, #8
 8003476:	d104      	bne.n	8003482 <HAL_TIM_PWM_Start+0xd6>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2202      	movs	r2, #2
 800347c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003480:	e013      	b.n	80034aa <HAL_TIM_PWM_Start+0xfe>
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	2b0c      	cmp	r3, #12
 8003486:	d104      	bne.n	8003492 <HAL_TIM_PWM_Start+0xe6>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2202      	movs	r2, #2
 800348c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003490:	e00b      	b.n	80034aa <HAL_TIM_PWM_Start+0xfe>
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	2b10      	cmp	r3, #16
 8003496:	d104      	bne.n	80034a2 <HAL_TIM_PWM_Start+0xf6>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2202      	movs	r2, #2
 800349c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80034a0:	e003      	b.n	80034aa <HAL_TIM_PWM_Start+0xfe>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2202      	movs	r2, #2
 80034a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	2201      	movs	r2, #1
 80034b0:	6839      	ldr	r1, [r7, #0]
 80034b2:	4618      	mov	r0, r3
 80034b4:	f001 f846 	bl	8004544 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a35      	ldr	r2, [pc, #212]	; (8003594 <HAL_TIM_PWM_Start+0x1e8>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d013      	beq.n	80034ea <HAL_TIM_PWM_Start+0x13e>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a34      	ldr	r2, [pc, #208]	; (8003598 <HAL_TIM_PWM_Start+0x1ec>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d00e      	beq.n	80034ea <HAL_TIM_PWM_Start+0x13e>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a32      	ldr	r2, [pc, #200]	; (800359c <HAL_TIM_PWM_Start+0x1f0>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d009      	beq.n	80034ea <HAL_TIM_PWM_Start+0x13e>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a31      	ldr	r2, [pc, #196]	; (80035a0 <HAL_TIM_PWM_Start+0x1f4>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d004      	beq.n	80034ea <HAL_TIM_PWM_Start+0x13e>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a2f      	ldr	r2, [pc, #188]	; (80035a4 <HAL_TIM_PWM_Start+0x1f8>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d101      	bne.n	80034ee <HAL_TIM_PWM_Start+0x142>
 80034ea:	2301      	movs	r3, #1
 80034ec:	e000      	b.n	80034f0 <HAL_TIM_PWM_Start+0x144>
 80034ee:	2300      	movs	r3, #0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d007      	beq.n	8003504 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003502:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a22      	ldr	r2, [pc, #136]	; (8003594 <HAL_TIM_PWM_Start+0x1e8>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d01d      	beq.n	800354a <HAL_TIM_PWM_Start+0x19e>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003516:	d018      	beq.n	800354a <HAL_TIM_PWM_Start+0x19e>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a22      	ldr	r2, [pc, #136]	; (80035a8 <HAL_TIM_PWM_Start+0x1fc>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d013      	beq.n	800354a <HAL_TIM_PWM_Start+0x19e>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a21      	ldr	r2, [pc, #132]	; (80035ac <HAL_TIM_PWM_Start+0x200>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d00e      	beq.n	800354a <HAL_TIM_PWM_Start+0x19e>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a1f      	ldr	r2, [pc, #124]	; (80035b0 <HAL_TIM_PWM_Start+0x204>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d009      	beq.n	800354a <HAL_TIM_PWM_Start+0x19e>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a17      	ldr	r2, [pc, #92]	; (8003598 <HAL_TIM_PWM_Start+0x1ec>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d004      	beq.n	800354a <HAL_TIM_PWM_Start+0x19e>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a15      	ldr	r2, [pc, #84]	; (800359c <HAL_TIM_PWM_Start+0x1f0>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d115      	bne.n	8003576 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	689a      	ldr	r2, [r3, #8]
 8003550:	4b18      	ldr	r3, [pc, #96]	; (80035b4 <HAL_TIM_PWM_Start+0x208>)
 8003552:	4013      	ands	r3, r2
 8003554:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2b06      	cmp	r3, #6
 800355a:	d015      	beq.n	8003588 <HAL_TIM_PWM_Start+0x1dc>
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003562:	d011      	beq.n	8003588 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f042 0201 	orr.w	r2, r2, #1
 8003572:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003574:	e008      	b.n	8003588 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f042 0201 	orr.w	r2, r2, #1
 8003584:	601a      	str	r2, [r3, #0]
 8003586:	e000      	b.n	800358a <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003588:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800358a:	2300      	movs	r3, #0
}
 800358c:	4618      	mov	r0, r3
 800358e:	3710      	adds	r7, #16
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}
 8003594:	40012c00 	.word	0x40012c00
 8003598:	40013400 	.word	0x40013400
 800359c:	40014000 	.word	0x40014000
 80035a0:	40014400 	.word	0x40014400
 80035a4:	40014800 	.word	0x40014800
 80035a8:	40000400 	.word	0x40000400
 80035ac:	40000800 	.word	0x40000800
 80035b0:	40000c00 	.word	0x40000c00
 80035b4:	00010007 	.word	0x00010007

080035b8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b082      	sub	sp, #8
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
 80035c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	2200      	movs	r2, #0
 80035c8:	6839      	ldr	r1, [r7, #0]
 80035ca:	4618      	mov	r0, r3
 80035cc:	f000 ffba 	bl	8004544 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a3e      	ldr	r2, [pc, #248]	; (80036d0 <HAL_TIM_PWM_Stop+0x118>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d013      	beq.n	8003602 <HAL_TIM_PWM_Stop+0x4a>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a3d      	ldr	r2, [pc, #244]	; (80036d4 <HAL_TIM_PWM_Stop+0x11c>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d00e      	beq.n	8003602 <HAL_TIM_PWM_Stop+0x4a>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a3b      	ldr	r2, [pc, #236]	; (80036d8 <HAL_TIM_PWM_Stop+0x120>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d009      	beq.n	8003602 <HAL_TIM_PWM_Stop+0x4a>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a3a      	ldr	r2, [pc, #232]	; (80036dc <HAL_TIM_PWM_Stop+0x124>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d004      	beq.n	8003602 <HAL_TIM_PWM_Stop+0x4a>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a38      	ldr	r2, [pc, #224]	; (80036e0 <HAL_TIM_PWM_Stop+0x128>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d101      	bne.n	8003606 <HAL_TIM_PWM_Stop+0x4e>
 8003602:	2301      	movs	r3, #1
 8003604:	e000      	b.n	8003608 <HAL_TIM_PWM_Stop+0x50>
 8003606:	2300      	movs	r3, #0
 8003608:	2b00      	cmp	r3, #0
 800360a:	d017      	beq.n	800363c <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	6a1a      	ldr	r2, [r3, #32]
 8003612:	f241 1311 	movw	r3, #4369	; 0x1111
 8003616:	4013      	ands	r3, r2
 8003618:	2b00      	cmp	r3, #0
 800361a:	d10f      	bne.n	800363c <HAL_TIM_PWM_Stop+0x84>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	6a1a      	ldr	r2, [r3, #32]
 8003622:	f240 4344 	movw	r3, #1092	; 0x444
 8003626:	4013      	ands	r3, r2
 8003628:	2b00      	cmp	r3, #0
 800362a:	d107      	bne.n	800363c <HAL_TIM_PWM_Stop+0x84>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800363a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	6a1a      	ldr	r2, [r3, #32]
 8003642:	f241 1311 	movw	r3, #4369	; 0x1111
 8003646:	4013      	ands	r3, r2
 8003648:	2b00      	cmp	r3, #0
 800364a:	d10f      	bne.n	800366c <HAL_TIM_PWM_Stop+0xb4>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	6a1a      	ldr	r2, [r3, #32]
 8003652:	f240 4344 	movw	r3, #1092	; 0x444
 8003656:	4013      	ands	r3, r2
 8003658:	2b00      	cmp	r3, #0
 800365a:	d107      	bne.n	800366c <HAL_TIM_PWM_Stop+0xb4>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f022 0201 	bic.w	r2, r2, #1
 800366a:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d104      	bne.n	800367c <HAL_TIM_PWM_Stop+0xc4>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2201      	movs	r2, #1
 8003676:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800367a:	e023      	b.n	80036c4 <HAL_TIM_PWM_Stop+0x10c>
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	2b04      	cmp	r3, #4
 8003680:	d104      	bne.n	800368c <HAL_TIM_PWM_Stop+0xd4>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2201      	movs	r2, #1
 8003686:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800368a:	e01b      	b.n	80036c4 <HAL_TIM_PWM_Stop+0x10c>
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	2b08      	cmp	r3, #8
 8003690:	d104      	bne.n	800369c <HAL_TIM_PWM_Stop+0xe4>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2201      	movs	r2, #1
 8003696:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800369a:	e013      	b.n	80036c4 <HAL_TIM_PWM_Stop+0x10c>
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	2b0c      	cmp	r3, #12
 80036a0:	d104      	bne.n	80036ac <HAL_TIM_PWM_Stop+0xf4>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2201      	movs	r2, #1
 80036a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80036aa:	e00b      	b.n	80036c4 <HAL_TIM_PWM_Stop+0x10c>
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	2b10      	cmp	r3, #16
 80036b0:	d104      	bne.n	80036bc <HAL_TIM_PWM_Stop+0x104>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2201      	movs	r2, #1
 80036b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036ba:	e003      	b.n	80036c4 <HAL_TIM_PWM_Stop+0x10c>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2201      	movs	r2, #1
 80036c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 80036c4:	2300      	movs	r3, #0
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3708      	adds	r7, #8
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}
 80036ce:	bf00      	nop
 80036d0:	40012c00 	.word	0x40012c00
 80036d4:	40013400 	.word	0x40013400
 80036d8:	40014000 	.word	0x40014000
 80036dc:	40014400 	.word	0x40014400
 80036e0:	40014800 	.word	0x40014800

080036e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b082      	sub	sp, #8
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	691b      	ldr	r3, [r3, #16]
 80036f2:	f003 0302 	and.w	r3, r3, #2
 80036f6:	2b02      	cmp	r3, #2
 80036f8:	d122      	bne.n	8003740 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	f003 0302 	and.w	r3, r3, #2
 8003704:	2b02      	cmp	r3, #2
 8003706:	d11b      	bne.n	8003740 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f06f 0202 	mvn.w	r2, #2
 8003710:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2201      	movs	r2, #1
 8003716:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	699b      	ldr	r3, [r3, #24]
 800371e:	f003 0303 	and.w	r3, r3, #3
 8003722:	2b00      	cmp	r3, #0
 8003724:	d003      	beq.n	800372e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f000 fae3 	bl	8003cf2 <HAL_TIM_IC_CaptureCallback>
 800372c:	e005      	b.n	800373a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f000 fad5 	bl	8003cde <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	f000 fae6 	bl	8003d06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2200      	movs	r2, #0
 800373e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	691b      	ldr	r3, [r3, #16]
 8003746:	f003 0304 	and.w	r3, r3, #4
 800374a:	2b04      	cmp	r3, #4
 800374c:	d122      	bne.n	8003794 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	f003 0304 	and.w	r3, r3, #4
 8003758:	2b04      	cmp	r3, #4
 800375a:	d11b      	bne.n	8003794 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f06f 0204 	mvn.w	r2, #4
 8003764:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2202      	movs	r2, #2
 800376a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	699b      	ldr	r3, [r3, #24]
 8003772:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003776:	2b00      	cmp	r3, #0
 8003778:	d003      	beq.n	8003782 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f000 fab9 	bl	8003cf2 <HAL_TIM_IC_CaptureCallback>
 8003780:	e005      	b.n	800378e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f000 faab 	bl	8003cde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	f000 fabc 	bl	8003d06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2200      	movs	r2, #0
 8003792:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	691b      	ldr	r3, [r3, #16]
 800379a:	f003 0308 	and.w	r3, r3, #8
 800379e:	2b08      	cmp	r3, #8
 80037a0:	d122      	bne.n	80037e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	68db      	ldr	r3, [r3, #12]
 80037a8:	f003 0308 	and.w	r3, r3, #8
 80037ac:	2b08      	cmp	r3, #8
 80037ae:	d11b      	bne.n	80037e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f06f 0208 	mvn.w	r2, #8
 80037b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2204      	movs	r2, #4
 80037be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	69db      	ldr	r3, [r3, #28]
 80037c6:	f003 0303 	and.w	r3, r3, #3
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d003      	beq.n	80037d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f000 fa8f 	bl	8003cf2 <HAL_TIM_IC_CaptureCallback>
 80037d4:	e005      	b.n	80037e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f000 fa81 	bl	8003cde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	f000 fa92 	bl	8003d06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2200      	movs	r2, #0
 80037e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	691b      	ldr	r3, [r3, #16]
 80037ee:	f003 0310 	and.w	r3, r3, #16
 80037f2:	2b10      	cmp	r3, #16
 80037f4:	d122      	bne.n	800383c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	f003 0310 	and.w	r3, r3, #16
 8003800:	2b10      	cmp	r3, #16
 8003802:	d11b      	bne.n	800383c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f06f 0210 	mvn.w	r2, #16
 800380c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2208      	movs	r2, #8
 8003812:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	69db      	ldr	r3, [r3, #28]
 800381a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800381e:	2b00      	cmp	r3, #0
 8003820:	d003      	beq.n	800382a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f000 fa65 	bl	8003cf2 <HAL_TIM_IC_CaptureCallback>
 8003828:	e005      	b.n	8003836 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f000 fa57 	bl	8003cde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003830:	6878      	ldr	r0, [r7, #4]
 8003832:	f000 fa68 	bl	8003d06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2200      	movs	r2, #0
 800383a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	691b      	ldr	r3, [r3, #16]
 8003842:	f003 0301 	and.w	r3, r3, #1
 8003846:	2b01      	cmp	r3, #1
 8003848:	d10e      	bne.n	8003868 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	f003 0301 	and.w	r3, r3, #1
 8003854:	2b01      	cmp	r3, #1
 8003856:	d107      	bne.n	8003868 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f06f 0201 	mvn.w	r2, #1
 8003860:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f7fd f9e8 	bl	8000c38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	691b      	ldr	r3, [r3, #16]
 800386e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003872:	2b80      	cmp	r3, #128	; 0x80
 8003874:	d10e      	bne.n	8003894 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	68db      	ldr	r3, [r3, #12]
 800387c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003880:	2b80      	cmp	r3, #128	; 0x80
 8003882:	d107      	bne.n	8003894 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800388c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f000 ff10 	bl	80046b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	691b      	ldr	r3, [r3, #16]
 800389a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800389e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038a2:	d10e      	bne.n	80038c2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	68db      	ldr	r3, [r3, #12]
 80038aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038ae:	2b80      	cmp	r3, #128	; 0x80
 80038b0:	d107      	bne.n	80038c2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80038ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	f000 ff03 	bl	80046c8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	691b      	ldr	r3, [r3, #16]
 80038c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038cc:	2b40      	cmp	r3, #64	; 0x40
 80038ce:	d10e      	bne.n	80038ee <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	68db      	ldr	r3, [r3, #12]
 80038d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038da:	2b40      	cmp	r3, #64	; 0x40
 80038dc:	d107      	bne.n	80038ee <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80038e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	f000 fa16 	bl	8003d1a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	691b      	ldr	r3, [r3, #16]
 80038f4:	f003 0320 	and.w	r3, r3, #32
 80038f8:	2b20      	cmp	r3, #32
 80038fa:	d10e      	bne.n	800391a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	68db      	ldr	r3, [r3, #12]
 8003902:	f003 0320 	and.w	r3, r3, #32
 8003906:	2b20      	cmp	r3, #32
 8003908:	d107      	bne.n	800391a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f06f 0220 	mvn.w	r2, #32
 8003912:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	f000 fec3 	bl	80046a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800391a:	bf00      	nop
 800391c:	3708      	adds	r7, #8
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}
	...

08003924 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b086      	sub	sp, #24
 8003928:	af00      	add	r7, sp, #0
 800392a:	60f8      	str	r0, [r7, #12]
 800392c:	60b9      	str	r1, [r7, #8]
 800392e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003930:	2300      	movs	r3, #0
 8003932:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800393a:	2b01      	cmp	r3, #1
 800393c:	d101      	bne.n	8003942 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800393e:	2302      	movs	r3, #2
 8003940:	e0ff      	b.n	8003b42 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2201      	movs	r2, #1
 8003946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2b14      	cmp	r3, #20
 800394e:	f200 80f0 	bhi.w	8003b32 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003952:	a201      	add	r2, pc, #4	; (adr r2, 8003958 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003958:	080039ad 	.word	0x080039ad
 800395c:	08003b33 	.word	0x08003b33
 8003960:	08003b33 	.word	0x08003b33
 8003964:	08003b33 	.word	0x08003b33
 8003968:	080039ed 	.word	0x080039ed
 800396c:	08003b33 	.word	0x08003b33
 8003970:	08003b33 	.word	0x08003b33
 8003974:	08003b33 	.word	0x08003b33
 8003978:	08003a2f 	.word	0x08003a2f
 800397c:	08003b33 	.word	0x08003b33
 8003980:	08003b33 	.word	0x08003b33
 8003984:	08003b33 	.word	0x08003b33
 8003988:	08003a6f 	.word	0x08003a6f
 800398c:	08003b33 	.word	0x08003b33
 8003990:	08003b33 	.word	0x08003b33
 8003994:	08003b33 	.word	0x08003b33
 8003998:	08003ab1 	.word	0x08003ab1
 800399c:	08003b33 	.word	0x08003b33
 80039a0:	08003b33 	.word	0x08003b33
 80039a4:	08003b33 	.word	0x08003b33
 80039a8:	08003af1 	.word	0x08003af1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	68b9      	ldr	r1, [r7, #8]
 80039b2:	4618      	mov	r0, r3
 80039b4:	f000 fa56 	bl	8003e64 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	699a      	ldr	r2, [r3, #24]
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f042 0208 	orr.w	r2, r2, #8
 80039c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	699a      	ldr	r2, [r3, #24]
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f022 0204 	bic.w	r2, r2, #4
 80039d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	6999      	ldr	r1, [r3, #24]
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	691a      	ldr	r2, [r3, #16]
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	430a      	orrs	r2, r1
 80039e8:	619a      	str	r2, [r3, #24]
      break;
 80039ea:	e0a5      	b.n	8003b38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	68b9      	ldr	r1, [r7, #8]
 80039f2:	4618      	mov	r0, r3
 80039f4:	f000 fac6 	bl	8003f84 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	699a      	ldr	r2, [r3, #24]
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	699a      	ldr	r2, [r3, #24]
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	6999      	ldr	r1, [r3, #24]
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	691b      	ldr	r3, [r3, #16]
 8003a22:	021a      	lsls	r2, r3, #8
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	430a      	orrs	r2, r1
 8003a2a:	619a      	str	r2, [r3, #24]
      break;
 8003a2c:	e084      	b.n	8003b38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	68b9      	ldr	r1, [r7, #8]
 8003a34:	4618      	mov	r0, r3
 8003a36:	f000 fb2f 	bl	8004098 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	69da      	ldr	r2, [r3, #28]
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f042 0208 	orr.w	r2, r2, #8
 8003a48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	69da      	ldr	r2, [r3, #28]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f022 0204 	bic.w	r2, r2, #4
 8003a58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	69d9      	ldr	r1, [r3, #28]
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	691a      	ldr	r2, [r3, #16]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	430a      	orrs	r2, r1
 8003a6a:	61da      	str	r2, [r3, #28]
      break;
 8003a6c:	e064      	b.n	8003b38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	68b9      	ldr	r1, [r7, #8]
 8003a74:	4618      	mov	r0, r3
 8003a76:	f000 fb97 	bl	80041a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	69da      	ldr	r2, [r3, #28]
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	69da      	ldr	r2, [r3, #28]
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	69d9      	ldr	r1, [r3, #28]
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	691b      	ldr	r3, [r3, #16]
 8003aa4:	021a      	lsls	r2, r3, #8
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	430a      	orrs	r2, r1
 8003aac:	61da      	str	r2, [r3, #28]
      break;
 8003aae:	e043      	b.n	8003b38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	68b9      	ldr	r1, [r7, #8]
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f000 fbe0 	bl	800427c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f042 0208 	orr.w	r2, r2, #8
 8003aca:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f022 0204 	bic.w	r2, r2, #4
 8003ada:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	691a      	ldr	r2, [r3, #16]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	430a      	orrs	r2, r1
 8003aec:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003aee:	e023      	b.n	8003b38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	68b9      	ldr	r1, [r7, #8]
 8003af6:	4618      	mov	r0, r3
 8003af8:	f000 fc24 	bl	8004344 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b0a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b1a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	691b      	ldr	r3, [r3, #16]
 8003b26:	021a      	lsls	r2, r3, #8
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	430a      	orrs	r2, r1
 8003b2e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003b30:	e002      	b.n	8003b38 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	75fb      	strb	r3, [r7, #23]
      break;
 8003b36:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003b40:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3718      	adds	r7, #24
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	bf00      	nop

08003b4c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b084      	sub	sp, #16
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
 8003b54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b56:	2300      	movs	r3, #0
 8003b58:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d101      	bne.n	8003b68 <HAL_TIM_ConfigClockSource+0x1c>
 8003b64:	2302      	movs	r3, #2
 8003b66:	e0b6      	b.n	8003cd6 <HAL_TIM_ConfigClockSource+0x18a>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2202      	movs	r2, #2
 8003b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b86:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003b8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b92:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	68ba      	ldr	r2, [r7, #8]
 8003b9a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ba4:	d03e      	beq.n	8003c24 <HAL_TIM_ConfigClockSource+0xd8>
 8003ba6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003baa:	f200 8087 	bhi.w	8003cbc <HAL_TIM_ConfigClockSource+0x170>
 8003bae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bb2:	f000 8086 	beq.w	8003cc2 <HAL_TIM_ConfigClockSource+0x176>
 8003bb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bba:	d87f      	bhi.n	8003cbc <HAL_TIM_ConfigClockSource+0x170>
 8003bbc:	2b70      	cmp	r3, #112	; 0x70
 8003bbe:	d01a      	beq.n	8003bf6 <HAL_TIM_ConfigClockSource+0xaa>
 8003bc0:	2b70      	cmp	r3, #112	; 0x70
 8003bc2:	d87b      	bhi.n	8003cbc <HAL_TIM_ConfigClockSource+0x170>
 8003bc4:	2b60      	cmp	r3, #96	; 0x60
 8003bc6:	d050      	beq.n	8003c6a <HAL_TIM_ConfigClockSource+0x11e>
 8003bc8:	2b60      	cmp	r3, #96	; 0x60
 8003bca:	d877      	bhi.n	8003cbc <HAL_TIM_ConfigClockSource+0x170>
 8003bcc:	2b50      	cmp	r3, #80	; 0x50
 8003bce:	d03c      	beq.n	8003c4a <HAL_TIM_ConfigClockSource+0xfe>
 8003bd0:	2b50      	cmp	r3, #80	; 0x50
 8003bd2:	d873      	bhi.n	8003cbc <HAL_TIM_ConfigClockSource+0x170>
 8003bd4:	2b40      	cmp	r3, #64	; 0x40
 8003bd6:	d058      	beq.n	8003c8a <HAL_TIM_ConfigClockSource+0x13e>
 8003bd8:	2b40      	cmp	r3, #64	; 0x40
 8003bda:	d86f      	bhi.n	8003cbc <HAL_TIM_ConfigClockSource+0x170>
 8003bdc:	2b30      	cmp	r3, #48	; 0x30
 8003bde:	d064      	beq.n	8003caa <HAL_TIM_ConfigClockSource+0x15e>
 8003be0:	2b30      	cmp	r3, #48	; 0x30
 8003be2:	d86b      	bhi.n	8003cbc <HAL_TIM_ConfigClockSource+0x170>
 8003be4:	2b20      	cmp	r3, #32
 8003be6:	d060      	beq.n	8003caa <HAL_TIM_ConfigClockSource+0x15e>
 8003be8:	2b20      	cmp	r3, #32
 8003bea:	d867      	bhi.n	8003cbc <HAL_TIM_ConfigClockSource+0x170>
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d05c      	beq.n	8003caa <HAL_TIM_ConfigClockSource+0x15e>
 8003bf0:	2b10      	cmp	r3, #16
 8003bf2:	d05a      	beq.n	8003caa <HAL_TIM_ConfigClockSource+0x15e>
 8003bf4:	e062      	b.n	8003cbc <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6818      	ldr	r0, [r3, #0]
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	6899      	ldr	r1, [r3, #8]
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	685a      	ldr	r2, [r3, #4]
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	68db      	ldr	r3, [r3, #12]
 8003c06:	f000 fc7d 	bl	8004504 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003c18:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	68ba      	ldr	r2, [r7, #8]
 8003c20:	609a      	str	r2, [r3, #8]
      break;
 8003c22:	e04f      	b.n	8003cc4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6818      	ldr	r0, [r3, #0]
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	6899      	ldr	r1, [r3, #8]
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	685a      	ldr	r2, [r3, #4]
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	68db      	ldr	r3, [r3, #12]
 8003c34:	f000 fc66 	bl	8004504 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	689a      	ldr	r2, [r3, #8]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c46:	609a      	str	r2, [r3, #8]
      break;
 8003c48:	e03c      	b.n	8003cc4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6818      	ldr	r0, [r3, #0]
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	6859      	ldr	r1, [r3, #4]
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	68db      	ldr	r3, [r3, #12]
 8003c56:	461a      	mov	r2, r3
 8003c58:	f000 fbda 	bl	8004410 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	2150      	movs	r1, #80	; 0x50
 8003c62:	4618      	mov	r0, r3
 8003c64:	f000 fc33 	bl	80044ce <TIM_ITRx_SetConfig>
      break;
 8003c68:	e02c      	b.n	8003cc4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6818      	ldr	r0, [r3, #0]
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	6859      	ldr	r1, [r3, #4]
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	68db      	ldr	r3, [r3, #12]
 8003c76:	461a      	mov	r2, r3
 8003c78:	f000 fbf9 	bl	800446e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	2160      	movs	r1, #96	; 0x60
 8003c82:	4618      	mov	r0, r3
 8003c84:	f000 fc23 	bl	80044ce <TIM_ITRx_SetConfig>
      break;
 8003c88:	e01c      	b.n	8003cc4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6818      	ldr	r0, [r3, #0]
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	6859      	ldr	r1, [r3, #4]
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	68db      	ldr	r3, [r3, #12]
 8003c96:	461a      	mov	r2, r3
 8003c98:	f000 fbba 	bl	8004410 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	2140      	movs	r1, #64	; 0x40
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f000 fc13 	bl	80044ce <TIM_ITRx_SetConfig>
      break;
 8003ca8:	e00c      	b.n	8003cc4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4619      	mov	r1, r3
 8003cb4:	4610      	mov	r0, r2
 8003cb6:	f000 fc0a 	bl	80044ce <TIM_ITRx_SetConfig>
      break;
 8003cba:	e003      	b.n	8003cc4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	73fb      	strb	r3, [r7, #15]
      break;
 8003cc0:	e000      	b.n	8003cc4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003cc2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003cd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3710      	adds	r7, #16
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}

08003cde <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003cde:	b480      	push	{r7}
 8003ce0:	b083      	sub	sp, #12
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ce6:	bf00      	nop
 8003ce8:	370c      	adds	r7, #12
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr

08003cf2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003cf2:	b480      	push	{r7}
 8003cf4:	b083      	sub	sp, #12
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003cfa:	bf00      	nop
 8003cfc:	370c      	adds	r7, #12
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr

08003d06 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003d06:	b480      	push	{r7}
 8003d08:	b083      	sub	sp, #12
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d0e:	bf00      	nop
 8003d10:	370c      	adds	r7, #12
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr

08003d1a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d1a:	b480      	push	{r7}
 8003d1c:	b083      	sub	sp, #12
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d22:	bf00      	nop
 8003d24:	370c      	adds	r7, #12
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr
	...

08003d30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b085      	sub	sp, #20
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	4a40      	ldr	r2, [pc, #256]	; (8003e44 <TIM_Base_SetConfig+0x114>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d013      	beq.n	8003d70 <TIM_Base_SetConfig+0x40>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d4e:	d00f      	beq.n	8003d70 <TIM_Base_SetConfig+0x40>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	4a3d      	ldr	r2, [pc, #244]	; (8003e48 <TIM_Base_SetConfig+0x118>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d00b      	beq.n	8003d70 <TIM_Base_SetConfig+0x40>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	4a3c      	ldr	r2, [pc, #240]	; (8003e4c <TIM_Base_SetConfig+0x11c>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d007      	beq.n	8003d70 <TIM_Base_SetConfig+0x40>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	4a3b      	ldr	r2, [pc, #236]	; (8003e50 <TIM_Base_SetConfig+0x120>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d003      	beq.n	8003d70 <TIM_Base_SetConfig+0x40>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	4a3a      	ldr	r2, [pc, #232]	; (8003e54 <TIM_Base_SetConfig+0x124>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d108      	bne.n	8003d82 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	68fa      	ldr	r2, [r7, #12]
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	4a2f      	ldr	r2, [pc, #188]	; (8003e44 <TIM_Base_SetConfig+0x114>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d01f      	beq.n	8003dca <TIM_Base_SetConfig+0x9a>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d90:	d01b      	beq.n	8003dca <TIM_Base_SetConfig+0x9a>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4a2c      	ldr	r2, [pc, #176]	; (8003e48 <TIM_Base_SetConfig+0x118>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d017      	beq.n	8003dca <TIM_Base_SetConfig+0x9a>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	4a2b      	ldr	r2, [pc, #172]	; (8003e4c <TIM_Base_SetConfig+0x11c>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d013      	beq.n	8003dca <TIM_Base_SetConfig+0x9a>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	4a2a      	ldr	r2, [pc, #168]	; (8003e50 <TIM_Base_SetConfig+0x120>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d00f      	beq.n	8003dca <TIM_Base_SetConfig+0x9a>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	4a29      	ldr	r2, [pc, #164]	; (8003e54 <TIM_Base_SetConfig+0x124>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d00b      	beq.n	8003dca <TIM_Base_SetConfig+0x9a>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	4a28      	ldr	r2, [pc, #160]	; (8003e58 <TIM_Base_SetConfig+0x128>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d007      	beq.n	8003dca <TIM_Base_SetConfig+0x9a>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	4a27      	ldr	r2, [pc, #156]	; (8003e5c <TIM_Base_SetConfig+0x12c>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d003      	beq.n	8003dca <TIM_Base_SetConfig+0x9a>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	4a26      	ldr	r2, [pc, #152]	; (8003e60 <TIM_Base_SetConfig+0x130>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d108      	bne.n	8003ddc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	68db      	ldr	r3, [r3, #12]
 8003dd6:	68fa      	ldr	r2, [r7, #12]
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	695b      	ldr	r3, [r3, #20]
 8003de6:	4313      	orrs	r3, r2
 8003de8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	68fa      	ldr	r2, [r7, #12]
 8003dee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	689a      	ldr	r2, [r3, #8]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	4a10      	ldr	r2, [pc, #64]	; (8003e44 <TIM_Base_SetConfig+0x114>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d00f      	beq.n	8003e28 <TIM_Base_SetConfig+0xf8>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	4a12      	ldr	r2, [pc, #72]	; (8003e54 <TIM_Base_SetConfig+0x124>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d00b      	beq.n	8003e28 <TIM_Base_SetConfig+0xf8>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	4a11      	ldr	r2, [pc, #68]	; (8003e58 <TIM_Base_SetConfig+0x128>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d007      	beq.n	8003e28 <TIM_Base_SetConfig+0xf8>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	4a10      	ldr	r2, [pc, #64]	; (8003e5c <TIM_Base_SetConfig+0x12c>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d003      	beq.n	8003e28 <TIM_Base_SetConfig+0xf8>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	4a0f      	ldr	r2, [pc, #60]	; (8003e60 <TIM_Base_SetConfig+0x130>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d103      	bne.n	8003e30 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	691a      	ldr	r2, [r3, #16]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2201      	movs	r2, #1
 8003e34:	615a      	str	r2, [r3, #20]
}
 8003e36:	bf00      	nop
 8003e38:	3714      	adds	r7, #20
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e40:	4770      	bx	lr
 8003e42:	bf00      	nop
 8003e44:	40012c00 	.word	0x40012c00
 8003e48:	40000400 	.word	0x40000400
 8003e4c:	40000800 	.word	0x40000800
 8003e50:	40000c00 	.word	0x40000c00
 8003e54:	40013400 	.word	0x40013400
 8003e58:	40014000 	.word	0x40014000
 8003e5c:	40014400 	.word	0x40014400
 8003e60:	40014800 	.word	0x40014800

08003e64 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b087      	sub	sp, #28
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6a1b      	ldr	r3, [r3, #32]
 8003e72:	f023 0201 	bic.w	r2, r3, #1
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6a1b      	ldr	r3, [r3, #32]
 8003e7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	699b      	ldr	r3, [r3, #24]
 8003e8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	f023 0303 	bic.w	r3, r3, #3
 8003e9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	68fa      	ldr	r2, [r7, #12]
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	f023 0302 	bic.w	r3, r3, #2
 8003eb0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	697a      	ldr	r2, [r7, #20]
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	4a2c      	ldr	r2, [pc, #176]	; (8003f70 <TIM_OC1_SetConfig+0x10c>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d00f      	beq.n	8003ee4 <TIM_OC1_SetConfig+0x80>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	4a2b      	ldr	r2, [pc, #172]	; (8003f74 <TIM_OC1_SetConfig+0x110>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d00b      	beq.n	8003ee4 <TIM_OC1_SetConfig+0x80>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	4a2a      	ldr	r2, [pc, #168]	; (8003f78 <TIM_OC1_SetConfig+0x114>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d007      	beq.n	8003ee4 <TIM_OC1_SetConfig+0x80>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	4a29      	ldr	r2, [pc, #164]	; (8003f7c <TIM_OC1_SetConfig+0x118>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d003      	beq.n	8003ee4 <TIM_OC1_SetConfig+0x80>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	4a28      	ldr	r2, [pc, #160]	; (8003f80 <TIM_OC1_SetConfig+0x11c>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d10c      	bne.n	8003efe <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	f023 0308 	bic.w	r3, r3, #8
 8003eea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	68db      	ldr	r3, [r3, #12]
 8003ef0:	697a      	ldr	r2, [r7, #20]
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	f023 0304 	bic.w	r3, r3, #4
 8003efc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4a1b      	ldr	r2, [pc, #108]	; (8003f70 <TIM_OC1_SetConfig+0x10c>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d00f      	beq.n	8003f26 <TIM_OC1_SetConfig+0xc2>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4a1a      	ldr	r2, [pc, #104]	; (8003f74 <TIM_OC1_SetConfig+0x110>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d00b      	beq.n	8003f26 <TIM_OC1_SetConfig+0xc2>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	4a19      	ldr	r2, [pc, #100]	; (8003f78 <TIM_OC1_SetConfig+0x114>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d007      	beq.n	8003f26 <TIM_OC1_SetConfig+0xc2>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	4a18      	ldr	r2, [pc, #96]	; (8003f7c <TIM_OC1_SetConfig+0x118>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d003      	beq.n	8003f26 <TIM_OC1_SetConfig+0xc2>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	4a17      	ldr	r2, [pc, #92]	; (8003f80 <TIM_OC1_SetConfig+0x11c>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d111      	bne.n	8003f4a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003f34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	695b      	ldr	r3, [r3, #20]
 8003f3a:	693a      	ldr	r2, [r7, #16]
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	699b      	ldr	r3, [r3, #24]
 8003f44:	693a      	ldr	r2, [r7, #16]
 8003f46:	4313      	orrs	r3, r2
 8003f48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	693a      	ldr	r2, [r7, #16]
 8003f4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	68fa      	ldr	r2, [r7, #12]
 8003f54:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	685a      	ldr	r2, [r3, #4]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	697a      	ldr	r2, [r7, #20]
 8003f62:	621a      	str	r2, [r3, #32]
}
 8003f64:	bf00      	nop
 8003f66:	371c      	adds	r7, #28
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6e:	4770      	bx	lr
 8003f70:	40012c00 	.word	0x40012c00
 8003f74:	40013400 	.word	0x40013400
 8003f78:	40014000 	.word	0x40014000
 8003f7c:	40014400 	.word	0x40014400
 8003f80:	40014800 	.word	0x40014800

08003f84 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b087      	sub	sp, #28
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
 8003f8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6a1b      	ldr	r3, [r3, #32]
 8003f92:	f023 0210 	bic.w	r2, r3, #16
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6a1b      	ldr	r3, [r3, #32]
 8003f9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	699b      	ldr	r3, [r3, #24]
 8003faa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003fb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fbe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	021b      	lsls	r3, r3, #8
 8003fc6:	68fa      	ldr	r2, [r7, #12]
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	f023 0320 	bic.w	r3, r3, #32
 8003fd2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	011b      	lsls	r3, r3, #4
 8003fda:	697a      	ldr	r2, [r7, #20]
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	4a28      	ldr	r2, [pc, #160]	; (8004084 <TIM_OC2_SetConfig+0x100>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d003      	beq.n	8003ff0 <TIM_OC2_SetConfig+0x6c>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	4a27      	ldr	r2, [pc, #156]	; (8004088 <TIM_OC2_SetConfig+0x104>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d10d      	bne.n	800400c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ff6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	68db      	ldr	r3, [r3, #12]
 8003ffc:	011b      	lsls	r3, r3, #4
 8003ffe:	697a      	ldr	r2, [r7, #20]
 8004000:	4313      	orrs	r3, r2
 8004002:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800400a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	4a1d      	ldr	r2, [pc, #116]	; (8004084 <TIM_OC2_SetConfig+0x100>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d00f      	beq.n	8004034 <TIM_OC2_SetConfig+0xb0>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	4a1c      	ldr	r2, [pc, #112]	; (8004088 <TIM_OC2_SetConfig+0x104>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d00b      	beq.n	8004034 <TIM_OC2_SetConfig+0xb0>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	4a1b      	ldr	r2, [pc, #108]	; (800408c <TIM_OC2_SetConfig+0x108>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d007      	beq.n	8004034 <TIM_OC2_SetConfig+0xb0>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	4a1a      	ldr	r2, [pc, #104]	; (8004090 <TIM_OC2_SetConfig+0x10c>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d003      	beq.n	8004034 <TIM_OC2_SetConfig+0xb0>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	4a19      	ldr	r2, [pc, #100]	; (8004094 <TIM_OC2_SetConfig+0x110>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d113      	bne.n	800405c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800403a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004042:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	695b      	ldr	r3, [r3, #20]
 8004048:	009b      	lsls	r3, r3, #2
 800404a:	693a      	ldr	r2, [r7, #16]
 800404c:	4313      	orrs	r3, r2
 800404e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	699b      	ldr	r3, [r3, #24]
 8004054:	009b      	lsls	r3, r3, #2
 8004056:	693a      	ldr	r2, [r7, #16]
 8004058:	4313      	orrs	r3, r2
 800405a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	693a      	ldr	r2, [r7, #16]
 8004060:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	68fa      	ldr	r2, [r7, #12]
 8004066:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	685a      	ldr	r2, [r3, #4]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	697a      	ldr	r2, [r7, #20]
 8004074:	621a      	str	r2, [r3, #32]
}
 8004076:	bf00      	nop
 8004078:	371c      	adds	r7, #28
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr
 8004082:	bf00      	nop
 8004084:	40012c00 	.word	0x40012c00
 8004088:	40013400 	.word	0x40013400
 800408c:	40014000 	.word	0x40014000
 8004090:	40014400 	.word	0x40014400
 8004094:	40014800 	.word	0x40014800

08004098 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004098:	b480      	push	{r7}
 800409a:	b087      	sub	sp, #28
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
 80040a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6a1b      	ldr	r3, [r3, #32]
 80040a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6a1b      	ldr	r3, [r3, #32]
 80040b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	69db      	ldr	r3, [r3, #28]
 80040be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f023 0303 	bic.w	r3, r3, #3
 80040d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	68fa      	ldr	r2, [r7, #12]
 80040da:	4313      	orrs	r3, r2
 80040dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80040e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	021b      	lsls	r3, r3, #8
 80040ec:	697a      	ldr	r2, [r7, #20]
 80040ee:	4313      	orrs	r3, r2
 80040f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	4a27      	ldr	r2, [pc, #156]	; (8004194 <TIM_OC3_SetConfig+0xfc>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d003      	beq.n	8004102 <TIM_OC3_SetConfig+0x6a>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	4a26      	ldr	r2, [pc, #152]	; (8004198 <TIM_OC3_SetConfig+0x100>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d10d      	bne.n	800411e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004108:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	68db      	ldr	r3, [r3, #12]
 800410e:	021b      	lsls	r3, r3, #8
 8004110:	697a      	ldr	r2, [r7, #20]
 8004112:	4313      	orrs	r3, r2
 8004114:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800411c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	4a1c      	ldr	r2, [pc, #112]	; (8004194 <TIM_OC3_SetConfig+0xfc>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d00f      	beq.n	8004146 <TIM_OC3_SetConfig+0xae>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	4a1b      	ldr	r2, [pc, #108]	; (8004198 <TIM_OC3_SetConfig+0x100>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d00b      	beq.n	8004146 <TIM_OC3_SetConfig+0xae>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	4a1a      	ldr	r2, [pc, #104]	; (800419c <TIM_OC3_SetConfig+0x104>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d007      	beq.n	8004146 <TIM_OC3_SetConfig+0xae>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	4a19      	ldr	r2, [pc, #100]	; (80041a0 <TIM_OC3_SetConfig+0x108>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d003      	beq.n	8004146 <TIM_OC3_SetConfig+0xae>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	4a18      	ldr	r2, [pc, #96]	; (80041a4 <TIM_OC3_SetConfig+0x10c>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d113      	bne.n	800416e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800414c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004154:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	695b      	ldr	r3, [r3, #20]
 800415a:	011b      	lsls	r3, r3, #4
 800415c:	693a      	ldr	r2, [r7, #16]
 800415e:	4313      	orrs	r3, r2
 8004160:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	699b      	ldr	r3, [r3, #24]
 8004166:	011b      	lsls	r3, r3, #4
 8004168:	693a      	ldr	r2, [r7, #16]
 800416a:	4313      	orrs	r3, r2
 800416c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	693a      	ldr	r2, [r7, #16]
 8004172:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	68fa      	ldr	r2, [r7, #12]
 8004178:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	685a      	ldr	r2, [r3, #4]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	697a      	ldr	r2, [r7, #20]
 8004186:	621a      	str	r2, [r3, #32]
}
 8004188:	bf00      	nop
 800418a:	371c      	adds	r7, #28
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr
 8004194:	40012c00 	.word	0x40012c00
 8004198:	40013400 	.word	0x40013400
 800419c:	40014000 	.word	0x40014000
 80041a0:	40014400 	.word	0x40014400
 80041a4:	40014800 	.word	0x40014800

080041a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b087      	sub	sp, #28
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
 80041b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6a1b      	ldr	r3, [r3, #32]
 80041b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6a1b      	ldr	r3, [r3, #32]
 80041c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	69db      	ldr	r3, [r3, #28]
 80041ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80041d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	021b      	lsls	r3, r3, #8
 80041ea:	68fa      	ldr	r2, [r7, #12]
 80041ec:	4313      	orrs	r3, r2
 80041ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80041f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	031b      	lsls	r3, r3, #12
 80041fe:	693a      	ldr	r2, [r7, #16]
 8004200:	4313      	orrs	r3, r2
 8004202:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	4a18      	ldr	r2, [pc, #96]	; (8004268 <TIM_OC4_SetConfig+0xc0>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d00f      	beq.n	800422c <TIM_OC4_SetConfig+0x84>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	4a17      	ldr	r2, [pc, #92]	; (800426c <TIM_OC4_SetConfig+0xc4>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d00b      	beq.n	800422c <TIM_OC4_SetConfig+0x84>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	4a16      	ldr	r2, [pc, #88]	; (8004270 <TIM_OC4_SetConfig+0xc8>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d007      	beq.n	800422c <TIM_OC4_SetConfig+0x84>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	4a15      	ldr	r2, [pc, #84]	; (8004274 <TIM_OC4_SetConfig+0xcc>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d003      	beq.n	800422c <TIM_OC4_SetConfig+0x84>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	4a14      	ldr	r2, [pc, #80]	; (8004278 <TIM_OC4_SetConfig+0xd0>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d109      	bne.n	8004240 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004232:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	695b      	ldr	r3, [r3, #20]
 8004238:	019b      	lsls	r3, r3, #6
 800423a:	697a      	ldr	r2, [r7, #20]
 800423c:	4313      	orrs	r3, r2
 800423e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	697a      	ldr	r2, [r7, #20]
 8004244:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	68fa      	ldr	r2, [r7, #12]
 800424a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	685a      	ldr	r2, [r3, #4]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	693a      	ldr	r2, [r7, #16]
 8004258:	621a      	str	r2, [r3, #32]
}
 800425a:	bf00      	nop
 800425c:	371c      	adds	r7, #28
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr
 8004266:	bf00      	nop
 8004268:	40012c00 	.word	0x40012c00
 800426c:	40013400 	.word	0x40013400
 8004270:	40014000 	.word	0x40014000
 8004274:	40014400 	.word	0x40014400
 8004278:	40014800 	.word	0x40014800

0800427c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800427c:	b480      	push	{r7}
 800427e:	b087      	sub	sp, #28
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
 8004284:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6a1b      	ldr	r3, [r3, #32]
 800428a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6a1b      	ldr	r3, [r3, #32]
 8004296:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	68fa      	ldr	r2, [r7, #12]
 80042b6:	4313      	orrs	r3, r2
 80042b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80042c0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	041b      	lsls	r3, r3, #16
 80042c8:	693a      	ldr	r2, [r7, #16]
 80042ca:	4313      	orrs	r3, r2
 80042cc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	4a17      	ldr	r2, [pc, #92]	; (8004330 <TIM_OC5_SetConfig+0xb4>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d00f      	beq.n	80042f6 <TIM_OC5_SetConfig+0x7a>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	4a16      	ldr	r2, [pc, #88]	; (8004334 <TIM_OC5_SetConfig+0xb8>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d00b      	beq.n	80042f6 <TIM_OC5_SetConfig+0x7a>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	4a15      	ldr	r2, [pc, #84]	; (8004338 <TIM_OC5_SetConfig+0xbc>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d007      	beq.n	80042f6 <TIM_OC5_SetConfig+0x7a>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	4a14      	ldr	r2, [pc, #80]	; (800433c <TIM_OC5_SetConfig+0xc0>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d003      	beq.n	80042f6 <TIM_OC5_SetConfig+0x7a>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	4a13      	ldr	r2, [pc, #76]	; (8004340 <TIM_OC5_SetConfig+0xc4>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d109      	bne.n	800430a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042fc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	695b      	ldr	r3, [r3, #20]
 8004302:	021b      	lsls	r3, r3, #8
 8004304:	697a      	ldr	r2, [r7, #20]
 8004306:	4313      	orrs	r3, r2
 8004308:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	697a      	ldr	r2, [r7, #20]
 800430e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	68fa      	ldr	r2, [r7, #12]
 8004314:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	685a      	ldr	r2, [r3, #4]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	693a      	ldr	r2, [r7, #16]
 8004322:	621a      	str	r2, [r3, #32]
}
 8004324:	bf00      	nop
 8004326:	371c      	adds	r7, #28
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr
 8004330:	40012c00 	.word	0x40012c00
 8004334:	40013400 	.word	0x40013400
 8004338:	40014000 	.word	0x40014000
 800433c:	40014400 	.word	0x40014400
 8004340:	40014800 	.word	0x40014800

08004344 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004344:	b480      	push	{r7}
 8004346:	b087      	sub	sp, #28
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
 800434c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6a1b      	ldr	r3, [r3, #32]
 8004352:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6a1b      	ldr	r3, [r3, #32]
 800435e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800436a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004372:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004376:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	021b      	lsls	r3, r3, #8
 800437e:	68fa      	ldr	r2, [r7, #12]
 8004380:	4313      	orrs	r3, r2
 8004382:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800438a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	051b      	lsls	r3, r3, #20
 8004392:	693a      	ldr	r2, [r7, #16]
 8004394:	4313      	orrs	r3, r2
 8004396:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	4a18      	ldr	r2, [pc, #96]	; (80043fc <TIM_OC6_SetConfig+0xb8>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d00f      	beq.n	80043c0 <TIM_OC6_SetConfig+0x7c>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	4a17      	ldr	r2, [pc, #92]	; (8004400 <TIM_OC6_SetConfig+0xbc>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d00b      	beq.n	80043c0 <TIM_OC6_SetConfig+0x7c>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	4a16      	ldr	r2, [pc, #88]	; (8004404 <TIM_OC6_SetConfig+0xc0>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d007      	beq.n	80043c0 <TIM_OC6_SetConfig+0x7c>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	4a15      	ldr	r2, [pc, #84]	; (8004408 <TIM_OC6_SetConfig+0xc4>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d003      	beq.n	80043c0 <TIM_OC6_SetConfig+0x7c>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	4a14      	ldr	r2, [pc, #80]	; (800440c <TIM_OC6_SetConfig+0xc8>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d109      	bne.n	80043d4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043c6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	695b      	ldr	r3, [r3, #20]
 80043cc:	029b      	lsls	r3, r3, #10
 80043ce:	697a      	ldr	r2, [r7, #20]
 80043d0:	4313      	orrs	r3, r2
 80043d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	697a      	ldr	r2, [r7, #20]
 80043d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	68fa      	ldr	r2, [r7, #12]
 80043de:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	685a      	ldr	r2, [r3, #4]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	693a      	ldr	r2, [r7, #16]
 80043ec:	621a      	str	r2, [r3, #32]
}
 80043ee:	bf00      	nop
 80043f0:	371c      	adds	r7, #28
 80043f2:	46bd      	mov	sp, r7
 80043f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f8:	4770      	bx	lr
 80043fa:	bf00      	nop
 80043fc:	40012c00 	.word	0x40012c00
 8004400:	40013400 	.word	0x40013400
 8004404:	40014000 	.word	0x40014000
 8004408:	40014400 	.word	0x40014400
 800440c:	40014800 	.word	0x40014800

08004410 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004410:	b480      	push	{r7}
 8004412:	b087      	sub	sp, #28
 8004414:	af00      	add	r7, sp, #0
 8004416:	60f8      	str	r0, [r7, #12]
 8004418:	60b9      	str	r1, [r7, #8]
 800441a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	6a1b      	ldr	r3, [r3, #32]
 8004420:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	6a1b      	ldr	r3, [r3, #32]
 8004426:	f023 0201 	bic.w	r2, r3, #1
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	699b      	ldr	r3, [r3, #24]
 8004432:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800443a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	011b      	lsls	r3, r3, #4
 8004440:	693a      	ldr	r2, [r7, #16]
 8004442:	4313      	orrs	r3, r2
 8004444:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	f023 030a 	bic.w	r3, r3, #10
 800444c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800444e:	697a      	ldr	r2, [r7, #20]
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	4313      	orrs	r3, r2
 8004454:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	693a      	ldr	r2, [r7, #16]
 800445a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	697a      	ldr	r2, [r7, #20]
 8004460:	621a      	str	r2, [r3, #32]
}
 8004462:	bf00      	nop
 8004464:	371c      	adds	r7, #28
 8004466:	46bd      	mov	sp, r7
 8004468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446c:	4770      	bx	lr

0800446e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800446e:	b480      	push	{r7}
 8004470:	b087      	sub	sp, #28
 8004472:	af00      	add	r7, sp, #0
 8004474:	60f8      	str	r0, [r7, #12]
 8004476:	60b9      	str	r1, [r7, #8]
 8004478:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	6a1b      	ldr	r3, [r3, #32]
 800447e:	f023 0210 	bic.w	r2, r3, #16
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	699b      	ldr	r3, [r3, #24]
 800448a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	6a1b      	ldr	r3, [r3, #32]
 8004490:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004498:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	031b      	lsls	r3, r3, #12
 800449e:	697a      	ldr	r2, [r7, #20]
 80044a0:	4313      	orrs	r3, r2
 80044a2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80044aa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	011b      	lsls	r3, r3, #4
 80044b0:	693a      	ldr	r2, [r7, #16]
 80044b2:	4313      	orrs	r3, r2
 80044b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	697a      	ldr	r2, [r7, #20]
 80044ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	693a      	ldr	r2, [r7, #16]
 80044c0:	621a      	str	r2, [r3, #32]
}
 80044c2:	bf00      	nop
 80044c4:	371c      	adds	r7, #28
 80044c6:	46bd      	mov	sp, r7
 80044c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044cc:	4770      	bx	lr

080044ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80044ce:	b480      	push	{r7}
 80044d0:	b085      	sub	sp, #20
 80044d2:	af00      	add	r7, sp, #0
 80044d4:	6078      	str	r0, [r7, #4]
 80044d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80044e6:	683a      	ldr	r2, [r7, #0]
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	4313      	orrs	r3, r2
 80044ec:	f043 0307 	orr.w	r3, r3, #7
 80044f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	68fa      	ldr	r2, [r7, #12]
 80044f6:	609a      	str	r2, [r3, #8]
}
 80044f8:	bf00      	nop
 80044fa:	3714      	adds	r7, #20
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr

08004504 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004504:	b480      	push	{r7}
 8004506:	b087      	sub	sp, #28
 8004508:	af00      	add	r7, sp, #0
 800450a:	60f8      	str	r0, [r7, #12]
 800450c:	60b9      	str	r1, [r7, #8]
 800450e:	607a      	str	r2, [r7, #4]
 8004510:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800451e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	021a      	lsls	r2, r3, #8
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	431a      	orrs	r2, r3
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	4313      	orrs	r3, r2
 800452c:	697a      	ldr	r2, [r7, #20]
 800452e:	4313      	orrs	r3, r2
 8004530:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	697a      	ldr	r2, [r7, #20]
 8004536:	609a      	str	r2, [r3, #8]
}
 8004538:	bf00      	nop
 800453a:	371c      	adds	r7, #28
 800453c:	46bd      	mov	sp, r7
 800453e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004542:	4770      	bx	lr

08004544 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004544:	b480      	push	{r7}
 8004546:	b087      	sub	sp, #28
 8004548:	af00      	add	r7, sp, #0
 800454a:	60f8      	str	r0, [r7, #12]
 800454c:	60b9      	str	r1, [r7, #8]
 800454e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	f003 031f 	and.w	r3, r3, #31
 8004556:	2201      	movs	r2, #1
 8004558:	fa02 f303 	lsl.w	r3, r2, r3
 800455c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	6a1a      	ldr	r2, [r3, #32]
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	43db      	mvns	r3, r3
 8004566:	401a      	ands	r2, r3
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	6a1a      	ldr	r2, [r3, #32]
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	f003 031f 	and.w	r3, r3, #31
 8004576:	6879      	ldr	r1, [r7, #4]
 8004578:	fa01 f303 	lsl.w	r3, r1, r3
 800457c:	431a      	orrs	r2, r3
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	621a      	str	r2, [r3, #32]
}
 8004582:	bf00      	nop
 8004584:	371c      	adds	r7, #28
 8004586:	46bd      	mov	sp, r7
 8004588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458c:	4770      	bx	lr
	...

08004590 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004590:	b480      	push	{r7}
 8004592:	b085      	sub	sp, #20
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
 8004598:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	d101      	bne.n	80045a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80045a4:	2302      	movs	r3, #2
 80045a6:	e068      	b.n	800467a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2201      	movs	r2, #1
 80045ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2202      	movs	r2, #2
 80045b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a2e      	ldr	r2, [pc, #184]	; (8004688 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d004      	beq.n	80045dc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a2d      	ldr	r2, [pc, #180]	; (800468c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d108      	bne.n	80045ee <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80045e2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	68fa      	ldr	r2, [r7, #12]
 80045ea:	4313      	orrs	r3, r2
 80045ec:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045f4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	68fa      	ldr	r2, [r7, #12]
 80045fc:	4313      	orrs	r3, r2
 80045fe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	68fa      	ldr	r2, [r7, #12]
 8004606:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a1e      	ldr	r2, [pc, #120]	; (8004688 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d01d      	beq.n	800464e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800461a:	d018      	beq.n	800464e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a1b      	ldr	r2, [pc, #108]	; (8004690 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d013      	beq.n	800464e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a1a      	ldr	r2, [pc, #104]	; (8004694 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d00e      	beq.n	800464e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a18      	ldr	r2, [pc, #96]	; (8004698 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d009      	beq.n	800464e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a13      	ldr	r2, [pc, #76]	; (800468c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d004      	beq.n	800464e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a14      	ldr	r2, [pc, #80]	; (800469c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d10c      	bne.n	8004668 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004654:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	68ba      	ldr	r2, [r7, #8]
 800465c:	4313      	orrs	r3, r2
 800465e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	68ba      	ldr	r2, [r7, #8]
 8004666:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2201      	movs	r2, #1
 800466c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2200      	movs	r2, #0
 8004674:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004678:	2300      	movs	r3, #0
}
 800467a:	4618      	mov	r0, r3
 800467c:	3714      	adds	r7, #20
 800467e:	46bd      	mov	sp, r7
 8004680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004684:	4770      	bx	lr
 8004686:	bf00      	nop
 8004688:	40012c00 	.word	0x40012c00
 800468c:	40013400 	.word	0x40013400
 8004690:	40000400 	.word	0x40000400
 8004694:	40000800 	.word	0x40000800
 8004698:	40000c00 	.word	0x40000c00
 800469c:	40014000 	.word	0x40014000

080046a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b083      	sub	sp, #12
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80046a8:	bf00      	nop
 80046aa:	370c      	adds	r7, #12
 80046ac:	46bd      	mov	sp, r7
 80046ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b2:	4770      	bx	lr

080046b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b083      	sub	sp, #12
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80046bc:	bf00      	nop
 80046be:	370c      	adds	r7, #12
 80046c0:	46bd      	mov	sp, r7
 80046c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c6:	4770      	bx	lr

080046c8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b083      	sub	sp, #12
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80046d0:	bf00      	nop
 80046d2:	370c      	adds	r7, #12
 80046d4:	46bd      	mov	sp, r7
 80046d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046da:	4770      	bx	lr

080046dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b082      	sub	sp, #8
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d101      	bne.n	80046ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	e040      	b.n	8004770 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d106      	bne.n	8004704 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2200      	movs	r2, #0
 80046fa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	f7fc fbde 	bl	8000ec0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2224      	movs	r2, #36	; 0x24
 8004708:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	681a      	ldr	r2, [r3, #0]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f022 0201 	bic.w	r2, r2, #1
 8004718:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f000 fbc2 	bl	8004ea4 <UART_SetConfig>
 8004720:	4603      	mov	r3, r0
 8004722:	2b01      	cmp	r3, #1
 8004724:	d101      	bne.n	800472a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	e022      	b.n	8004770 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800472e:	2b00      	cmp	r3, #0
 8004730:	d002      	beq.n	8004738 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f000 fe6e 	bl	8005414 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	685a      	ldr	r2, [r3, #4]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004746:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	689a      	ldr	r2, [r3, #8]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004756:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f042 0201 	orr.w	r2, r2, #1
 8004766:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004768:	6878      	ldr	r0, [r7, #4]
 800476a:	f000 fef5 	bl	8005558 <UART_CheckIdleState>
 800476e:	4603      	mov	r3, r0
}
 8004770:	4618      	mov	r0, r3
 8004772:	3708      	adds	r7, #8
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}

08004778 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b08a      	sub	sp, #40	; 0x28
 800477c:	af02      	add	r7, sp, #8
 800477e:	60f8      	str	r0, [r7, #12]
 8004780:	60b9      	str	r1, [r7, #8]
 8004782:	603b      	str	r3, [r7, #0]
 8004784:	4613      	mov	r3, r2
 8004786:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800478c:	2b20      	cmp	r3, #32
 800478e:	f040 8082 	bne.w	8004896 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d002      	beq.n	800479e <HAL_UART_Transmit+0x26>
 8004798:	88fb      	ldrh	r3, [r7, #6]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d101      	bne.n	80047a2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800479e:	2301      	movs	r3, #1
 80047a0:	e07a      	b.n	8004898 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80047a8:	2b01      	cmp	r3, #1
 80047aa:	d101      	bne.n	80047b0 <HAL_UART_Transmit+0x38>
 80047ac:	2302      	movs	r3, #2
 80047ae:	e073      	b.n	8004898 <HAL_UART_Transmit+0x120>
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2201      	movs	r2, #1
 80047b4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2200      	movs	r2, #0
 80047bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2221      	movs	r2, #33	; 0x21
 80047c4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80047c6:	f7fc fd6f 	bl	80012a8 <HAL_GetTick>
 80047ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	88fa      	ldrh	r2, [r7, #6]
 80047d0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	88fa      	ldrh	r2, [r7, #6]
 80047d8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047e4:	d108      	bne.n	80047f8 <HAL_UART_Transmit+0x80>
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	691b      	ldr	r3, [r3, #16]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d104      	bne.n	80047f8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80047ee:	2300      	movs	r3, #0
 80047f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	61bb      	str	r3, [r7, #24]
 80047f6:	e003      	b.n	8004800 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80047fc:	2300      	movs	r3, #0
 80047fe:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2200      	movs	r2, #0
 8004804:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004808:	e02d      	b.n	8004866 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	9300      	str	r3, [sp, #0]
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	2200      	movs	r2, #0
 8004812:	2180      	movs	r1, #128	; 0x80
 8004814:	68f8      	ldr	r0, [r7, #12]
 8004816:	f000 fee8 	bl	80055ea <UART_WaitOnFlagUntilTimeout>
 800481a:	4603      	mov	r3, r0
 800481c:	2b00      	cmp	r3, #0
 800481e:	d001      	beq.n	8004824 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004820:	2303      	movs	r3, #3
 8004822:	e039      	b.n	8004898 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004824:	69fb      	ldr	r3, [r7, #28]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d10b      	bne.n	8004842 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800482a:	69bb      	ldr	r3, [r7, #24]
 800482c:	881a      	ldrh	r2, [r3, #0]
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004836:	b292      	uxth	r2, r2
 8004838:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800483a:	69bb      	ldr	r3, [r7, #24]
 800483c:	3302      	adds	r3, #2
 800483e:	61bb      	str	r3, [r7, #24]
 8004840:	e008      	b.n	8004854 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004842:	69fb      	ldr	r3, [r7, #28]
 8004844:	781a      	ldrb	r2, [r3, #0]
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	b292      	uxth	r2, r2
 800484c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800484e:	69fb      	ldr	r3, [r7, #28]
 8004850:	3301      	adds	r3, #1
 8004852:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800485a:	b29b      	uxth	r3, r3
 800485c:	3b01      	subs	r3, #1
 800485e:	b29a      	uxth	r2, r3
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800486c:	b29b      	uxth	r3, r3
 800486e:	2b00      	cmp	r3, #0
 8004870:	d1cb      	bne.n	800480a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	9300      	str	r3, [sp, #0]
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	2200      	movs	r2, #0
 800487a:	2140      	movs	r1, #64	; 0x40
 800487c:	68f8      	ldr	r0, [r7, #12]
 800487e:	f000 feb4 	bl	80055ea <UART_WaitOnFlagUntilTimeout>
 8004882:	4603      	mov	r3, r0
 8004884:	2b00      	cmp	r3, #0
 8004886:	d001      	beq.n	800488c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004888:	2303      	movs	r3, #3
 800488a:	e005      	b.n	8004898 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	2220      	movs	r2, #32
 8004890:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004892:	2300      	movs	r3, #0
 8004894:	e000      	b.n	8004898 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004896:	2302      	movs	r3, #2
  }
}
 8004898:	4618      	mov	r0, r3
 800489a:	3720      	adds	r7, #32
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}

080048a0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b0ba      	sub	sp, #232	; 0xe8
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	69db      	ldr	r3, [r3, #28]
 80048ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80048c6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80048ca:	f640 030f 	movw	r3, #2063	; 0x80f
 80048ce:	4013      	ands	r3, r2
 80048d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80048d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d115      	bne.n	8004908 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80048dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048e0:	f003 0320 	and.w	r3, r3, #32
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d00f      	beq.n	8004908 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80048e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048ec:	f003 0320 	and.w	r3, r3, #32
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d009      	beq.n	8004908 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	f000 82a6 	beq.w	8004e4a <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	4798      	blx	r3
      }
      return;
 8004906:	e2a0      	b.n	8004e4a <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004908:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800490c:	2b00      	cmp	r3, #0
 800490e:	f000 8117 	beq.w	8004b40 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004912:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004916:	f003 0301 	and.w	r3, r3, #1
 800491a:	2b00      	cmp	r3, #0
 800491c:	d106      	bne.n	800492c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800491e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004922:	4b85      	ldr	r3, [pc, #532]	; (8004b38 <HAL_UART_IRQHandler+0x298>)
 8004924:	4013      	ands	r3, r2
 8004926:	2b00      	cmp	r3, #0
 8004928:	f000 810a 	beq.w	8004b40 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800492c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004930:	f003 0301 	and.w	r3, r3, #1
 8004934:	2b00      	cmp	r3, #0
 8004936:	d011      	beq.n	800495c <HAL_UART_IRQHandler+0xbc>
 8004938:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800493c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004940:	2b00      	cmp	r3, #0
 8004942:	d00b      	beq.n	800495c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	2201      	movs	r2, #1
 800494a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004952:	f043 0201 	orr.w	r2, r3, #1
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800495c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004960:	f003 0302 	and.w	r3, r3, #2
 8004964:	2b00      	cmp	r3, #0
 8004966:	d011      	beq.n	800498c <HAL_UART_IRQHandler+0xec>
 8004968:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800496c:	f003 0301 	and.w	r3, r3, #1
 8004970:	2b00      	cmp	r3, #0
 8004972:	d00b      	beq.n	800498c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	2202      	movs	r2, #2
 800497a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004982:	f043 0204 	orr.w	r2, r3, #4
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800498c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004990:	f003 0304 	and.w	r3, r3, #4
 8004994:	2b00      	cmp	r3, #0
 8004996:	d011      	beq.n	80049bc <HAL_UART_IRQHandler+0x11c>
 8004998:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800499c:	f003 0301 	and.w	r3, r3, #1
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d00b      	beq.n	80049bc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	2204      	movs	r2, #4
 80049aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80049b2:	f043 0202 	orr.w	r2, r3, #2
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80049bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049c0:	f003 0308 	and.w	r3, r3, #8
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d017      	beq.n	80049f8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80049c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049cc:	f003 0320 	and.w	r3, r3, #32
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d105      	bne.n	80049e0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80049d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80049d8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d00b      	beq.n	80049f8 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	2208      	movs	r2, #8
 80049e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80049ee:	f043 0208 	orr.w	r2, r3, #8
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80049f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d012      	beq.n	8004a2a <HAL_UART_IRQHandler+0x18a>
 8004a04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a08:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d00c      	beq.n	8004a2a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a18:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a20:	f043 0220 	orr.w	r2, r3, #32
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	f000 820c 	beq.w	8004e4e <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004a36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a3a:	f003 0320 	and.w	r3, r3, #32
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d00d      	beq.n	8004a5e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004a42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a46:	f003 0320 	and.w	r3, r3, #32
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d007      	beq.n	8004a5e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d003      	beq.n	8004a5e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a64:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a72:	2b40      	cmp	r3, #64	; 0x40
 8004a74:	d005      	beq.n	8004a82 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004a76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004a7a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d04f      	beq.n	8004b22 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f000 fe75 	bl	8005772 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a92:	2b40      	cmp	r3, #64	; 0x40
 8004a94:	d141      	bne.n	8004b1a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	3308      	adds	r3, #8
 8004a9c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aa0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004aa4:	e853 3f00 	ldrex	r3, [r3]
 8004aa8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004aac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004ab0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ab4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	3308      	adds	r3, #8
 8004abe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004ac2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004ac6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004ace:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004ad2:	e841 2300 	strex	r3, r2, [r1]
 8004ad6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004ada:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d1d9      	bne.n	8004a96 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d013      	beq.n	8004b12 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aee:	4a13      	ldr	r2, [pc, #76]	; (8004b3c <HAL_UART_IRQHandler+0x29c>)
 8004af0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004af6:	4618      	mov	r0, r3
 8004af8:	f7fc fd31 	bl	800155e <HAL_DMA_Abort_IT>
 8004afc:	4603      	mov	r3, r0
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d017      	beq.n	8004b32 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b08:	687a      	ldr	r2, [r7, #4]
 8004b0a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8004b0c:	4610      	mov	r0, r2
 8004b0e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b10:	e00f      	b.n	8004b32 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	f000 f9b0 	bl	8004e78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b18:	e00b      	b.n	8004b32 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f000 f9ac 	bl	8004e78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b20:	e007      	b.n	8004b32 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f000 f9a8 	bl	8004e78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8004b30:	e18d      	b.n	8004e4e <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b32:	bf00      	nop
    return;
 8004b34:	e18b      	b.n	8004e4e <HAL_UART_IRQHandler+0x5ae>
 8004b36:	bf00      	nop
 8004b38:	04000120 	.word	0x04000120
 8004b3c:	08005839 	.word	0x08005839

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b44:	2b01      	cmp	r3, #1
 8004b46:	f040 8146 	bne.w	8004dd6 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004b4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b4e:	f003 0310 	and.w	r3, r3, #16
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	f000 813f 	beq.w	8004dd6 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004b58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b5c:	f003 0310 	and.w	r3, r3, #16
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	f000 8138 	beq.w	8004dd6 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	2210      	movs	r2, #16
 8004b6c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b78:	2b40      	cmp	r3, #64	; 0x40
 8004b7a:	f040 80b4 	bne.w	8004ce6 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004b8a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	f000 815f 	beq.w	8004e52 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004b9a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004b9e:	429a      	cmp	r2, r3
 8004ba0:	f080 8157 	bcs.w	8004e52 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004baa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f003 0320 	and.w	r3, r3, #32
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	f040 8085 	bne.w	8004cca <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bc8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004bcc:	e853 3f00 	ldrex	r3, [r3]
 8004bd0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004bd4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004bd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004bdc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	461a      	mov	r2, r3
 8004be6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004bea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004bee:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bf2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004bf6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004bfa:	e841 2300 	strex	r3, r2, [r1]
 8004bfe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004c02:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d1da      	bne.n	8004bc0 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	3308      	adds	r3, #8
 8004c10:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c14:	e853 3f00 	ldrex	r3, [r3]
 8004c18:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004c1a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004c1c:	f023 0301 	bic.w	r3, r3, #1
 8004c20:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	3308      	adds	r3, #8
 8004c2a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004c2e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004c32:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c34:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004c36:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004c3a:	e841 2300 	strex	r3, r2, [r1]
 8004c3e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004c40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d1e1      	bne.n	8004c0a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	3308      	adds	r3, #8
 8004c4c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c50:	e853 3f00 	ldrex	r3, [r3]
 8004c54:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004c56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c5c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	3308      	adds	r3, #8
 8004c66:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004c6a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004c6c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c6e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004c70:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004c72:	e841 2300 	strex	r3, r2, [r1]
 8004c76:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004c78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d1e3      	bne.n	8004c46 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2220      	movs	r2, #32
 8004c82:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2200      	movs	r2, #0
 8004c88:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c92:	e853 3f00 	ldrex	r3, [r3]
 8004c96:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004c98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c9a:	f023 0310 	bic.w	r3, r3, #16
 8004c9e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	461a      	mov	r2, r3
 8004ca8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004cac:	65bb      	str	r3, [r7, #88]	; 0x58
 8004cae:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cb0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004cb2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004cb4:	e841 2300 	strex	r3, r2, [r1]
 8004cb8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004cba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d1e4      	bne.n	8004c8a <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	f7fc fc0c 	bl	80014e2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004cd6:	b29b      	uxth	r3, r3
 8004cd8:	1ad3      	subs	r3, r2, r3
 8004cda:	b29b      	uxth	r3, r3
 8004cdc:	4619      	mov	r1, r3
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	f000 f8d4 	bl	8004e8c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004ce4:	e0b5      	b.n	8004e52 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004cf2:	b29b      	uxth	r3, r3
 8004cf4:	1ad3      	subs	r3, r2, r3
 8004cf6:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004d00:	b29b      	uxth	r3, r3
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	f000 80a7 	beq.w	8004e56 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8004d08:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	f000 80a2 	beq.w	8004e56 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d1a:	e853 3f00 	ldrex	r3, [r3]
 8004d1e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004d20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d22:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004d26:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	461a      	mov	r2, r3
 8004d30:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004d34:	647b      	str	r3, [r7, #68]	; 0x44
 8004d36:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d38:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004d3a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d3c:	e841 2300 	strex	r3, r2, [r1]
 8004d40:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004d42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d1e4      	bne.n	8004d12 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	3308      	adds	r3, #8
 8004d4e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d52:	e853 3f00 	ldrex	r3, [r3]
 8004d56:	623b      	str	r3, [r7, #32]
   return(result);
 8004d58:	6a3b      	ldr	r3, [r7, #32]
 8004d5a:	f023 0301 	bic.w	r3, r3, #1
 8004d5e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	3308      	adds	r3, #8
 8004d68:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004d6c:	633a      	str	r2, [r7, #48]	; 0x30
 8004d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d70:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004d72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d74:	e841 2300 	strex	r3, r2, [r1]
 8004d78:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d1e3      	bne.n	8004d48 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2220      	movs	r2, #32
 8004d84:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	e853 3f00 	ldrex	r3, [r3]
 8004d9e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	f023 0310 	bic.w	r3, r3, #16
 8004da6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	461a      	mov	r2, r3
 8004db0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004db4:	61fb      	str	r3, [r7, #28]
 8004db6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004db8:	69b9      	ldr	r1, [r7, #24]
 8004dba:	69fa      	ldr	r2, [r7, #28]
 8004dbc:	e841 2300 	strex	r3, r2, [r1]
 8004dc0:	617b      	str	r3, [r7, #20]
   return(result);
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d1e4      	bne.n	8004d92 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004dc8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004dcc:	4619      	mov	r1, r3
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f000 f85c 	bl	8004e8c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004dd4:	e03f      	b.n	8004e56 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004dd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004dda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d00e      	beq.n	8004e00 <HAL_UART_IRQHandler+0x560>
 8004de2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004de6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d008      	beq.n	8004e00 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004df6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004df8:	6878      	ldr	r0, [r7, #4]
 8004dfa:	f000 fd5d 	bl	80058b8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004dfe:	e02d      	b.n	8004e5c <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004e00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d00e      	beq.n	8004e2a <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004e0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d008      	beq.n	8004e2a <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d01c      	beq.n	8004e5a <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e24:	6878      	ldr	r0, [r7, #4]
 8004e26:	4798      	blx	r3
    }
    return;
 8004e28:	e017      	b.n	8004e5a <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004e2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d012      	beq.n	8004e5c <HAL_UART_IRQHandler+0x5bc>
 8004e36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d00c      	beq.n	8004e5c <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f000 fd0e 	bl	8005864 <UART_EndTransmit_IT>
    return;
 8004e48:	e008      	b.n	8004e5c <HAL_UART_IRQHandler+0x5bc>
      return;
 8004e4a:	bf00      	nop
 8004e4c:	e006      	b.n	8004e5c <HAL_UART_IRQHandler+0x5bc>
    return;
 8004e4e:	bf00      	nop
 8004e50:	e004      	b.n	8004e5c <HAL_UART_IRQHandler+0x5bc>
      return;
 8004e52:	bf00      	nop
 8004e54:	e002      	b.n	8004e5c <HAL_UART_IRQHandler+0x5bc>
      return;
 8004e56:	bf00      	nop
 8004e58:	e000      	b.n	8004e5c <HAL_UART_IRQHandler+0x5bc>
    return;
 8004e5a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004e5c:	37e8      	adds	r7, #232	; 0xe8
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}
 8004e62:	bf00      	nop

08004e64 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004e64:	b480      	push	{r7}
 8004e66:	b083      	sub	sp, #12
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004e6c:	bf00      	nop
 8004e6e:	370c      	adds	r7, #12
 8004e70:	46bd      	mov	sp, r7
 8004e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e76:	4770      	bx	lr

08004e78 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b083      	sub	sp, #12
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004e80:	bf00      	nop
 8004e82:	370c      	adds	r7, #12
 8004e84:	46bd      	mov	sp, r7
 8004e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8a:	4770      	bx	lr

08004e8c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b083      	sub	sp, #12
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
 8004e94:	460b      	mov	r3, r1
 8004e96:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004e98:	bf00      	nop
 8004e9a:	370c      	adds	r7, #12
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea2:	4770      	bx	lr

08004ea4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ea4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ea8:	b08a      	sub	sp, #40	; 0x28
 8004eaa:	af00      	add	r7, sp, #0
 8004eac:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004eae:	2300      	movs	r3, #0
 8004eb0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	689a      	ldr	r2, [r3, #8]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	691b      	ldr	r3, [r3, #16]
 8004ebc:	431a      	orrs	r2, r3
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	695b      	ldr	r3, [r3, #20]
 8004ec2:	431a      	orrs	r2, r3
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	69db      	ldr	r3, [r3, #28]
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	681a      	ldr	r2, [r3, #0]
 8004ed2:	4ba4      	ldr	r3, [pc, #656]	; (8005164 <UART_SetConfig+0x2c0>)
 8004ed4:	4013      	ands	r3, r2
 8004ed6:	68fa      	ldr	r2, [r7, #12]
 8004ed8:	6812      	ldr	r2, [r2, #0]
 8004eda:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004edc:	430b      	orrs	r3, r1
 8004ede:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	68da      	ldr	r2, [r3, #12]
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	430a      	orrs	r2, r1
 8004ef4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	699b      	ldr	r3, [r3, #24]
 8004efa:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a99      	ldr	r2, [pc, #612]	; (8005168 <UART_SetConfig+0x2c4>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d004      	beq.n	8004f10 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	6a1b      	ldr	r3, [r3, #32]
 8004f0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f20:	430a      	orrs	r2, r1
 8004f22:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a90      	ldr	r2, [pc, #576]	; (800516c <UART_SetConfig+0x2c8>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d126      	bne.n	8004f7c <UART_SetConfig+0xd8>
 8004f2e:	4b90      	ldr	r3, [pc, #576]	; (8005170 <UART_SetConfig+0x2cc>)
 8004f30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f34:	f003 0303 	and.w	r3, r3, #3
 8004f38:	2b03      	cmp	r3, #3
 8004f3a:	d81b      	bhi.n	8004f74 <UART_SetConfig+0xd0>
 8004f3c:	a201      	add	r2, pc, #4	; (adr r2, 8004f44 <UART_SetConfig+0xa0>)
 8004f3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f42:	bf00      	nop
 8004f44:	08004f55 	.word	0x08004f55
 8004f48:	08004f65 	.word	0x08004f65
 8004f4c:	08004f5d 	.word	0x08004f5d
 8004f50:	08004f6d 	.word	0x08004f6d
 8004f54:	2301      	movs	r3, #1
 8004f56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f5a:	e116      	b.n	800518a <UART_SetConfig+0x2e6>
 8004f5c:	2302      	movs	r3, #2
 8004f5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f62:	e112      	b.n	800518a <UART_SetConfig+0x2e6>
 8004f64:	2304      	movs	r3, #4
 8004f66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f6a:	e10e      	b.n	800518a <UART_SetConfig+0x2e6>
 8004f6c:	2308      	movs	r3, #8
 8004f6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f72:	e10a      	b.n	800518a <UART_SetConfig+0x2e6>
 8004f74:	2310      	movs	r3, #16
 8004f76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f7a:	e106      	b.n	800518a <UART_SetConfig+0x2e6>
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a7c      	ldr	r2, [pc, #496]	; (8005174 <UART_SetConfig+0x2d0>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d138      	bne.n	8004ff8 <UART_SetConfig+0x154>
 8004f86:	4b7a      	ldr	r3, [pc, #488]	; (8005170 <UART_SetConfig+0x2cc>)
 8004f88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f8c:	f003 030c 	and.w	r3, r3, #12
 8004f90:	2b0c      	cmp	r3, #12
 8004f92:	d82d      	bhi.n	8004ff0 <UART_SetConfig+0x14c>
 8004f94:	a201      	add	r2, pc, #4	; (adr r2, 8004f9c <UART_SetConfig+0xf8>)
 8004f96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f9a:	bf00      	nop
 8004f9c:	08004fd1 	.word	0x08004fd1
 8004fa0:	08004ff1 	.word	0x08004ff1
 8004fa4:	08004ff1 	.word	0x08004ff1
 8004fa8:	08004ff1 	.word	0x08004ff1
 8004fac:	08004fe1 	.word	0x08004fe1
 8004fb0:	08004ff1 	.word	0x08004ff1
 8004fb4:	08004ff1 	.word	0x08004ff1
 8004fb8:	08004ff1 	.word	0x08004ff1
 8004fbc:	08004fd9 	.word	0x08004fd9
 8004fc0:	08004ff1 	.word	0x08004ff1
 8004fc4:	08004ff1 	.word	0x08004ff1
 8004fc8:	08004ff1 	.word	0x08004ff1
 8004fcc:	08004fe9 	.word	0x08004fe9
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fd6:	e0d8      	b.n	800518a <UART_SetConfig+0x2e6>
 8004fd8:	2302      	movs	r3, #2
 8004fda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fde:	e0d4      	b.n	800518a <UART_SetConfig+0x2e6>
 8004fe0:	2304      	movs	r3, #4
 8004fe2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fe6:	e0d0      	b.n	800518a <UART_SetConfig+0x2e6>
 8004fe8:	2308      	movs	r3, #8
 8004fea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fee:	e0cc      	b.n	800518a <UART_SetConfig+0x2e6>
 8004ff0:	2310      	movs	r3, #16
 8004ff2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ff6:	e0c8      	b.n	800518a <UART_SetConfig+0x2e6>
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a5e      	ldr	r2, [pc, #376]	; (8005178 <UART_SetConfig+0x2d4>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d125      	bne.n	800504e <UART_SetConfig+0x1aa>
 8005002:	4b5b      	ldr	r3, [pc, #364]	; (8005170 <UART_SetConfig+0x2cc>)
 8005004:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005008:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800500c:	2b30      	cmp	r3, #48	; 0x30
 800500e:	d016      	beq.n	800503e <UART_SetConfig+0x19a>
 8005010:	2b30      	cmp	r3, #48	; 0x30
 8005012:	d818      	bhi.n	8005046 <UART_SetConfig+0x1a2>
 8005014:	2b20      	cmp	r3, #32
 8005016:	d00a      	beq.n	800502e <UART_SetConfig+0x18a>
 8005018:	2b20      	cmp	r3, #32
 800501a:	d814      	bhi.n	8005046 <UART_SetConfig+0x1a2>
 800501c:	2b00      	cmp	r3, #0
 800501e:	d002      	beq.n	8005026 <UART_SetConfig+0x182>
 8005020:	2b10      	cmp	r3, #16
 8005022:	d008      	beq.n	8005036 <UART_SetConfig+0x192>
 8005024:	e00f      	b.n	8005046 <UART_SetConfig+0x1a2>
 8005026:	2300      	movs	r3, #0
 8005028:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800502c:	e0ad      	b.n	800518a <UART_SetConfig+0x2e6>
 800502e:	2302      	movs	r3, #2
 8005030:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005034:	e0a9      	b.n	800518a <UART_SetConfig+0x2e6>
 8005036:	2304      	movs	r3, #4
 8005038:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800503c:	e0a5      	b.n	800518a <UART_SetConfig+0x2e6>
 800503e:	2308      	movs	r3, #8
 8005040:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005044:	e0a1      	b.n	800518a <UART_SetConfig+0x2e6>
 8005046:	2310      	movs	r3, #16
 8005048:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800504c:	e09d      	b.n	800518a <UART_SetConfig+0x2e6>
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a4a      	ldr	r2, [pc, #296]	; (800517c <UART_SetConfig+0x2d8>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d125      	bne.n	80050a4 <UART_SetConfig+0x200>
 8005058:	4b45      	ldr	r3, [pc, #276]	; (8005170 <UART_SetConfig+0x2cc>)
 800505a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800505e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005062:	2bc0      	cmp	r3, #192	; 0xc0
 8005064:	d016      	beq.n	8005094 <UART_SetConfig+0x1f0>
 8005066:	2bc0      	cmp	r3, #192	; 0xc0
 8005068:	d818      	bhi.n	800509c <UART_SetConfig+0x1f8>
 800506a:	2b80      	cmp	r3, #128	; 0x80
 800506c:	d00a      	beq.n	8005084 <UART_SetConfig+0x1e0>
 800506e:	2b80      	cmp	r3, #128	; 0x80
 8005070:	d814      	bhi.n	800509c <UART_SetConfig+0x1f8>
 8005072:	2b00      	cmp	r3, #0
 8005074:	d002      	beq.n	800507c <UART_SetConfig+0x1d8>
 8005076:	2b40      	cmp	r3, #64	; 0x40
 8005078:	d008      	beq.n	800508c <UART_SetConfig+0x1e8>
 800507a:	e00f      	b.n	800509c <UART_SetConfig+0x1f8>
 800507c:	2300      	movs	r3, #0
 800507e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005082:	e082      	b.n	800518a <UART_SetConfig+0x2e6>
 8005084:	2302      	movs	r3, #2
 8005086:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800508a:	e07e      	b.n	800518a <UART_SetConfig+0x2e6>
 800508c:	2304      	movs	r3, #4
 800508e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005092:	e07a      	b.n	800518a <UART_SetConfig+0x2e6>
 8005094:	2308      	movs	r3, #8
 8005096:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800509a:	e076      	b.n	800518a <UART_SetConfig+0x2e6>
 800509c:	2310      	movs	r3, #16
 800509e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050a2:	e072      	b.n	800518a <UART_SetConfig+0x2e6>
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a35      	ldr	r2, [pc, #212]	; (8005180 <UART_SetConfig+0x2dc>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d12a      	bne.n	8005104 <UART_SetConfig+0x260>
 80050ae:	4b30      	ldr	r3, [pc, #192]	; (8005170 <UART_SetConfig+0x2cc>)
 80050b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050bc:	d01a      	beq.n	80050f4 <UART_SetConfig+0x250>
 80050be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050c2:	d81b      	bhi.n	80050fc <UART_SetConfig+0x258>
 80050c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050c8:	d00c      	beq.n	80050e4 <UART_SetConfig+0x240>
 80050ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050ce:	d815      	bhi.n	80050fc <UART_SetConfig+0x258>
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d003      	beq.n	80050dc <UART_SetConfig+0x238>
 80050d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050d8:	d008      	beq.n	80050ec <UART_SetConfig+0x248>
 80050da:	e00f      	b.n	80050fc <UART_SetConfig+0x258>
 80050dc:	2300      	movs	r3, #0
 80050de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050e2:	e052      	b.n	800518a <UART_SetConfig+0x2e6>
 80050e4:	2302      	movs	r3, #2
 80050e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050ea:	e04e      	b.n	800518a <UART_SetConfig+0x2e6>
 80050ec:	2304      	movs	r3, #4
 80050ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050f2:	e04a      	b.n	800518a <UART_SetConfig+0x2e6>
 80050f4:	2308      	movs	r3, #8
 80050f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050fa:	e046      	b.n	800518a <UART_SetConfig+0x2e6>
 80050fc:	2310      	movs	r3, #16
 80050fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005102:	e042      	b.n	800518a <UART_SetConfig+0x2e6>
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a17      	ldr	r2, [pc, #92]	; (8005168 <UART_SetConfig+0x2c4>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d13a      	bne.n	8005184 <UART_SetConfig+0x2e0>
 800510e:	4b18      	ldr	r3, [pc, #96]	; (8005170 <UART_SetConfig+0x2cc>)
 8005110:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005114:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005118:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800511c:	d01a      	beq.n	8005154 <UART_SetConfig+0x2b0>
 800511e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005122:	d81b      	bhi.n	800515c <UART_SetConfig+0x2b8>
 8005124:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005128:	d00c      	beq.n	8005144 <UART_SetConfig+0x2a0>
 800512a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800512e:	d815      	bhi.n	800515c <UART_SetConfig+0x2b8>
 8005130:	2b00      	cmp	r3, #0
 8005132:	d003      	beq.n	800513c <UART_SetConfig+0x298>
 8005134:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005138:	d008      	beq.n	800514c <UART_SetConfig+0x2a8>
 800513a:	e00f      	b.n	800515c <UART_SetConfig+0x2b8>
 800513c:	2300      	movs	r3, #0
 800513e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005142:	e022      	b.n	800518a <UART_SetConfig+0x2e6>
 8005144:	2302      	movs	r3, #2
 8005146:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800514a:	e01e      	b.n	800518a <UART_SetConfig+0x2e6>
 800514c:	2304      	movs	r3, #4
 800514e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005152:	e01a      	b.n	800518a <UART_SetConfig+0x2e6>
 8005154:	2308      	movs	r3, #8
 8005156:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800515a:	e016      	b.n	800518a <UART_SetConfig+0x2e6>
 800515c:	2310      	movs	r3, #16
 800515e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005162:	e012      	b.n	800518a <UART_SetConfig+0x2e6>
 8005164:	efff69f3 	.word	0xefff69f3
 8005168:	40008000 	.word	0x40008000
 800516c:	40013800 	.word	0x40013800
 8005170:	40021000 	.word	0x40021000
 8005174:	40004400 	.word	0x40004400
 8005178:	40004800 	.word	0x40004800
 800517c:	40004c00 	.word	0x40004c00
 8005180:	40005000 	.word	0x40005000
 8005184:	2310      	movs	r3, #16
 8005186:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a9f      	ldr	r2, [pc, #636]	; (800540c <UART_SetConfig+0x568>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d17a      	bne.n	800528a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005194:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005198:	2b08      	cmp	r3, #8
 800519a:	d824      	bhi.n	80051e6 <UART_SetConfig+0x342>
 800519c:	a201      	add	r2, pc, #4	; (adr r2, 80051a4 <UART_SetConfig+0x300>)
 800519e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051a2:	bf00      	nop
 80051a4:	080051c9 	.word	0x080051c9
 80051a8:	080051e7 	.word	0x080051e7
 80051ac:	080051d1 	.word	0x080051d1
 80051b0:	080051e7 	.word	0x080051e7
 80051b4:	080051d7 	.word	0x080051d7
 80051b8:	080051e7 	.word	0x080051e7
 80051bc:	080051e7 	.word	0x080051e7
 80051c0:	080051e7 	.word	0x080051e7
 80051c4:	080051df 	.word	0x080051df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051c8:	f7fd f9ee 	bl	80025a8 <HAL_RCC_GetPCLK1Freq>
 80051cc:	61f8      	str	r0, [r7, #28]
        break;
 80051ce:	e010      	b.n	80051f2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051d0:	4b8f      	ldr	r3, [pc, #572]	; (8005410 <UART_SetConfig+0x56c>)
 80051d2:	61fb      	str	r3, [r7, #28]
        break;
 80051d4:	e00d      	b.n	80051f2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051d6:	f7fd f94f 	bl	8002478 <HAL_RCC_GetSysClockFreq>
 80051da:	61f8      	str	r0, [r7, #28]
        break;
 80051dc:	e009      	b.n	80051f2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051e2:	61fb      	str	r3, [r7, #28]
        break;
 80051e4:	e005      	b.n	80051f2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80051e6:	2300      	movs	r3, #0
 80051e8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80051f0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80051f2:	69fb      	ldr	r3, [r7, #28]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	f000 80fb 	beq.w	80053f0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	685a      	ldr	r2, [r3, #4]
 80051fe:	4613      	mov	r3, r2
 8005200:	005b      	lsls	r3, r3, #1
 8005202:	4413      	add	r3, r2
 8005204:	69fa      	ldr	r2, [r7, #28]
 8005206:	429a      	cmp	r2, r3
 8005208:	d305      	bcc.n	8005216 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005210:	69fa      	ldr	r2, [r7, #28]
 8005212:	429a      	cmp	r2, r3
 8005214:	d903      	bls.n	800521e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005216:	2301      	movs	r3, #1
 8005218:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800521c:	e0e8      	b.n	80053f0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800521e:	69fb      	ldr	r3, [r7, #28]
 8005220:	2200      	movs	r2, #0
 8005222:	461c      	mov	r4, r3
 8005224:	4615      	mov	r5, r2
 8005226:	f04f 0200 	mov.w	r2, #0
 800522a:	f04f 0300 	mov.w	r3, #0
 800522e:	022b      	lsls	r3, r5, #8
 8005230:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005234:	0222      	lsls	r2, r4, #8
 8005236:	68f9      	ldr	r1, [r7, #12]
 8005238:	6849      	ldr	r1, [r1, #4]
 800523a:	0849      	lsrs	r1, r1, #1
 800523c:	2000      	movs	r0, #0
 800523e:	4688      	mov	r8, r1
 8005240:	4681      	mov	r9, r0
 8005242:	eb12 0a08 	adds.w	sl, r2, r8
 8005246:	eb43 0b09 	adc.w	fp, r3, r9
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	2200      	movs	r2, #0
 8005250:	603b      	str	r3, [r7, #0]
 8005252:	607a      	str	r2, [r7, #4]
 8005254:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005258:	4650      	mov	r0, sl
 800525a:	4659      	mov	r1, fp
 800525c:	f7fa ffb4 	bl	80001c8 <__aeabi_uldivmod>
 8005260:	4602      	mov	r2, r0
 8005262:	460b      	mov	r3, r1
 8005264:	4613      	mov	r3, r2
 8005266:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005268:	69bb      	ldr	r3, [r7, #24]
 800526a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800526e:	d308      	bcc.n	8005282 <UART_SetConfig+0x3de>
 8005270:	69bb      	ldr	r3, [r7, #24]
 8005272:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005276:	d204      	bcs.n	8005282 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	69ba      	ldr	r2, [r7, #24]
 800527e:	60da      	str	r2, [r3, #12]
 8005280:	e0b6      	b.n	80053f0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005282:	2301      	movs	r3, #1
 8005284:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005288:	e0b2      	b.n	80053f0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	69db      	ldr	r3, [r3, #28]
 800528e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005292:	d15e      	bne.n	8005352 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005294:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005298:	2b08      	cmp	r3, #8
 800529a:	d828      	bhi.n	80052ee <UART_SetConfig+0x44a>
 800529c:	a201      	add	r2, pc, #4	; (adr r2, 80052a4 <UART_SetConfig+0x400>)
 800529e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052a2:	bf00      	nop
 80052a4:	080052c9 	.word	0x080052c9
 80052a8:	080052d1 	.word	0x080052d1
 80052ac:	080052d9 	.word	0x080052d9
 80052b0:	080052ef 	.word	0x080052ef
 80052b4:	080052df 	.word	0x080052df
 80052b8:	080052ef 	.word	0x080052ef
 80052bc:	080052ef 	.word	0x080052ef
 80052c0:	080052ef 	.word	0x080052ef
 80052c4:	080052e7 	.word	0x080052e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052c8:	f7fd f96e 	bl	80025a8 <HAL_RCC_GetPCLK1Freq>
 80052cc:	61f8      	str	r0, [r7, #28]
        break;
 80052ce:	e014      	b.n	80052fa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052d0:	f7fd f980 	bl	80025d4 <HAL_RCC_GetPCLK2Freq>
 80052d4:	61f8      	str	r0, [r7, #28]
        break;
 80052d6:	e010      	b.n	80052fa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052d8:	4b4d      	ldr	r3, [pc, #308]	; (8005410 <UART_SetConfig+0x56c>)
 80052da:	61fb      	str	r3, [r7, #28]
        break;
 80052dc:	e00d      	b.n	80052fa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052de:	f7fd f8cb 	bl	8002478 <HAL_RCC_GetSysClockFreq>
 80052e2:	61f8      	str	r0, [r7, #28]
        break;
 80052e4:	e009      	b.n	80052fa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052ea:	61fb      	str	r3, [r7, #28]
        break;
 80052ec:	e005      	b.n	80052fa <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80052ee:	2300      	movs	r3, #0
 80052f0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80052f8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80052fa:	69fb      	ldr	r3, [r7, #28]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d077      	beq.n	80053f0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005300:	69fb      	ldr	r3, [r7, #28]
 8005302:	005a      	lsls	r2, r3, #1
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	085b      	lsrs	r3, r3, #1
 800530a:	441a      	add	r2, r3
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	fbb2 f3f3 	udiv	r3, r2, r3
 8005314:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005316:	69bb      	ldr	r3, [r7, #24]
 8005318:	2b0f      	cmp	r3, #15
 800531a:	d916      	bls.n	800534a <UART_SetConfig+0x4a6>
 800531c:	69bb      	ldr	r3, [r7, #24]
 800531e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005322:	d212      	bcs.n	800534a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005324:	69bb      	ldr	r3, [r7, #24]
 8005326:	b29b      	uxth	r3, r3
 8005328:	f023 030f 	bic.w	r3, r3, #15
 800532c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800532e:	69bb      	ldr	r3, [r7, #24]
 8005330:	085b      	lsrs	r3, r3, #1
 8005332:	b29b      	uxth	r3, r3
 8005334:	f003 0307 	and.w	r3, r3, #7
 8005338:	b29a      	uxth	r2, r3
 800533a:	8afb      	ldrh	r3, [r7, #22]
 800533c:	4313      	orrs	r3, r2
 800533e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	8afa      	ldrh	r2, [r7, #22]
 8005346:	60da      	str	r2, [r3, #12]
 8005348:	e052      	b.n	80053f0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800534a:	2301      	movs	r3, #1
 800534c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005350:	e04e      	b.n	80053f0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005352:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005356:	2b08      	cmp	r3, #8
 8005358:	d827      	bhi.n	80053aa <UART_SetConfig+0x506>
 800535a:	a201      	add	r2, pc, #4	; (adr r2, 8005360 <UART_SetConfig+0x4bc>)
 800535c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005360:	08005385 	.word	0x08005385
 8005364:	0800538d 	.word	0x0800538d
 8005368:	08005395 	.word	0x08005395
 800536c:	080053ab 	.word	0x080053ab
 8005370:	0800539b 	.word	0x0800539b
 8005374:	080053ab 	.word	0x080053ab
 8005378:	080053ab 	.word	0x080053ab
 800537c:	080053ab 	.word	0x080053ab
 8005380:	080053a3 	.word	0x080053a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005384:	f7fd f910 	bl	80025a8 <HAL_RCC_GetPCLK1Freq>
 8005388:	61f8      	str	r0, [r7, #28]
        break;
 800538a:	e014      	b.n	80053b6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800538c:	f7fd f922 	bl	80025d4 <HAL_RCC_GetPCLK2Freq>
 8005390:	61f8      	str	r0, [r7, #28]
        break;
 8005392:	e010      	b.n	80053b6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005394:	4b1e      	ldr	r3, [pc, #120]	; (8005410 <UART_SetConfig+0x56c>)
 8005396:	61fb      	str	r3, [r7, #28]
        break;
 8005398:	e00d      	b.n	80053b6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800539a:	f7fd f86d 	bl	8002478 <HAL_RCC_GetSysClockFreq>
 800539e:	61f8      	str	r0, [r7, #28]
        break;
 80053a0:	e009      	b.n	80053b6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053a6:	61fb      	str	r3, [r7, #28]
        break;
 80053a8:	e005      	b.n	80053b6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80053aa:	2300      	movs	r3, #0
 80053ac:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80053ae:	2301      	movs	r3, #1
 80053b0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80053b4:	bf00      	nop
    }

    if (pclk != 0U)
 80053b6:	69fb      	ldr	r3, [r7, #28]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d019      	beq.n	80053f0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	085a      	lsrs	r2, r3, #1
 80053c2:	69fb      	ldr	r3, [r7, #28]
 80053c4:	441a      	add	r2, r3
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80053ce:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80053d0:	69bb      	ldr	r3, [r7, #24]
 80053d2:	2b0f      	cmp	r3, #15
 80053d4:	d909      	bls.n	80053ea <UART_SetConfig+0x546>
 80053d6:	69bb      	ldr	r3, [r7, #24]
 80053d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053dc:	d205      	bcs.n	80053ea <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80053de:	69bb      	ldr	r3, [r7, #24]
 80053e0:	b29a      	uxth	r2, r3
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	60da      	str	r2, [r3, #12]
 80053e8:	e002      	b.n	80053f0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80053ea:	2301      	movs	r3, #1
 80053ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	2200      	movs	r2, #0
 80053f4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	2200      	movs	r2, #0
 80053fa:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80053fc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005400:	4618      	mov	r0, r3
 8005402:	3728      	adds	r7, #40	; 0x28
 8005404:	46bd      	mov	sp, r7
 8005406:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800540a:	bf00      	nop
 800540c:	40008000 	.word	0x40008000
 8005410:	00f42400 	.word	0x00f42400

08005414 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005414:	b480      	push	{r7}
 8005416:	b083      	sub	sp, #12
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005420:	f003 0301 	and.w	r3, r3, #1
 8005424:	2b00      	cmp	r3, #0
 8005426:	d00a      	beq.n	800543e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	430a      	orrs	r2, r1
 800543c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005442:	f003 0302 	and.w	r3, r3, #2
 8005446:	2b00      	cmp	r3, #0
 8005448:	d00a      	beq.n	8005460 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	430a      	orrs	r2, r1
 800545e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005464:	f003 0304 	and.w	r3, r3, #4
 8005468:	2b00      	cmp	r3, #0
 800546a:	d00a      	beq.n	8005482 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	430a      	orrs	r2, r1
 8005480:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005486:	f003 0308 	and.w	r3, r3, #8
 800548a:	2b00      	cmp	r3, #0
 800548c:	d00a      	beq.n	80054a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	430a      	orrs	r2, r1
 80054a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a8:	f003 0310 	and.w	r3, r3, #16
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d00a      	beq.n	80054c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	689b      	ldr	r3, [r3, #8]
 80054b6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	430a      	orrs	r2, r1
 80054c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ca:	f003 0320 	and.w	r3, r3, #32
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d00a      	beq.n	80054e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	430a      	orrs	r2, r1
 80054e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d01a      	beq.n	800552a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	430a      	orrs	r2, r1
 8005508:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800550e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005512:	d10a      	bne.n	800552a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	430a      	orrs	r2, r1
 8005528:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800552e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005532:	2b00      	cmp	r3, #0
 8005534:	d00a      	beq.n	800554c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	430a      	orrs	r2, r1
 800554a:	605a      	str	r2, [r3, #4]
  }
}
 800554c:	bf00      	nop
 800554e:	370c      	adds	r7, #12
 8005550:	46bd      	mov	sp, r7
 8005552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005556:	4770      	bx	lr

08005558 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b086      	sub	sp, #24
 800555c:	af02      	add	r7, sp, #8
 800555e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2200      	movs	r2, #0
 8005564:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005568:	f7fb fe9e 	bl	80012a8 <HAL_GetTick>
 800556c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f003 0308 	and.w	r3, r3, #8
 8005578:	2b08      	cmp	r3, #8
 800557a:	d10e      	bne.n	800559a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800557c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005580:	9300      	str	r3, [sp, #0]
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	2200      	movs	r2, #0
 8005586:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f000 f82d 	bl	80055ea <UART_WaitOnFlagUntilTimeout>
 8005590:	4603      	mov	r3, r0
 8005592:	2b00      	cmp	r3, #0
 8005594:	d001      	beq.n	800559a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005596:	2303      	movs	r3, #3
 8005598:	e023      	b.n	80055e2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f003 0304 	and.w	r3, r3, #4
 80055a4:	2b04      	cmp	r3, #4
 80055a6:	d10e      	bne.n	80055c6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80055a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80055ac:	9300      	str	r3, [sp, #0]
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2200      	movs	r2, #0
 80055b2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f000 f817 	bl	80055ea <UART_WaitOnFlagUntilTimeout>
 80055bc:	4603      	mov	r3, r0
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d001      	beq.n	80055c6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055c2:	2303      	movs	r3, #3
 80055c4:	e00d      	b.n	80055e2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2220      	movs	r2, #32
 80055ca:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2220      	movs	r2, #32
 80055d0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2200      	movs	r2, #0
 80055d6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2200      	movs	r2, #0
 80055dc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80055e0:	2300      	movs	r3, #0
}
 80055e2:	4618      	mov	r0, r3
 80055e4:	3710      	adds	r7, #16
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd80      	pop	{r7, pc}

080055ea <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80055ea:	b580      	push	{r7, lr}
 80055ec:	b09c      	sub	sp, #112	; 0x70
 80055ee:	af00      	add	r7, sp, #0
 80055f0:	60f8      	str	r0, [r7, #12]
 80055f2:	60b9      	str	r1, [r7, #8]
 80055f4:	603b      	str	r3, [r7, #0]
 80055f6:	4613      	mov	r3, r2
 80055f8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055fa:	e0a5      	b.n	8005748 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005602:	f000 80a1 	beq.w	8005748 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005606:	f7fb fe4f 	bl	80012a8 <HAL_GetTick>
 800560a:	4602      	mov	r2, r0
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	1ad3      	subs	r3, r2, r3
 8005610:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005612:	429a      	cmp	r2, r3
 8005614:	d302      	bcc.n	800561c <UART_WaitOnFlagUntilTimeout+0x32>
 8005616:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005618:	2b00      	cmp	r3, #0
 800561a:	d13e      	bne.n	800569a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005622:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005624:	e853 3f00 	ldrex	r3, [r3]
 8005628:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800562a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800562c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005630:	667b      	str	r3, [r7, #100]	; 0x64
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	461a      	mov	r2, r3
 8005638:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800563a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800563c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800563e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005640:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005642:	e841 2300 	strex	r3, r2, [r1]
 8005646:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005648:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800564a:	2b00      	cmp	r3, #0
 800564c:	d1e6      	bne.n	800561c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	3308      	adds	r3, #8
 8005654:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005656:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005658:	e853 3f00 	ldrex	r3, [r3]
 800565c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800565e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005660:	f023 0301 	bic.w	r3, r3, #1
 8005664:	663b      	str	r3, [r7, #96]	; 0x60
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	3308      	adds	r3, #8
 800566c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800566e:	64ba      	str	r2, [r7, #72]	; 0x48
 8005670:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005672:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005674:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005676:	e841 2300 	strex	r3, r2, [r1]
 800567a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800567c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800567e:	2b00      	cmp	r3, #0
 8005680:	d1e5      	bne.n	800564e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	2220      	movs	r2, #32
 8005686:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	2220      	movs	r2, #32
 800568c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2200      	movs	r2, #0
 8005692:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005696:	2303      	movs	r3, #3
 8005698:	e067      	b.n	800576a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f003 0304 	and.w	r3, r3, #4
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d04f      	beq.n	8005748 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	69db      	ldr	r3, [r3, #28]
 80056ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056b6:	d147      	bne.n	8005748 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80056c0:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ca:	e853 3f00 	ldrex	r3, [r3]
 80056ce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80056d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80056d6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	461a      	mov	r2, r3
 80056de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056e0:	637b      	str	r3, [r7, #52]	; 0x34
 80056e2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056e4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80056e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80056e8:	e841 2300 	strex	r3, r2, [r1]
 80056ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80056ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d1e6      	bne.n	80056c2 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	3308      	adds	r3, #8
 80056fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	e853 3f00 	ldrex	r3, [r3]
 8005702:	613b      	str	r3, [r7, #16]
   return(result);
 8005704:	693b      	ldr	r3, [r7, #16]
 8005706:	f023 0301 	bic.w	r3, r3, #1
 800570a:	66bb      	str	r3, [r7, #104]	; 0x68
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	3308      	adds	r3, #8
 8005712:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005714:	623a      	str	r2, [r7, #32]
 8005716:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005718:	69f9      	ldr	r1, [r7, #28]
 800571a:	6a3a      	ldr	r2, [r7, #32]
 800571c:	e841 2300 	strex	r3, r2, [r1]
 8005720:	61bb      	str	r3, [r7, #24]
   return(result);
 8005722:	69bb      	ldr	r3, [r7, #24]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d1e5      	bne.n	80056f4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	2220      	movs	r2, #32
 800572c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	2220      	movs	r2, #32
 8005732:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	2220      	movs	r2, #32
 8005738:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2200      	movs	r2, #0
 8005740:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005744:	2303      	movs	r3, #3
 8005746:	e010      	b.n	800576a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	69da      	ldr	r2, [r3, #28]
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	4013      	ands	r3, r2
 8005752:	68ba      	ldr	r2, [r7, #8]
 8005754:	429a      	cmp	r2, r3
 8005756:	bf0c      	ite	eq
 8005758:	2301      	moveq	r3, #1
 800575a:	2300      	movne	r3, #0
 800575c:	b2db      	uxtb	r3, r3
 800575e:	461a      	mov	r2, r3
 8005760:	79fb      	ldrb	r3, [r7, #7]
 8005762:	429a      	cmp	r2, r3
 8005764:	f43f af4a 	beq.w	80055fc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005768:	2300      	movs	r3, #0
}
 800576a:	4618      	mov	r0, r3
 800576c:	3770      	adds	r7, #112	; 0x70
 800576e:	46bd      	mov	sp, r7
 8005770:	bd80      	pop	{r7, pc}

08005772 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005772:	b480      	push	{r7}
 8005774:	b095      	sub	sp, #84	; 0x54
 8005776:	af00      	add	r7, sp, #0
 8005778:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005780:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005782:	e853 3f00 	ldrex	r3, [r3]
 8005786:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800578a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800578e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	461a      	mov	r2, r3
 8005796:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005798:	643b      	str	r3, [r7, #64]	; 0x40
 800579a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800579c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800579e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80057a0:	e841 2300 	strex	r3, r2, [r1]
 80057a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80057a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d1e6      	bne.n	800577a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	3308      	adds	r3, #8
 80057b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057b4:	6a3b      	ldr	r3, [r7, #32]
 80057b6:	e853 3f00 	ldrex	r3, [r3]
 80057ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80057bc:	69fb      	ldr	r3, [r7, #28]
 80057be:	f023 0301 	bic.w	r3, r3, #1
 80057c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	3308      	adds	r3, #8
 80057ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80057cc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80057ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80057d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80057d4:	e841 2300 	strex	r3, r2, [r1]
 80057d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80057da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d1e5      	bne.n	80057ac <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057e4:	2b01      	cmp	r3, #1
 80057e6:	d118      	bne.n	800581a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	e853 3f00 	ldrex	r3, [r3]
 80057f4:	60bb      	str	r3, [r7, #8]
   return(result);
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	f023 0310 	bic.w	r3, r3, #16
 80057fc:	647b      	str	r3, [r7, #68]	; 0x44
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	461a      	mov	r2, r3
 8005804:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005806:	61bb      	str	r3, [r7, #24]
 8005808:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800580a:	6979      	ldr	r1, [r7, #20]
 800580c:	69ba      	ldr	r2, [r7, #24]
 800580e:	e841 2300 	strex	r3, r2, [r1]
 8005812:	613b      	str	r3, [r7, #16]
   return(result);
 8005814:	693b      	ldr	r3, [r7, #16]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d1e6      	bne.n	80057e8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2220      	movs	r2, #32
 800581e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2200      	movs	r2, #0
 8005824:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2200      	movs	r2, #0
 800582a:	665a      	str	r2, [r3, #100]	; 0x64
}
 800582c:	bf00      	nop
 800582e:	3754      	adds	r7, #84	; 0x54
 8005830:	46bd      	mov	sp, r7
 8005832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005836:	4770      	bx	lr

08005838 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b084      	sub	sp, #16
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005844:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	2200      	movs	r2, #0
 800584a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2200      	movs	r2, #0
 8005852:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005856:	68f8      	ldr	r0, [r7, #12]
 8005858:	f7ff fb0e 	bl	8004e78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800585c:	bf00      	nop
 800585e:	3710      	adds	r7, #16
 8005860:	46bd      	mov	sp, r7
 8005862:	bd80      	pop	{r7, pc}

08005864 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b088      	sub	sp, #32
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	e853 3f00 	ldrex	r3, [r3]
 8005878:	60bb      	str	r3, [r7, #8]
   return(result);
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005880:	61fb      	str	r3, [r7, #28]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	461a      	mov	r2, r3
 8005888:	69fb      	ldr	r3, [r7, #28]
 800588a:	61bb      	str	r3, [r7, #24]
 800588c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800588e:	6979      	ldr	r1, [r7, #20]
 8005890:	69ba      	ldr	r2, [r7, #24]
 8005892:	e841 2300 	strex	r3, r2, [r1]
 8005896:	613b      	str	r3, [r7, #16]
   return(result);
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d1e6      	bne.n	800586c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2220      	movs	r2, #32
 80058a2:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2200      	movs	r2, #0
 80058a8:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f7ff fada 	bl	8004e64 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80058b0:	bf00      	nop
 80058b2:	3720      	adds	r7, #32
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bd80      	pop	{r7, pc}

080058b8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80058b8:	b480      	push	{r7}
 80058ba:	b083      	sub	sp, #12
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80058c0:	bf00      	nop
 80058c2:	370c      	adds	r7, #12
 80058c4:	46bd      	mov	sp, r7
 80058c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ca:	4770      	bx	lr

080058cc <__errno>:
 80058cc:	4b01      	ldr	r3, [pc, #4]	; (80058d4 <__errno+0x8>)
 80058ce:	6818      	ldr	r0, [r3, #0]
 80058d0:	4770      	bx	lr
 80058d2:	bf00      	nop
 80058d4:	20000044 	.word	0x20000044

080058d8 <__libc_init_array>:
 80058d8:	b570      	push	{r4, r5, r6, lr}
 80058da:	4d0d      	ldr	r5, [pc, #52]	; (8005910 <__libc_init_array+0x38>)
 80058dc:	4c0d      	ldr	r4, [pc, #52]	; (8005914 <__libc_init_array+0x3c>)
 80058de:	1b64      	subs	r4, r4, r5
 80058e0:	10a4      	asrs	r4, r4, #2
 80058e2:	2600      	movs	r6, #0
 80058e4:	42a6      	cmp	r6, r4
 80058e6:	d109      	bne.n	80058fc <__libc_init_array+0x24>
 80058e8:	4d0b      	ldr	r5, [pc, #44]	; (8005918 <__libc_init_array+0x40>)
 80058ea:	4c0c      	ldr	r4, [pc, #48]	; (800591c <__libc_init_array+0x44>)
 80058ec:	f000 fd1e 	bl	800632c <_init>
 80058f0:	1b64      	subs	r4, r4, r5
 80058f2:	10a4      	asrs	r4, r4, #2
 80058f4:	2600      	movs	r6, #0
 80058f6:	42a6      	cmp	r6, r4
 80058f8:	d105      	bne.n	8005906 <__libc_init_array+0x2e>
 80058fa:	bd70      	pop	{r4, r5, r6, pc}
 80058fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005900:	4798      	blx	r3
 8005902:	3601      	adds	r6, #1
 8005904:	e7ee      	b.n	80058e4 <__libc_init_array+0xc>
 8005906:	f855 3b04 	ldr.w	r3, [r5], #4
 800590a:	4798      	blx	r3
 800590c:	3601      	adds	r6, #1
 800590e:	e7f2      	b.n	80058f6 <__libc_init_array+0x1e>
 8005910:	08006410 	.word	0x08006410
 8005914:	08006410 	.word	0x08006410
 8005918:	08006410 	.word	0x08006410
 800591c:	08006414 	.word	0x08006414

08005920 <memset>:
 8005920:	4402      	add	r2, r0
 8005922:	4603      	mov	r3, r0
 8005924:	4293      	cmp	r3, r2
 8005926:	d100      	bne.n	800592a <memset+0xa>
 8005928:	4770      	bx	lr
 800592a:	f803 1b01 	strb.w	r1, [r3], #1
 800592e:	e7f9      	b.n	8005924 <memset+0x4>

08005930 <_puts_r>:
 8005930:	b570      	push	{r4, r5, r6, lr}
 8005932:	460e      	mov	r6, r1
 8005934:	4605      	mov	r5, r0
 8005936:	b118      	cbz	r0, 8005940 <_puts_r+0x10>
 8005938:	6983      	ldr	r3, [r0, #24]
 800593a:	b90b      	cbnz	r3, 8005940 <_puts_r+0x10>
 800593c:	f000 fa48 	bl	8005dd0 <__sinit>
 8005940:	69ab      	ldr	r3, [r5, #24]
 8005942:	68ac      	ldr	r4, [r5, #8]
 8005944:	b913      	cbnz	r3, 800594c <_puts_r+0x1c>
 8005946:	4628      	mov	r0, r5
 8005948:	f000 fa42 	bl	8005dd0 <__sinit>
 800594c:	4b2c      	ldr	r3, [pc, #176]	; (8005a00 <_puts_r+0xd0>)
 800594e:	429c      	cmp	r4, r3
 8005950:	d120      	bne.n	8005994 <_puts_r+0x64>
 8005952:	686c      	ldr	r4, [r5, #4]
 8005954:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005956:	07db      	lsls	r3, r3, #31
 8005958:	d405      	bmi.n	8005966 <_puts_r+0x36>
 800595a:	89a3      	ldrh	r3, [r4, #12]
 800595c:	0598      	lsls	r0, r3, #22
 800595e:	d402      	bmi.n	8005966 <_puts_r+0x36>
 8005960:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005962:	f000 fad3 	bl	8005f0c <__retarget_lock_acquire_recursive>
 8005966:	89a3      	ldrh	r3, [r4, #12]
 8005968:	0719      	lsls	r1, r3, #28
 800596a:	d51d      	bpl.n	80059a8 <_puts_r+0x78>
 800596c:	6923      	ldr	r3, [r4, #16]
 800596e:	b1db      	cbz	r3, 80059a8 <_puts_r+0x78>
 8005970:	3e01      	subs	r6, #1
 8005972:	68a3      	ldr	r3, [r4, #8]
 8005974:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005978:	3b01      	subs	r3, #1
 800597a:	60a3      	str	r3, [r4, #8]
 800597c:	bb39      	cbnz	r1, 80059ce <_puts_r+0x9e>
 800597e:	2b00      	cmp	r3, #0
 8005980:	da38      	bge.n	80059f4 <_puts_r+0xc4>
 8005982:	4622      	mov	r2, r4
 8005984:	210a      	movs	r1, #10
 8005986:	4628      	mov	r0, r5
 8005988:	f000 f848 	bl	8005a1c <__swbuf_r>
 800598c:	3001      	adds	r0, #1
 800598e:	d011      	beq.n	80059b4 <_puts_r+0x84>
 8005990:	250a      	movs	r5, #10
 8005992:	e011      	b.n	80059b8 <_puts_r+0x88>
 8005994:	4b1b      	ldr	r3, [pc, #108]	; (8005a04 <_puts_r+0xd4>)
 8005996:	429c      	cmp	r4, r3
 8005998:	d101      	bne.n	800599e <_puts_r+0x6e>
 800599a:	68ac      	ldr	r4, [r5, #8]
 800599c:	e7da      	b.n	8005954 <_puts_r+0x24>
 800599e:	4b1a      	ldr	r3, [pc, #104]	; (8005a08 <_puts_r+0xd8>)
 80059a0:	429c      	cmp	r4, r3
 80059a2:	bf08      	it	eq
 80059a4:	68ec      	ldreq	r4, [r5, #12]
 80059a6:	e7d5      	b.n	8005954 <_puts_r+0x24>
 80059a8:	4621      	mov	r1, r4
 80059aa:	4628      	mov	r0, r5
 80059ac:	f000 f888 	bl	8005ac0 <__swsetup_r>
 80059b0:	2800      	cmp	r0, #0
 80059b2:	d0dd      	beq.n	8005970 <_puts_r+0x40>
 80059b4:	f04f 35ff 	mov.w	r5, #4294967295
 80059b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80059ba:	07da      	lsls	r2, r3, #31
 80059bc:	d405      	bmi.n	80059ca <_puts_r+0x9a>
 80059be:	89a3      	ldrh	r3, [r4, #12]
 80059c0:	059b      	lsls	r3, r3, #22
 80059c2:	d402      	bmi.n	80059ca <_puts_r+0x9a>
 80059c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80059c6:	f000 faa2 	bl	8005f0e <__retarget_lock_release_recursive>
 80059ca:	4628      	mov	r0, r5
 80059cc:	bd70      	pop	{r4, r5, r6, pc}
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	da04      	bge.n	80059dc <_puts_r+0xac>
 80059d2:	69a2      	ldr	r2, [r4, #24]
 80059d4:	429a      	cmp	r2, r3
 80059d6:	dc06      	bgt.n	80059e6 <_puts_r+0xb6>
 80059d8:	290a      	cmp	r1, #10
 80059da:	d004      	beq.n	80059e6 <_puts_r+0xb6>
 80059dc:	6823      	ldr	r3, [r4, #0]
 80059de:	1c5a      	adds	r2, r3, #1
 80059e0:	6022      	str	r2, [r4, #0]
 80059e2:	7019      	strb	r1, [r3, #0]
 80059e4:	e7c5      	b.n	8005972 <_puts_r+0x42>
 80059e6:	4622      	mov	r2, r4
 80059e8:	4628      	mov	r0, r5
 80059ea:	f000 f817 	bl	8005a1c <__swbuf_r>
 80059ee:	3001      	adds	r0, #1
 80059f0:	d1bf      	bne.n	8005972 <_puts_r+0x42>
 80059f2:	e7df      	b.n	80059b4 <_puts_r+0x84>
 80059f4:	6823      	ldr	r3, [r4, #0]
 80059f6:	250a      	movs	r5, #10
 80059f8:	1c5a      	adds	r2, r3, #1
 80059fa:	6022      	str	r2, [r4, #0]
 80059fc:	701d      	strb	r5, [r3, #0]
 80059fe:	e7db      	b.n	80059b8 <_puts_r+0x88>
 8005a00:	080063c8 	.word	0x080063c8
 8005a04:	080063e8 	.word	0x080063e8
 8005a08:	080063a8 	.word	0x080063a8

08005a0c <puts>:
 8005a0c:	4b02      	ldr	r3, [pc, #8]	; (8005a18 <puts+0xc>)
 8005a0e:	4601      	mov	r1, r0
 8005a10:	6818      	ldr	r0, [r3, #0]
 8005a12:	f7ff bf8d 	b.w	8005930 <_puts_r>
 8005a16:	bf00      	nop
 8005a18:	20000044 	.word	0x20000044

08005a1c <__swbuf_r>:
 8005a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a1e:	460e      	mov	r6, r1
 8005a20:	4614      	mov	r4, r2
 8005a22:	4605      	mov	r5, r0
 8005a24:	b118      	cbz	r0, 8005a2e <__swbuf_r+0x12>
 8005a26:	6983      	ldr	r3, [r0, #24]
 8005a28:	b90b      	cbnz	r3, 8005a2e <__swbuf_r+0x12>
 8005a2a:	f000 f9d1 	bl	8005dd0 <__sinit>
 8005a2e:	4b21      	ldr	r3, [pc, #132]	; (8005ab4 <__swbuf_r+0x98>)
 8005a30:	429c      	cmp	r4, r3
 8005a32:	d12b      	bne.n	8005a8c <__swbuf_r+0x70>
 8005a34:	686c      	ldr	r4, [r5, #4]
 8005a36:	69a3      	ldr	r3, [r4, #24]
 8005a38:	60a3      	str	r3, [r4, #8]
 8005a3a:	89a3      	ldrh	r3, [r4, #12]
 8005a3c:	071a      	lsls	r2, r3, #28
 8005a3e:	d52f      	bpl.n	8005aa0 <__swbuf_r+0x84>
 8005a40:	6923      	ldr	r3, [r4, #16]
 8005a42:	b36b      	cbz	r3, 8005aa0 <__swbuf_r+0x84>
 8005a44:	6923      	ldr	r3, [r4, #16]
 8005a46:	6820      	ldr	r0, [r4, #0]
 8005a48:	1ac0      	subs	r0, r0, r3
 8005a4a:	6963      	ldr	r3, [r4, #20]
 8005a4c:	b2f6      	uxtb	r6, r6
 8005a4e:	4283      	cmp	r3, r0
 8005a50:	4637      	mov	r7, r6
 8005a52:	dc04      	bgt.n	8005a5e <__swbuf_r+0x42>
 8005a54:	4621      	mov	r1, r4
 8005a56:	4628      	mov	r0, r5
 8005a58:	f000 f926 	bl	8005ca8 <_fflush_r>
 8005a5c:	bb30      	cbnz	r0, 8005aac <__swbuf_r+0x90>
 8005a5e:	68a3      	ldr	r3, [r4, #8]
 8005a60:	3b01      	subs	r3, #1
 8005a62:	60a3      	str	r3, [r4, #8]
 8005a64:	6823      	ldr	r3, [r4, #0]
 8005a66:	1c5a      	adds	r2, r3, #1
 8005a68:	6022      	str	r2, [r4, #0]
 8005a6a:	701e      	strb	r6, [r3, #0]
 8005a6c:	6963      	ldr	r3, [r4, #20]
 8005a6e:	3001      	adds	r0, #1
 8005a70:	4283      	cmp	r3, r0
 8005a72:	d004      	beq.n	8005a7e <__swbuf_r+0x62>
 8005a74:	89a3      	ldrh	r3, [r4, #12]
 8005a76:	07db      	lsls	r3, r3, #31
 8005a78:	d506      	bpl.n	8005a88 <__swbuf_r+0x6c>
 8005a7a:	2e0a      	cmp	r6, #10
 8005a7c:	d104      	bne.n	8005a88 <__swbuf_r+0x6c>
 8005a7e:	4621      	mov	r1, r4
 8005a80:	4628      	mov	r0, r5
 8005a82:	f000 f911 	bl	8005ca8 <_fflush_r>
 8005a86:	b988      	cbnz	r0, 8005aac <__swbuf_r+0x90>
 8005a88:	4638      	mov	r0, r7
 8005a8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a8c:	4b0a      	ldr	r3, [pc, #40]	; (8005ab8 <__swbuf_r+0x9c>)
 8005a8e:	429c      	cmp	r4, r3
 8005a90:	d101      	bne.n	8005a96 <__swbuf_r+0x7a>
 8005a92:	68ac      	ldr	r4, [r5, #8]
 8005a94:	e7cf      	b.n	8005a36 <__swbuf_r+0x1a>
 8005a96:	4b09      	ldr	r3, [pc, #36]	; (8005abc <__swbuf_r+0xa0>)
 8005a98:	429c      	cmp	r4, r3
 8005a9a:	bf08      	it	eq
 8005a9c:	68ec      	ldreq	r4, [r5, #12]
 8005a9e:	e7ca      	b.n	8005a36 <__swbuf_r+0x1a>
 8005aa0:	4621      	mov	r1, r4
 8005aa2:	4628      	mov	r0, r5
 8005aa4:	f000 f80c 	bl	8005ac0 <__swsetup_r>
 8005aa8:	2800      	cmp	r0, #0
 8005aaa:	d0cb      	beq.n	8005a44 <__swbuf_r+0x28>
 8005aac:	f04f 37ff 	mov.w	r7, #4294967295
 8005ab0:	e7ea      	b.n	8005a88 <__swbuf_r+0x6c>
 8005ab2:	bf00      	nop
 8005ab4:	080063c8 	.word	0x080063c8
 8005ab8:	080063e8 	.word	0x080063e8
 8005abc:	080063a8 	.word	0x080063a8

08005ac0 <__swsetup_r>:
 8005ac0:	4b32      	ldr	r3, [pc, #200]	; (8005b8c <__swsetup_r+0xcc>)
 8005ac2:	b570      	push	{r4, r5, r6, lr}
 8005ac4:	681d      	ldr	r5, [r3, #0]
 8005ac6:	4606      	mov	r6, r0
 8005ac8:	460c      	mov	r4, r1
 8005aca:	b125      	cbz	r5, 8005ad6 <__swsetup_r+0x16>
 8005acc:	69ab      	ldr	r3, [r5, #24]
 8005ace:	b913      	cbnz	r3, 8005ad6 <__swsetup_r+0x16>
 8005ad0:	4628      	mov	r0, r5
 8005ad2:	f000 f97d 	bl	8005dd0 <__sinit>
 8005ad6:	4b2e      	ldr	r3, [pc, #184]	; (8005b90 <__swsetup_r+0xd0>)
 8005ad8:	429c      	cmp	r4, r3
 8005ada:	d10f      	bne.n	8005afc <__swsetup_r+0x3c>
 8005adc:	686c      	ldr	r4, [r5, #4]
 8005ade:	89a3      	ldrh	r3, [r4, #12]
 8005ae0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005ae4:	0719      	lsls	r1, r3, #28
 8005ae6:	d42c      	bmi.n	8005b42 <__swsetup_r+0x82>
 8005ae8:	06dd      	lsls	r5, r3, #27
 8005aea:	d411      	bmi.n	8005b10 <__swsetup_r+0x50>
 8005aec:	2309      	movs	r3, #9
 8005aee:	6033      	str	r3, [r6, #0]
 8005af0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005af4:	81a3      	strh	r3, [r4, #12]
 8005af6:	f04f 30ff 	mov.w	r0, #4294967295
 8005afa:	e03e      	b.n	8005b7a <__swsetup_r+0xba>
 8005afc:	4b25      	ldr	r3, [pc, #148]	; (8005b94 <__swsetup_r+0xd4>)
 8005afe:	429c      	cmp	r4, r3
 8005b00:	d101      	bne.n	8005b06 <__swsetup_r+0x46>
 8005b02:	68ac      	ldr	r4, [r5, #8]
 8005b04:	e7eb      	b.n	8005ade <__swsetup_r+0x1e>
 8005b06:	4b24      	ldr	r3, [pc, #144]	; (8005b98 <__swsetup_r+0xd8>)
 8005b08:	429c      	cmp	r4, r3
 8005b0a:	bf08      	it	eq
 8005b0c:	68ec      	ldreq	r4, [r5, #12]
 8005b0e:	e7e6      	b.n	8005ade <__swsetup_r+0x1e>
 8005b10:	0758      	lsls	r0, r3, #29
 8005b12:	d512      	bpl.n	8005b3a <__swsetup_r+0x7a>
 8005b14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005b16:	b141      	cbz	r1, 8005b2a <__swsetup_r+0x6a>
 8005b18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005b1c:	4299      	cmp	r1, r3
 8005b1e:	d002      	beq.n	8005b26 <__swsetup_r+0x66>
 8005b20:	4630      	mov	r0, r6
 8005b22:	f000 fa5b 	bl	8005fdc <_free_r>
 8005b26:	2300      	movs	r3, #0
 8005b28:	6363      	str	r3, [r4, #52]	; 0x34
 8005b2a:	89a3      	ldrh	r3, [r4, #12]
 8005b2c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005b30:	81a3      	strh	r3, [r4, #12]
 8005b32:	2300      	movs	r3, #0
 8005b34:	6063      	str	r3, [r4, #4]
 8005b36:	6923      	ldr	r3, [r4, #16]
 8005b38:	6023      	str	r3, [r4, #0]
 8005b3a:	89a3      	ldrh	r3, [r4, #12]
 8005b3c:	f043 0308 	orr.w	r3, r3, #8
 8005b40:	81a3      	strh	r3, [r4, #12]
 8005b42:	6923      	ldr	r3, [r4, #16]
 8005b44:	b94b      	cbnz	r3, 8005b5a <__swsetup_r+0x9a>
 8005b46:	89a3      	ldrh	r3, [r4, #12]
 8005b48:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005b4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b50:	d003      	beq.n	8005b5a <__swsetup_r+0x9a>
 8005b52:	4621      	mov	r1, r4
 8005b54:	4630      	mov	r0, r6
 8005b56:	f000 fa01 	bl	8005f5c <__smakebuf_r>
 8005b5a:	89a0      	ldrh	r0, [r4, #12]
 8005b5c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005b60:	f010 0301 	ands.w	r3, r0, #1
 8005b64:	d00a      	beq.n	8005b7c <__swsetup_r+0xbc>
 8005b66:	2300      	movs	r3, #0
 8005b68:	60a3      	str	r3, [r4, #8]
 8005b6a:	6963      	ldr	r3, [r4, #20]
 8005b6c:	425b      	negs	r3, r3
 8005b6e:	61a3      	str	r3, [r4, #24]
 8005b70:	6923      	ldr	r3, [r4, #16]
 8005b72:	b943      	cbnz	r3, 8005b86 <__swsetup_r+0xc6>
 8005b74:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005b78:	d1ba      	bne.n	8005af0 <__swsetup_r+0x30>
 8005b7a:	bd70      	pop	{r4, r5, r6, pc}
 8005b7c:	0781      	lsls	r1, r0, #30
 8005b7e:	bf58      	it	pl
 8005b80:	6963      	ldrpl	r3, [r4, #20]
 8005b82:	60a3      	str	r3, [r4, #8]
 8005b84:	e7f4      	b.n	8005b70 <__swsetup_r+0xb0>
 8005b86:	2000      	movs	r0, #0
 8005b88:	e7f7      	b.n	8005b7a <__swsetup_r+0xba>
 8005b8a:	bf00      	nop
 8005b8c:	20000044 	.word	0x20000044
 8005b90:	080063c8 	.word	0x080063c8
 8005b94:	080063e8 	.word	0x080063e8
 8005b98:	080063a8 	.word	0x080063a8

08005b9c <__sflush_r>:
 8005b9c:	898a      	ldrh	r2, [r1, #12]
 8005b9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ba2:	4605      	mov	r5, r0
 8005ba4:	0710      	lsls	r0, r2, #28
 8005ba6:	460c      	mov	r4, r1
 8005ba8:	d458      	bmi.n	8005c5c <__sflush_r+0xc0>
 8005baa:	684b      	ldr	r3, [r1, #4]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	dc05      	bgt.n	8005bbc <__sflush_r+0x20>
 8005bb0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	dc02      	bgt.n	8005bbc <__sflush_r+0x20>
 8005bb6:	2000      	movs	r0, #0
 8005bb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005bbc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005bbe:	2e00      	cmp	r6, #0
 8005bc0:	d0f9      	beq.n	8005bb6 <__sflush_r+0x1a>
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005bc8:	682f      	ldr	r7, [r5, #0]
 8005bca:	602b      	str	r3, [r5, #0]
 8005bcc:	d032      	beq.n	8005c34 <__sflush_r+0x98>
 8005bce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005bd0:	89a3      	ldrh	r3, [r4, #12]
 8005bd2:	075a      	lsls	r2, r3, #29
 8005bd4:	d505      	bpl.n	8005be2 <__sflush_r+0x46>
 8005bd6:	6863      	ldr	r3, [r4, #4]
 8005bd8:	1ac0      	subs	r0, r0, r3
 8005bda:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005bdc:	b10b      	cbz	r3, 8005be2 <__sflush_r+0x46>
 8005bde:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005be0:	1ac0      	subs	r0, r0, r3
 8005be2:	2300      	movs	r3, #0
 8005be4:	4602      	mov	r2, r0
 8005be6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005be8:	6a21      	ldr	r1, [r4, #32]
 8005bea:	4628      	mov	r0, r5
 8005bec:	47b0      	blx	r6
 8005bee:	1c43      	adds	r3, r0, #1
 8005bf0:	89a3      	ldrh	r3, [r4, #12]
 8005bf2:	d106      	bne.n	8005c02 <__sflush_r+0x66>
 8005bf4:	6829      	ldr	r1, [r5, #0]
 8005bf6:	291d      	cmp	r1, #29
 8005bf8:	d82c      	bhi.n	8005c54 <__sflush_r+0xb8>
 8005bfa:	4a2a      	ldr	r2, [pc, #168]	; (8005ca4 <__sflush_r+0x108>)
 8005bfc:	40ca      	lsrs	r2, r1
 8005bfe:	07d6      	lsls	r6, r2, #31
 8005c00:	d528      	bpl.n	8005c54 <__sflush_r+0xb8>
 8005c02:	2200      	movs	r2, #0
 8005c04:	6062      	str	r2, [r4, #4]
 8005c06:	04d9      	lsls	r1, r3, #19
 8005c08:	6922      	ldr	r2, [r4, #16]
 8005c0a:	6022      	str	r2, [r4, #0]
 8005c0c:	d504      	bpl.n	8005c18 <__sflush_r+0x7c>
 8005c0e:	1c42      	adds	r2, r0, #1
 8005c10:	d101      	bne.n	8005c16 <__sflush_r+0x7a>
 8005c12:	682b      	ldr	r3, [r5, #0]
 8005c14:	b903      	cbnz	r3, 8005c18 <__sflush_r+0x7c>
 8005c16:	6560      	str	r0, [r4, #84]	; 0x54
 8005c18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005c1a:	602f      	str	r7, [r5, #0]
 8005c1c:	2900      	cmp	r1, #0
 8005c1e:	d0ca      	beq.n	8005bb6 <__sflush_r+0x1a>
 8005c20:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005c24:	4299      	cmp	r1, r3
 8005c26:	d002      	beq.n	8005c2e <__sflush_r+0x92>
 8005c28:	4628      	mov	r0, r5
 8005c2a:	f000 f9d7 	bl	8005fdc <_free_r>
 8005c2e:	2000      	movs	r0, #0
 8005c30:	6360      	str	r0, [r4, #52]	; 0x34
 8005c32:	e7c1      	b.n	8005bb8 <__sflush_r+0x1c>
 8005c34:	6a21      	ldr	r1, [r4, #32]
 8005c36:	2301      	movs	r3, #1
 8005c38:	4628      	mov	r0, r5
 8005c3a:	47b0      	blx	r6
 8005c3c:	1c41      	adds	r1, r0, #1
 8005c3e:	d1c7      	bne.n	8005bd0 <__sflush_r+0x34>
 8005c40:	682b      	ldr	r3, [r5, #0]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d0c4      	beq.n	8005bd0 <__sflush_r+0x34>
 8005c46:	2b1d      	cmp	r3, #29
 8005c48:	d001      	beq.n	8005c4e <__sflush_r+0xb2>
 8005c4a:	2b16      	cmp	r3, #22
 8005c4c:	d101      	bne.n	8005c52 <__sflush_r+0xb6>
 8005c4e:	602f      	str	r7, [r5, #0]
 8005c50:	e7b1      	b.n	8005bb6 <__sflush_r+0x1a>
 8005c52:	89a3      	ldrh	r3, [r4, #12]
 8005c54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c58:	81a3      	strh	r3, [r4, #12]
 8005c5a:	e7ad      	b.n	8005bb8 <__sflush_r+0x1c>
 8005c5c:	690f      	ldr	r7, [r1, #16]
 8005c5e:	2f00      	cmp	r7, #0
 8005c60:	d0a9      	beq.n	8005bb6 <__sflush_r+0x1a>
 8005c62:	0793      	lsls	r3, r2, #30
 8005c64:	680e      	ldr	r6, [r1, #0]
 8005c66:	bf08      	it	eq
 8005c68:	694b      	ldreq	r3, [r1, #20]
 8005c6a:	600f      	str	r7, [r1, #0]
 8005c6c:	bf18      	it	ne
 8005c6e:	2300      	movne	r3, #0
 8005c70:	eba6 0807 	sub.w	r8, r6, r7
 8005c74:	608b      	str	r3, [r1, #8]
 8005c76:	f1b8 0f00 	cmp.w	r8, #0
 8005c7a:	dd9c      	ble.n	8005bb6 <__sflush_r+0x1a>
 8005c7c:	6a21      	ldr	r1, [r4, #32]
 8005c7e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005c80:	4643      	mov	r3, r8
 8005c82:	463a      	mov	r2, r7
 8005c84:	4628      	mov	r0, r5
 8005c86:	47b0      	blx	r6
 8005c88:	2800      	cmp	r0, #0
 8005c8a:	dc06      	bgt.n	8005c9a <__sflush_r+0xfe>
 8005c8c:	89a3      	ldrh	r3, [r4, #12]
 8005c8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c92:	81a3      	strh	r3, [r4, #12]
 8005c94:	f04f 30ff 	mov.w	r0, #4294967295
 8005c98:	e78e      	b.n	8005bb8 <__sflush_r+0x1c>
 8005c9a:	4407      	add	r7, r0
 8005c9c:	eba8 0800 	sub.w	r8, r8, r0
 8005ca0:	e7e9      	b.n	8005c76 <__sflush_r+0xda>
 8005ca2:	bf00      	nop
 8005ca4:	20400001 	.word	0x20400001

08005ca8 <_fflush_r>:
 8005ca8:	b538      	push	{r3, r4, r5, lr}
 8005caa:	690b      	ldr	r3, [r1, #16]
 8005cac:	4605      	mov	r5, r0
 8005cae:	460c      	mov	r4, r1
 8005cb0:	b913      	cbnz	r3, 8005cb8 <_fflush_r+0x10>
 8005cb2:	2500      	movs	r5, #0
 8005cb4:	4628      	mov	r0, r5
 8005cb6:	bd38      	pop	{r3, r4, r5, pc}
 8005cb8:	b118      	cbz	r0, 8005cc2 <_fflush_r+0x1a>
 8005cba:	6983      	ldr	r3, [r0, #24]
 8005cbc:	b90b      	cbnz	r3, 8005cc2 <_fflush_r+0x1a>
 8005cbe:	f000 f887 	bl	8005dd0 <__sinit>
 8005cc2:	4b14      	ldr	r3, [pc, #80]	; (8005d14 <_fflush_r+0x6c>)
 8005cc4:	429c      	cmp	r4, r3
 8005cc6:	d11b      	bne.n	8005d00 <_fflush_r+0x58>
 8005cc8:	686c      	ldr	r4, [r5, #4]
 8005cca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d0ef      	beq.n	8005cb2 <_fflush_r+0xa>
 8005cd2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005cd4:	07d0      	lsls	r0, r2, #31
 8005cd6:	d404      	bmi.n	8005ce2 <_fflush_r+0x3a>
 8005cd8:	0599      	lsls	r1, r3, #22
 8005cda:	d402      	bmi.n	8005ce2 <_fflush_r+0x3a>
 8005cdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005cde:	f000 f915 	bl	8005f0c <__retarget_lock_acquire_recursive>
 8005ce2:	4628      	mov	r0, r5
 8005ce4:	4621      	mov	r1, r4
 8005ce6:	f7ff ff59 	bl	8005b9c <__sflush_r>
 8005cea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005cec:	07da      	lsls	r2, r3, #31
 8005cee:	4605      	mov	r5, r0
 8005cf0:	d4e0      	bmi.n	8005cb4 <_fflush_r+0xc>
 8005cf2:	89a3      	ldrh	r3, [r4, #12]
 8005cf4:	059b      	lsls	r3, r3, #22
 8005cf6:	d4dd      	bmi.n	8005cb4 <_fflush_r+0xc>
 8005cf8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005cfa:	f000 f908 	bl	8005f0e <__retarget_lock_release_recursive>
 8005cfe:	e7d9      	b.n	8005cb4 <_fflush_r+0xc>
 8005d00:	4b05      	ldr	r3, [pc, #20]	; (8005d18 <_fflush_r+0x70>)
 8005d02:	429c      	cmp	r4, r3
 8005d04:	d101      	bne.n	8005d0a <_fflush_r+0x62>
 8005d06:	68ac      	ldr	r4, [r5, #8]
 8005d08:	e7df      	b.n	8005cca <_fflush_r+0x22>
 8005d0a:	4b04      	ldr	r3, [pc, #16]	; (8005d1c <_fflush_r+0x74>)
 8005d0c:	429c      	cmp	r4, r3
 8005d0e:	bf08      	it	eq
 8005d10:	68ec      	ldreq	r4, [r5, #12]
 8005d12:	e7da      	b.n	8005cca <_fflush_r+0x22>
 8005d14:	080063c8 	.word	0x080063c8
 8005d18:	080063e8 	.word	0x080063e8
 8005d1c:	080063a8 	.word	0x080063a8

08005d20 <std>:
 8005d20:	2300      	movs	r3, #0
 8005d22:	b510      	push	{r4, lr}
 8005d24:	4604      	mov	r4, r0
 8005d26:	e9c0 3300 	strd	r3, r3, [r0]
 8005d2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005d2e:	6083      	str	r3, [r0, #8]
 8005d30:	8181      	strh	r1, [r0, #12]
 8005d32:	6643      	str	r3, [r0, #100]	; 0x64
 8005d34:	81c2      	strh	r2, [r0, #14]
 8005d36:	6183      	str	r3, [r0, #24]
 8005d38:	4619      	mov	r1, r3
 8005d3a:	2208      	movs	r2, #8
 8005d3c:	305c      	adds	r0, #92	; 0x5c
 8005d3e:	f7ff fdef 	bl	8005920 <memset>
 8005d42:	4b05      	ldr	r3, [pc, #20]	; (8005d58 <std+0x38>)
 8005d44:	6263      	str	r3, [r4, #36]	; 0x24
 8005d46:	4b05      	ldr	r3, [pc, #20]	; (8005d5c <std+0x3c>)
 8005d48:	62a3      	str	r3, [r4, #40]	; 0x28
 8005d4a:	4b05      	ldr	r3, [pc, #20]	; (8005d60 <std+0x40>)
 8005d4c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005d4e:	4b05      	ldr	r3, [pc, #20]	; (8005d64 <std+0x44>)
 8005d50:	6224      	str	r4, [r4, #32]
 8005d52:	6323      	str	r3, [r4, #48]	; 0x30
 8005d54:	bd10      	pop	{r4, pc}
 8005d56:	bf00      	nop
 8005d58:	080061bd 	.word	0x080061bd
 8005d5c:	080061df 	.word	0x080061df
 8005d60:	08006217 	.word	0x08006217
 8005d64:	0800623b 	.word	0x0800623b

08005d68 <_cleanup_r>:
 8005d68:	4901      	ldr	r1, [pc, #4]	; (8005d70 <_cleanup_r+0x8>)
 8005d6a:	f000 b8af 	b.w	8005ecc <_fwalk_reent>
 8005d6e:	bf00      	nop
 8005d70:	08005ca9 	.word	0x08005ca9

08005d74 <__sfmoreglue>:
 8005d74:	b570      	push	{r4, r5, r6, lr}
 8005d76:	2268      	movs	r2, #104	; 0x68
 8005d78:	1e4d      	subs	r5, r1, #1
 8005d7a:	4355      	muls	r5, r2
 8005d7c:	460e      	mov	r6, r1
 8005d7e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005d82:	f000 f997 	bl	80060b4 <_malloc_r>
 8005d86:	4604      	mov	r4, r0
 8005d88:	b140      	cbz	r0, 8005d9c <__sfmoreglue+0x28>
 8005d8a:	2100      	movs	r1, #0
 8005d8c:	e9c0 1600 	strd	r1, r6, [r0]
 8005d90:	300c      	adds	r0, #12
 8005d92:	60a0      	str	r0, [r4, #8]
 8005d94:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005d98:	f7ff fdc2 	bl	8005920 <memset>
 8005d9c:	4620      	mov	r0, r4
 8005d9e:	bd70      	pop	{r4, r5, r6, pc}

08005da0 <__sfp_lock_acquire>:
 8005da0:	4801      	ldr	r0, [pc, #4]	; (8005da8 <__sfp_lock_acquire+0x8>)
 8005da2:	f000 b8b3 	b.w	8005f0c <__retarget_lock_acquire_recursive>
 8005da6:	bf00      	nop
 8005da8:	20000275 	.word	0x20000275

08005dac <__sfp_lock_release>:
 8005dac:	4801      	ldr	r0, [pc, #4]	; (8005db4 <__sfp_lock_release+0x8>)
 8005dae:	f000 b8ae 	b.w	8005f0e <__retarget_lock_release_recursive>
 8005db2:	bf00      	nop
 8005db4:	20000275 	.word	0x20000275

08005db8 <__sinit_lock_acquire>:
 8005db8:	4801      	ldr	r0, [pc, #4]	; (8005dc0 <__sinit_lock_acquire+0x8>)
 8005dba:	f000 b8a7 	b.w	8005f0c <__retarget_lock_acquire_recursive>
 8005dbe:	bf00      	nop
 8005dc0:	20000276 	.word	0x20000276

08005dc4 <__sinit_lock_release>:
 8005dc4:	4801      	ldr	r0, [pc, #4]	; (8005dcc <__sinit_lock_release+0x8>)
 8005dc6:	f000 b8a2 	b.w	8005f0e <__retarget_lock_release_recursive>
 8005dca:	bf00      	nop
 8005dcc:	20000276 	.word	0x20000276

08005dd0 <__sinit>:
 8005dd0:	b510      	push	{r4, lr}
 8005dd2:	4604      	mov	r4, r0
 8005dd4:	f7ff fff0 	bl	8005db8 <__sinit_lock_acquire>
 8005dd8:	69a3      	ldr	r3, [r4, #24]
 8005dda:	b11b      	cbz	r3, 8005de4 <__sinit+0x14>
 8005ddc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005de0:	f7ff bff0 	b.w	8005dc4 <__sinit_lock_release>
 8005de4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005de8:	6523      	str	r3, [r4, #80]	; 0x50
 8005dea:	4b13      	ldr	r3, [pc, #76]	; (8005e38 <__sinit+0x68>)
 8005dec:	4a13      	ldr	r2, [pc, #76]	; (8005e3c <__sinit+0x6c>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	62a2      	str	r2, [r4, #40]	; 0x28
 8005df2:	42a3      	cmp	r3, r4
 8005df4:	bf04      	itt	eq
 8005df6:	2301      	moveq	r3, #1
 8005df8:	61a3      	streq	r3, [r4, #24]
 8005dfa:	4620      	mov	r0, r4
 8005dfc:	f000 f820 	bl	8005e40 <__sfp>
 8005e00:	6060      	str	r0, [r4, #4]
 8005e02:	4620      	mov	r0, r4
 8005e04:	f000 f81c 	bl	8005e40 <__sfp>
 8005e08:	60a0      	str	r0, [r4, #8]
 8005e0a:	4620      	mov	r0, r4
 8005e0c:	f000 f818 	bl	8005e40 <__sfp>
 8005e10:	2200      	movs	r2, #0
 8005e12:	60e0      	str	r0, [r4, #12]
 8005e14:	2104      	movs	r1, #4
 8005e16:	6860      	ldr	r0, [r4, #4]
 8005e18:	f7ff ff82 	bl	8005d20 <std>
 8005e1c:	68a0      	ldr	r0, [r4, #8]
 8005e1e:	2201      	movs	r2, #1
 8005e20:	2109      	movs	r1, #9
 8005e22:	f7ff ff7d 	bl	8005d20 <std>
 8005e26:	68e0      	ldr	r0, [r4, #12]
 8005e28:	2202      	movs	r2, #2
 8005e2a:	2112      	movs	r1, #18
 8005e2c:	f7ff ff78 	bl	8005d20 <std>
 8005e30:	2301      	movs	r3, #1
 8005e32:	61a3      	str	r3, [r4, #24]
 8005e34:	e7d2      	b.n	8005ddc <__sinit+0xc>
 8005e36:	bf00      	nop
 8005e38:	080063a4 	.word	0x080063a4
 8005e3c:	08005d69 	.word	0x08005d69

08005e40 <__sfp>:
 8005e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e42:	4607      	mov	r7, r0
 8005e44:	f7ff ffac 	bl	8005da0 <__sfp_lock_acquire>
 8005e48:	4b1e      	ldr	r3, [pc, #120]	; (8005ec4 <__sfp+0x84>)
 8005e4a:	681e      	ldr	r6, [r3, #0]
 8005e4c:	69b3      	ldr	r3, [r6, #24]
 8005e4e:	b913      	cbnz	r3, 8005e56 <__sfp+0x16>
 8005e50:	4630      	mov	r0, r6
 8005e52:	f7ff ffbd 	bl	8005dd0 <__sinit>
 8005e56:	3648      	adds	r6, #72	; 0x48
 8005e58:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005e5c:	3b01      	subs	r3, #1
 8005e5e:	d503      	bpl.n	8005e68 <__sfp+0x28>
 8005e60:	6833      	ldr	r3, [r6, #0]
 8005e62:	b30b      	cbz	r3, 8005ea8 <__sfp+0x68>
 8005e64:	6836      	ldr	r6, [r6, #0]
 8005e66:	e7f7      	b.n	8005e58 <__sfp+0x18>
 8005e68:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005e6c:	b9d5      	cbnz	r5, 8005ea4 <__sfp+0x64>
 8005e6e:	4b16      	ldr	r3, [pc, #88]	; (8005ec8 <__sfp+0x88>)
 8005e70:	60e3      	str	r3, [r4, #12]
 8005e72:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005e76:	6665      	str	r5, [r4, #100]	; 0x64
 8005e78:	f000 f847 	bl	8005f0a <__retarget_lock_init_recursive>
 8005e7c:	f7ff ff96 	bl	8005dac <__sfp_lock_release>
 8005e80:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005e84:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005e88:	6025      	str	r5, [r4, #0]
 8005e8a:	61a5      	str	r5, [r4, #24]
 8005e8c:	2208      	movs	r2, #8
 8005e8e:	4629      	mov	r1, r5
 8005e90:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005e94:	f7ff fd44 	bl	8005920 <memset>
 8005e98:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005e9c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005ea0:	4620      	mov	r0, r4
 8005ea2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ea4:	3468      	adds	r4, #104	; 0x68
 8005ea6:	e7d9      	b.n	8005e5c <__sfp+0x1c>
 8005ea8:	2104      	movs	r1, #4
 8005eaa:	4638      	mov	r0, r7
 8005eac:	f7ff ff62 	bl	8005d74 <__sfmoreglue>
 8005eb0:	4604      	mov	r4, r0
 8005eb2:	6030      	str	r0, [r6, #0]
 8005eb4:	2800      	cmp	r0, #0
 8005eb6:	d1d5      	bne.n	8005e64 <__sfp+0x24>
 8005eb8:	f7ff ff78 	bl	8005dac <__sfp_lock_release>
 8005ebc:	230c      	movs	r3, #12
 8005ebe:	603b      	str	r3, [r7, #0]
 8005ec0:	e7ee      	b.n	8005ea0 <__sfp+0x60>
 8005ec2:	bf00      	nop
 8005ec4:	080063a4 	.word	0x080063a4
 8005ec8:	ffff0001 	.word	0xffff0001

08005ecc <_fwalk_reent>:
 8005ecc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ed0:	4606      	mov	r6, r0
 8005ed2:	4688      	mov	r8, r1
 8005ed4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005ed8:	2700      	movs	r7, #0
 8005eda:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005ede:	f1b9 0901 	subs.w	r9, r9, #1
 8005ee2:	d505      	bpl.n	8005ef0 <_fwalk_reent+0x24>
 8005ee4:	6824      	ldr	r4, [r4, #0]
 8005ee6:	2c00      	cmp	r4, #0
 8005ee8:	d1f7      	bne.n	8005eda <_fwalk_reent+0xe>
 8005eea:	4638      	mov	r0, r7
 8005eec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ef0:	89ab      	ldrh	r3, [r5, #12]
 8005ef2:	2b01      	cmp	r3, #1
 8005ef4:	d907      	bls.n	8005f06 <_fwalk_reent+0x3a>
 8005ef6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005efa:	3301      	adds	r3, #1
 8005efc:	d003      	beq.n	8005f06 <_fwalk_reent+0x3a>
 8005efe:	4629      	mov	r1, r5
 8005f00:	4630      	mov	r0, r6
 8005f02:	47c0      	blx	r8
 8005f04:	4307      	orrs	r7, r0
 8005f06:	3568      	adds	r5, #104	; 0x68
 8005f08:	e7e9      	b.n	8005ede <_fwalk_reent+0x12>

08005f0a <__retarget_lock_init_recursive>:
 8005f0a:	4770      	bx	lr

08005f0c <__retarget_lock_acquire_recursive>:
 8005f0c:	4770      	bx	lr

08005f0e <__retarget_lock_release_recursive>:
 8005f0e:	4770      	bx	lr

08005f10 <__swhatbuf_r>:
 8005f10:	b570      	push	{r4, r5, r6, lr}
 8005f12:	460e      	mov	r6, r1
 8005f14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f18:	2900      	cmp	r1, #0
 8005f1a:	b096      	sub	sp, #88	; 0x58
 8005f1c:	4614      	mov	r4, r2
 8005f1e:	461d      	mov	r5, r3
 8005f20:	da08      	bge.n	8005f34 <__swhatbuf_r+0x24>
 8005f22:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005f26:	2200      	movs	r2, #0
 8005f28:	602a      	str	r2, [r5, #0]
 8005f2a:	061a      	lsls	r2, r3, #24
 8005f2c:	d410      	bmi.n	8005f50 <__swhatbuf_r+0x40>
 8005f2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f32:	e00e      	b.n	8005f52 <__swhatbuf_r+0x42>
 8005f34:	466a      	mov	r2, sp
 8005f36:	f000 f9a7 	bl	8006288 <_fstat_r>
 8005f3a:	2800      	cmp	r0, #0
 8005f3c:	dbf1      	blt.n	8005f22 <__swhatbuf_r+0x12>
 8005f3e:	9a01      	ldr	r2, [sp, #4]
 8005f40:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005f44:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005f48:	425a      	negs	r2, r3
 8005f4a:	415a      	adcs	r2, r3
 8005f4c:	602a      	str	r2, [r5, #0]
 8005f4e:	e7ee      	b.n	8005f2e <__swhatbuf_r+0x1e>
 8005f50:	2340      	movs	r3, #64	; 0x40
 8005f52:	2000      	movs	r0, #0
 8005f54:	6023      	str	r3, [r4, #0]
 8005f56:	b016      	add	sp, #88	; 0x58
 8005f58:	bd70      	pop	{r4, r5, r6, pc}
	...

08005f5c <__smakebuf_r>:
 8005f5c:	898b      	ldrh	r3, [r1, #12]
 8005f5e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005f60:	079d      	lsls	r5, r3, #30
 8005f62:	4606      	mov	r6, r0
 8005f64:	460c      	mov	r4, r1
 8005f66:	d507      	bpl.n	8005f78 <__smakebuf_r+0x1c>
 8005f68:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005f6c:	6023      	str	r3, [r4, #0]
 8005f6e:	6123      	str	r3, [r4, #16]
 8005f70:	2301      	movs	r3, #1
 8005f72:	6163      	str	r3, [r4, #20]
 8005f74:	b002      	add	sp, #8
 8005f76:	bd70      	pop	{r4, r5, r6, pc}
 8005f78:	ab01      	add	r3, sp, #4
 8005f7a:	466a      	mov	r2, sp
 8005f7c:	f7ff ffc8 	bl	8005f10 <__swhatbuf_r>
 8005f80:	9900      	ldr	r1, [sp, #0]
 8005f82:	4605      	mov	r5, r0
 8005f84:	4630      	mov	r0, r6
 8005f86:	f000 f895 	bl	80060b4 <_malloc_r>
 8005f8a:	b948      	cbnz	r0, 8005fa0 <__smakebuf_r+0x44>
 8005f8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f90:	059a      	lsls	r2, r3, #22
 8005f92:	d4ef      	bmi.n	8005f74 <__smakebuf_r+0x18>
 8005f94:	f023 0303 	bic.w	r3, r3, #3
 8005f98:	f043 0302 	orr.w	r3, r3, #2
 8005f9c:	81a3      	strh	r3, [r4, #12]
 8005f9e:	e7e3      	b.n	8005f68 <__smakebuf_r+0xc>
 8005fa0:	4b0d      	ldr	r3, [pc, #52]	; (8005fd8 <__smakebuf_r+0x7c>)
 8005fa2:	62b3      	str	r3, [r6, #40]	; 0x28
 8005fa4:	89a3      	ldrh	r3, [r4, #12]
 8005fa6:	6020      	str	r0, [r4, #0]
 8005fa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fac:	81a3      	strh	r3, [r4, #12]
 8005fae:	9b00      	ldr	r3, [sp, #0]
 8005fb0:	6163      	str	r3, [r4, #20]
 8005fb2:	9b01      	ldr	r3, [sp, #4]
 8005fb4:	6120      	str	r0, [r4, #16]
 8005fb6:	b15b      	cbz	r3, 8005fd0 <__smakebuf_r+0x74>
 8005fb8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005fbc:	4630      	mov	r0, r6
 8005fbe:	f000 f975 	bl	80062ac <_isatty_r>
 8005fc2:	b128      	cbz	r0, 8005fd0 <__smakebuf_r+0x74>
 8005fc4:	89a3      	ldrh	r3, [r4, #12]
 8005fc6:	f023 0303 	bic.w	r3, r3, #3
 8005fca:	f043 0301 	orr.w	r3, r3, #1
 8005fce:	81a3      	strh	r3, [r4, #12]
 8005fd0:	89a0      	ldrh	r0, [r4, #12]
 8005fd2:	4305      	orrs	r5, r0
 8005fd4:	81a5      	strh	r5, [r4, #12]
 8005fd6:	e7cd      	b.n	8005f74 <__smakebuf_r+0x18>
 8005fd8:	08005d69 	.word	0x08005d69

08005fdc <_free_r>:
 8005fdc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005fde:	2900      	cmp	r1, #0
 8005fe0:	d044      	beq.n	800606c <_free_r+0x90>
 8005fe2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005fe6:	9001      	str	r0, [sp, #4]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	f1a1 0404 	sub.w	r4, r1, #4
 8005fee:	bfb8      	it	lt
 8005ff0:	18e4      	addlt	r4, r4, r3
 8005ff2:	f000 f97d 	bl	80062f0 <__malloc_lock>
 8005ff6:	4a1e      	ldr	r2, [pc, #120]	; (8006070 <_free_r+0x94>)
 8005ff8:	9801      	ldr	r0, [sp, #4]
 8005ffa:	6813      	ldr	r3, [r2, #0]
 8005ffc:	b933      	cbnz	r3, 800600c <_free_r+0x30>
 8005ffe:	6063      	str	r3, [r4, #4]
 8006000:	6014      	str	r4, [r2, #0]
 8006002:	b003      	add	sp, #12
 8006004:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006008:	f000 b978 	b.w	80062fc <__malloc_unlock>
 800600c:	42a3      	cmp	r3, r4
 800600e:	d908      	bls.n	8006022 <_free_r+0x46>
 8006010:	6825      	ldr	r5, [r4, #0]
 8006012:	1961      	adds	r1, r4, r5
 8006014:	428b      	cmp	r3, r1
 8006016:	bf01      	itttt	eq
 8006018:	6819      	ldreq	r1, [r3, #0]
 800601a:	685b      	ldreq	r3, [r3, #4]
 800601c:	1949      	addeq	r1, r1, r5
 800601e:	6021      	streq	r1, [r4, #0]
 8006020:	e7ed      	b.n	8005ffe <_free_r+0x22>
 8006022:	461a      	mov	r2, r3
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	b10b      	cbz	r3, 800602c <_free_r+0x50>
 8006028:	42a3      	cmp	r3, r4
 800602a:	d9fa      	bls.n	8006022 <_free_r+0x46>
 800602c:	6811      	ldr	r1, [r2, #0]
 800602e:	1855      	adds	r5, r2, r1
 8006030:	42a5      	cmp	r5, r4
 8006032:	d10b      	bne.n	800604c <_free_r+0x70>
 8006034:	6824      	ldr	r4, [r4, #0]
 8006036:	4421      	add	r1, r4
 8006038:	1854      	adds	r4, r2, r1
 800603a:	42a3      	cmp	r3, r4
 800603c:	6011      	str	r1, [r2, #0]
 800603e:	d1e0      	bne.n	8006002 <_free_r+0x26>
 8006040:	681c      	ldr	r4, [r3, #0]
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	6053      	str	r3, [r2, #4]
 8006046:	4421      	add	r1, r4
 8006048:	6011      	str	r1, [r2, #0]
 800604a:	e7da      	b.n	8006002 <_free_r+0x26>
 800604c:	d902      	bls.n	8006054 <_free_r+0x78>
 800604e:	230c      	movs	r3, #12
 8006050:	6003      	str	r3, [r0, #0]
 8006052:	e7d6      	b.n	8006002 <_free_r+0x26>
 8006054:	6825      	ldr	r5, [r4, #0]
 8006056:	1961      	adds	r1, r4, r5
 8006058:	428b      	cmp	r3, r1
 800605a:	bf04      	itt	eq
 800605c:	6819      	ldreq	r1, [r3, #0]
 800605e:	685b      	ldreq	r3, [r3, #4]
 8006060:	6063      	str	r3, [r4, #4]
 8006062:	bf04      	itt	eq
 8006064:	1949      	addeq	r1, r1, r5
 8006066:	6021      	streq	r1, [r4, #0]
 8006068:	6054      	str	r4, [r2, #4]
 800606a:	e7ca      	b.n	8006002 <_free_r+0x26>
 800606c:	b003      	add	sp, #12
 800606e:	bd30      	pop	{r4, r5, pc}
 8006070:	20000278 	.word	0x20000278

08006074 <sbrk_aligned>:
 8006074:	b570      	push	{r4, r5, r6, lr}
 8006076:	4e0e      	ldr	r6, [pc, #56]	; (80060b0 <sbrk_aligned+0x3c>)
 8006078:	460c      	mov	r4, r1
 800607a:	6831      	ldr	r1, [r6, #0]
 800607c:	4605      	mov	r5, r0
 800607e:	b911      	cbnz	r1, 8006086 <sbrk_aligned+0x12>
 8006080:	f000 f88c 	bl	800619c <_sbrk_r>
 8006084:	6030      	str	r0, [r6, #0]
 8006086:	4621      	mov	r1, r4
 8006088:	4628      	mov	r0, r5
 800608a:	f000 f887 	bl	800619c <_sbrk_r>
 800608e:	1c43      	adds	r3, r0, #1
 8006090:	d00a      	beq.n	80060a8 <sbrk_aligned+0x34>
 8006092:	1cc4      	adds	r4, r0, #3
 8006094:	f024 0403 	bic.w	r4, r4, #3
 8006098:	42a0      	cmp	r0, r4
 800609a:	d007      	beq.n	80060ac <sbrk_aligned+0x38>
 800609c:	1a21      	subs	r1, r4, r0
 800609e:	4628      	mov	r0, r5
 80060a0:	f000 f87c 	bl	800619c <_sbrk_r>
 80060a4:	3001      	adds	r0, #1
 80060a6:	d101      	bne.n	80060ac <sbrk_aligned+0x38>
 80060a8:	f04f 34ff 	mov.w	r4, #4294967295
 80060ac:	4620      	mov	r0, r4
 80060ae:	bd70      	pop	{r4, r5, r6, pc}
 80060b0:	2000027c 	.word	0x2000027c

080060b4 <_malloc_r>:
 80060b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060b8:	1ccd      	adds	r5, r1, #3
 80060ba:	f025 0503 	bic.w	r5, r5, #3
 80060be:	3508      	adds	r5, #8
 80060c0:	2d0c      	cmp	r5, #12
 80060c2:	bf38      	it	cc
 80060c4:	250c      	movcc	r5, #12
 80060c6:	2d00      	cmp	r5, #0
 80060c8:	4607      	mov	r7, r0
 80060ca:	db01      	blt.n	80060d0 <_malloc_r+0x1c>
 80060cc:	42a9      	cmp	r1, r5
 80060ce:	d905      	bls.n	80060dc <_malloc_r+0x28>
 80060d0:	230c      	movs	r3, #12
 80060d2:	603b      	str	r3, [r7, #0]
 80060d4:	2600      	movs	r6, #0
 80060d6:	4630      	mov	r0, r6
 80060d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80060dc:	4e2e      	ldr	r6, [pc, #184]	; (8006198 <_malloc_r+0xe4>)
 80060de:	f000 f907 	bl	80062f0 <__malloc_lock>
 80060e2:	6833      	ldr	r3, [r6, #0]
 80060e4:	461c      	mov	r4, r3
 80060e6:	bb34      	cbnz	r4, 8006136 <_malloc_r+0x82>
 80060e8:	4629      	mov	r1, r5
 80060ea:	4638      	mov	r0, r7
 80060ec:	f7ff ffc2 	bl	8006074 <sbrk_aligned>
 80060f0:	1c43      	adds	r3, r0, #1
 80060f2:	4604      	mov	r4, r0
 80060f4:	d14d      	bne.n	8006192 <_malloc_r+0xde>
 80060f6:	6834      	ldr	r4, [r6, #0]
 80060f8:	4626      	mov	r6, r4
 80060fa:	2e00      	cmp	r6, #0
 80060fc:	d140      	bne.n	8006180 <_malloc_r+0xcc>
 80060fe:	6823      	ldr	r3, [r4, #0]
 8006100:	4631      	mov	r1, r6
 8006102:	4638      	mov	r0, r7
 8006104:	eb04 0803 	add.w	r8, r4, r3
 8006108:	f000 f848 	bl	800619c <_sbrk_r>
 800610c:	4580      	cmp	r8, r0
 800610e:	d13a      	bne.n	8006186 <_malloc_r+0xd2>
 8006110:	6821      	ldr	r1, [r4, #0]
 8006112:	3503      	adds	r5, #3
 8006114:	1a6d      	subs	r5, r5, r1
 8006116:	f025 0503 	bic.w	r5, r5, #3
 800611a:	3508      	adds	r5, #8
 800611c:	2d0c      	cmp	r5, #12
 800611e:	bf38      	it	cc
 8006120:	250c      	movcc	r5, #12
 8006122:	4629      	mov	r1, r5
 8006124:	4638      	mov	r0, r7
 8006126:	f7ff ffa5 	bl	8006074 <sbrk_aligned>
 800612a:	3001      	adds	r0, #1
 800612c:	d02b      	beq.n	8006186 <_malloc_r+0xd2>
 800612e:	6823      	ldr	r3, [r4, #0]
 8006130:	442b      	add	r3, r5
 8006132:	6023      	str	r3, [r4, #0]
 8006134:	e00e      	b.n	8006154 <_malloc_r+0xa0>
 8006136:	6822      	ldr	r2, [r4, #0]
 8006138:	1b52      	subs	r2, r2, r5
 800613a:	d41e      	bmi.n	800617a <_malloc_r+0xc6>
 800613c:	2a0b      	cmp	r2, #11
 800613e:	d916      	bls.n	800616e <_malloc_r+0xba>
 8006140:	1961      	adds	r1, r4, r5
 8006142:	42a3      	cmp	r3, r4
 8006144:	6025      	str	r5, [r4, #0]
 8006146:	bf18      	it	ne
 8006148:	6059      	strne	r1, [r3, #4]
 800614a:	6863      	ldr	r3, [r4, #4]
 800614c:	bf08      	it	eq
 800614e:	6031      	streq	r1, [r6, #0]
 8006150:	5162      	str	r2, [r4, r5]
 8006152:	604b      	str	r3, [r1, #4]
 8006154:	4638      	mov	r0, r7
 8006156:	f104 060b 	add.w	r6, r4, #11
 800615a:	f000 f8cf 	bl	80062fc <__malloc_unlock>
 800615e:	f026 0607 	bic.w	r6, r6, #7
 8006162:	1d23      	adds	r3, r4, #4
 8006164:	1af2      	subs	r2, r6, r3
 8006166:	d0b6      	beq.n	80060d6 <_malloc_r+0x22>
 8006168:	1b9b      	subs	r3, r3, r6
 800616a:	50a3      	str	r3, [r4, r2]
 800616c:	e7b3      	b.n	80060d6 <_malloc_r+0x22>
 800616e:	6862      	ldr	r2, [r4, #4]
 8006170:	42a3      	cmp	r3, r4
 8006172:	bf0c      	ite	eq
 8006174:	6032      	streq	r2, [r6, #0]
 8006176:	605a      	strne	r2, [r3, #4]
 8006178:	e7ec      	b.n	8006154 <_malloc_r+0xa0>
 800617a:	4623      	mov	r3, r4
 800617c:	6864      	ldr	r4, [r4, #4]
 800617e:	e7b2      	b.n	80060e6 <_malloc_r+0x32>
 8006180:	4634      	mov	r4, r6
 8006182:	6876      	ldr	r6, [r6, #4]
 8006184:	e7b9      	b.n	80060fa <_malloc_r+0x46>
 8006186:	230c      	movs	r3, #12
 8006188:	603b      	str	r3, [r7, #0]
 800618a:	4638      	mov	r0, r7
 800618c:	f000 f8b6 	bl	80062fc <__malloc_unlock>
 8006190:	e7a1      	b.n	80060d6 <_malloc_r+0x22>
 8006192:	6025      	str	r5, [r4, #0]
 8006194:	e7de      	b.n	8006154 <_malloc_r+0xa0>
 8006196:	bf00      	nop
 8006198:	20000278 	.word	0x20000278

0800619c <_sbrk_r>:
 800619c:	b538      	push	{r3, r4, r5, lr}
 800619e:	4d06      	ldr	r5, [pc, #24]	; (80061b8 <_sbrk_r+0x1c>)
 80061a0:	2300      	movs	r3, #0
 80061a2:	4604      	mov	r4, r0
 80061a4:	4608      	mov	r0, r1
 80061a6:	602b      	str	r3, [r5, #0]
 80061a8:	f7fa ff9c 	bl	80010e4 <_sbrk>
 80061ac:	1c43      	adds	r3, r0, #1
 80061ae:	d102      	bne.n	80061b6 <_sbrk_r+0x1a>
 80061b0:	682b      	ldr	r3, [r5, #0]
 80061b2:	b103      	cbz	r3, 80061b6 <_sbrk_r+0x1a>
 80061b4:	6023      	str	r3, [r4, #0]
 80061b6:	bd38      	pop	{r3, r4, r5, pc}
 80061b8:	20000280 	.word	0x20000280

080061bc <__sread>:
 80061bc:	b510      	push	{r4, lr}
 80061be:	460c      	mov	r4, r1
 80061c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061c4:	f000 f8a0 	bl	8006308 <_read_r>
 80061c8:	2800      	cmp	r0, #0
 80061ca:	bfab      	itete	ge
 80061cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80061ce:	89a3      	ldrhlt	r3, [r4, #12]
 80061d0:	181b      	addge	r3, r3, r0
 80061d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80061d6:	bfac      	ite	ge
 80061d8:	6563      	strge	r3, [r4, #84]	; 0x54
 80061da:	81a3      	strhlt	r3, [r4, #12]
 80061dc:	bd10      	pop	{r4, pc}

080061de <__swrite>:
 80061de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061e2:	461f      	mov	r7, r3
 80061e4:	898b      	ldrh	r3, [r1, #12]
 80061e6:	05db      	lsls	r3, r3, #23
 80061e8:	4605      	mov	r5, r0
 80061ea:	460c      	mov	r4, r1
 80061ec:	4616      	mov	r6, r2
 80061ee:	d505      	bpl.n	80061fc <__swrite+0x1e>
 80061f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061f4:	2302      	movs	r3, #2
 80061f6:	2200      	movs	r2, #0
 80061f8:	f000 f868 	bl	80062cc <_lseek_r>
 80061fc:	89a3      	ldrh	r3, [r4, #12]
 80061fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006202:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006206:	81a3      	strh	r3, [r4, #12]
 8006208:	4632      	mov	r2, r6
 800620a:	463b      	mov	r3, r7
 800620c:	4628      	mov	r0, r5
 800620e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006212:	f000 b817 	b.w	8006244 <_write_r>

08006216 <__sseek>:
 8006216:	b510      	push	{r4, lr}
 8006218:	460c      	mov	r4, r1
 800621a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800621e:	f000 f855 	bl	80062cc <_lseek_r>
 8006222:	1c43      	adds	r3, r0, #1
 8006224:	89a3      	ldrh	r3, [r4, #12]
 8006226:	bf15      	itete	ne
 8006228:	6560      	strne	r0, [r4, #84]	; 0x54
 800622a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800622e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006232:	81a3      	strheq	r3, [r4, #12]
 8006234:	bf18      	it	ne
 8006236:	81a3      	strhne	r3, [r4, #12]
 8006238:	bd10      	pop	{r4, pc}

0800623a <__sclose>:
 800623a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800623e:	f000 b813 	b.w	8006268 <_close_r>
	...

08006244 <_write_r>:
 8006244:	b538      	push	{r3, r4, r5, lr}
 8006246:	4d07      	ldr	r5, [pc, #28]	; (8006264 <_write_r+0x20>)
 8006248:	4604      	mov	r4, r0
 800624a:	4608      	mov	r0, r1
 800624c:	4611      	mov	r1, r2
 800624e:	2200      	movs	r2, #0
 8006250:	602a      	str	r2, [r5, #0]
 8006252:	461a      	mov	r2, r3
 8006254:	f7fa fcda 	bl	8000c0c <_write>
 8006258:	1c43      	adds	r3, r0, #1
 800625a:	d102      	bne.n	8006262 <_write_r+0x1e>
 800625c:	682b      	ldr	r3, [r5, #0]
 800625e:	b103      	cbz	r3, 8006262 <_write_r+0x1e>
 8006260:	6023      	str	r3, [r4, #0]
 8006262:	bd38      	pop	{r3, r4, r5, pc}
 8006264:	20000280 	.word	0x20000280

08006268 <_close_r>:
 8006268:	b538      	push	{r3, r4, r5, lr}
 800626a:	4d06      	ldr	r5, [pc, #24]	; (8006284 <_close_r+0x1c>)
 800626c:	2300      	movs	r3, #0
 800626e:	4604      	mov	r4, r0
 8006270:	4608      	mov	r0, r1
 8006272:	602b      	str	r3, [r5, #0]
 8006274:	f7fa ff01 	bl	800107a <_close>
 8006278:	1c43      	adds	r3, r0, #1
 800627a:	d102      	bne.n	8006282 <_close_r+0x1a>
 800627c:	682b      	ldr	r3, [r5, #0]
 800627e:	b103      	cbz	r3, 8006282 <_close_r+0x1a>
 8006280:	6023      	str	r3, [r4, #0]
 8006282:	bd38      	pop	{r3, r4, r5, pc}
 8006284:	20000280 	.word	0x20000280

08006288 <_fstat_r>:
 8006288:	b538      	push	{r3, r4, r5, lr}
 800628a:	4d07      	ldr	r5, [pc, #28]	; (80062a8 <_fstat_r+0x20>)
 800628c:	2300      	movs	r3, #0
 800628e:	4604      	mov	r4, r0
 8006290:	4608      	mov	r0, r1
 8006292:	4611      	mov	r1, r2
 8006294:	602b      	str	r3, [r5, #0]
 8006296:	f7fa fefc 	bl	8001092 <_fstat>
 800629a:	1c43      	adds	r3, r0, #1
 800629c:	d102      	bne.n	80062a4 <_fstat_r+0x1c>
 800629e:	682b      	ldr	r3, [r5, #0]
 80062a0:	b103      	cbz	r3, 80062a4 <_fstat_r+0x1c>
 80062a2:	6023      	str	r3, [r4, #0]
 80062a4:	bd38      	pop	{r3, r4, r5, pc}
 80062a6:	bf00      	nop
 80062a8:	20000280 	.word	0x20000280

080062ac <_isatty_r>:
 80062ac:	b538      	push	{r3, r4, r5, lr}
 80062ae:	4d06      	ldr	r5, [pc, #24]	; (80062c8 <_isatty_r+0x1c>)
 80062b0:	2300      	movs	r3, #0
 80062b2:	4604      	mov	r4, r0
 80062b4:	4608      	mov	r0, r1
 80062b6:	602b      	str	r3, [r5, #0]
 80062b8:	f7fa fefb 	bl	80010b2 <_isatty>
 80062bc:	1c43      	adds	r3, r0, #1
 80062be:	d102      	bne.n	80062c6 <_isatty_r+0x1a>
 80062c0:	682b      	ldr	r3, [r5, #0]
 80062c2:	b103      	cbz	r3, 80062c6 <_isatty_r+0x1a>
 80062c4:	6023      	str	r3, [r4, #0]
 80062c6:	bd38      	pop	{r3, r4, r5, pc}
 80062c8:	20000280 	.word	0x20000280

080062cc <_lseek_r>:
 80062cc:	b538      	push	{r3, r4, r5, lr}
 80062ce:	4d07      	ldr	r5, [pc, #28]	; (80062ec <_lseek_r+0x20>)
 80062d0:	4604      	mov	r4, r0
 80062d2:	4608      	mov	r0, r1
 80062d4:	4611      	mov	r1, r2
 80062d6:	2200      	movs	r2, #0
 80062d8:	602a      	str	r2, [r5, #0]
 80062da:	461a      	mov	r2, r3
 80062dc:	f7fa fef4 	bl	80010c8 <_lseek>
 80062e0:	1c43      	adds	r3, r0, #1
 80062e2:	d102      	bne.n	80062ea <_lseek_r+0x1e>
 80062e4:	682b      	ldr	r3, [r5, #0]
 80062e6:	b103      	cbz	r3, 80062ea <_lseek_r+0x1e>
 80062e8:	6023      	str	r3, [r4, #0]
 80062ea:	bd38      	pop	{r3, r4, r5, pc}
 80062ec:	20000280 	.word	0x20000280

080062f0 <__malloc_lock>:
 80062f0:	4801      	ldr	r0, [pc, #4]	; (80062f8 <__malloc_lock+0x8>)
 80062f2:	f7ff be0b 	b.w	8005f0c <__retarget_lock_acquire_recursive>
 80062f6:	bf00      	nop
 80062f8:	20000274 	.word	0x20000274

080062fc <__malloc_unlock>:
 80062fc:	4801      	ldr	r0, [pc, #4]	; (8006304 <__malloc_unlock+0x8>)
 80062fe:	f7ff be06 	b.w	8005f0e <__retarget_lock_release_recursive>
 8006302:	bf00      	nop
 8006304:	20000274 	.word	0x20000274

08006308 <_read_r>:
 8006308:	b538      	push	{r3, r4, r5, lr}
 800630a:	4d07      	ldr	r5, [pc, #28]	; (8006328 <_read_r+0x20>)
 800630c:	4604      	mov	r4, r0
 800630e:	4608      	mov	r0, r1
 8006310:	4611      	mov	r1, r2
 8006312:	2200      	movs	r2, #0
 8006314:	602a      	str	r2, [r5, #0]
 8006316:	461a      	mov	r2, r3
 8006318:	f7fa fe92 	bl	8001040 <_read>
 800631c:	1c43      	adds	r3, r0, #1
 800631e:	d102      	bne.n	8006326 <_read_r+0x1e>
 8006320:	682b      	ldr	r3, [r5, #0]
 8006322:	b103      	cbz	r3, 8006326 <_read_r+0x1e>
 8006324:	6023      	str	r3, [r4, #0]
 8006326:	bd38      	pop	{r3, r4, r5, pc}
 8006328:	20000280 	.word	0x20000280

0800632c <_init>:
 800632c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800632e:	bf00      	nop
 8006330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006332:	bc08      	pop	{r3}
 8006334:	469e      	mov	lr, r3
 8006336:	4770      	bx	lr

08006338 <_fini>:
 8006338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800633a:	bf00      	nop
 800633c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800633e:	bc08      	pop	{r3}
 8006340:	469e      	mov	lr, r3
 8006342:	4770      	bx	lr
